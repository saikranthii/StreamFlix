{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Import posters\nimport kalkiPoster from '../data/Kalki.jpg';\nimport salaarPoster from '../data/salaar.jpg';\nimport chaavaPoster from '../data/chaava.jpg';\nimport rrrPoster from '../data/rrr.jpg';\nimport pushpa2Poster from '../data/pushpa2.jpg';\nimport hiNannaPoster from '../data/hinanna.jpg';\nimport mad2Poster from '../data/mad2.jpg';\nimport courtPoster from '../data/court.jpg';\nimport dragonPoster from '../data/rod.jpg';\nimport saripodaPoster from '../data/ss.jpg';\nimport saahoPoster from '../data/saaho.jpg';\nimport baahubaliPoster from '../data/bb2.jpg';\nimport blackPoster from '../data/black.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState(() => {\n    const saved = sessionStorage.getItem('recommendations');\n    console.log('Initializing recommendations from sessionStorage:', saved);\n    return saved ? JSON.parse(saved) : {};\n  });\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n  const staticMoviesWithLocalPosters = {\n    Chaava: chaavaPoster,\n    Mad2: mad2Poster,\n    'Saripodhaa Sanivaaram': saripodaPoster,\n    Saaho: saahoPoster,\n    'Baahubali 2: The Conclusion': baahubaliPoster\n  };\n  const fallbackTeluguMovies = [{\n    id: 271726,\n    title: 'Baahubali: The Beginning',\n    thumbnail: baahubaliPoster,\n    description: 'Language: te, Genres: Action Drama, Year: 2015',\n    language: 'te',\n    genres: ['Action', 'Drama'],\n    release_year: 2015\n  }, {\n    id: 301345,\n    title: 'Baahubali 2: The Conclusion',\n    thumbnail: baahubaliPoster,\n    description: 'Language: te, Genres: Action Drama, Year: 2017',\n    language: 'te',\n    genres: ['Action', 'Drama'],\n    release_year: 2017\n  }, {\n    id: 134374,\n    title: '1 - Nenokkadine',\n    thumbnail: blackPoster,\n    description: 'Language: te, Genres: Action Thriller, Year: 2014',\n    language: 'te',\n    genres: ['Action', 'Thriller'],\n    release_year: 2014\n  }, {\n    id: 44977,\n    title: 'Dhoom:3',\n    thumbnail: blackPoster,\n    description: 'Language: te, Genres: Action Thriller, Year: 2013',\n    language: 'te',\n    genres: ['Action', 'Thriller'],\n    release_year: 2013\n  }];\n  const featuredItem = {\n    id: 271726,\n    title: 'Baahubali: The Beginning',\n    description: 'A Telugu epic about valor and sacrifice.',\n    thumbnail: baahubaliPoster,\n    video: '/videos/bb2.mp4',\n    language: 'te',\n    genres: ['Action', 'Drama'],\n    release_year: 2015\n  };\n  const initialRowsData = [{\n    title: 'Trending Movies',\n    items: [{\n      id: 900352,\n      title: 'Kalki 2898 AD',\n      thumbnail: kalkiPoster,\n      description: 'A futuristic film inspired by Hindu mythology.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Sci-Fi', 'Mythology', 'Action'],\n      release_year: 'N/A'\n    }, {\n      id: 934632,\n      title: 'Salaar: Part 1 – Ceasefire',\n      thumbnail: salaarPoster,\n      description: 'An action-packed saga of power and betrayal.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Drama', 'Epic'],\n      release_year: 'N/A'\n    }, {\n      id: 0,\n      title: 'Chhaava',\n      thumbnail: chaavaPoster,\n      description: 'A historical drama about bravery.',\n      isStatic: true,\n      language: 'hi',\n      genres: ['Historical', 'Action', 'Drama'],\n      release_year: 'N/A'\n    }, {\n      id: 614933,\n      title: 'RRR',\n      thumbnail: rrrPoster,\n      description: 'A revolutionary tale of friendship and rebellion.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Historical', 'Drama', 'Epic'],\n      release_year: 'N/A'\n    }, {\n      id: 614934,\n      title: 'Pushpa 2: The Rule',\n      thumbnail: pushpa2Poster,\n      description: 'A gripping sequel to the smuggling saga.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Drama'],\n      release_year: 'N/A'\n    }, {\n      id: 1121402,\n      title: 'Hi Nanna',\n      thumbnail: hiNannaPoster,\n      description: 'A heartwarming family drama.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Romance', 'Drama'],\n      release_year: 'N/A'\n    }, {\n      id: 1,\n      title: 'Mad2',\n      thumbnail: mad2Poster,\n      description: 'A thrilling continuation of mystery.',\n      isStatic: true,\n      language: 'te',\n      genres: ['Comedy', 'Drama', 'Coming-of-Age'],\n      release_year: 'N/A'\n    }, {\n      id: 297282,\n      title: 'Court',\n      thumbnail: courtPoster,\n      description: 'A thought-provoking legal drama.',\n      language: 'mr',\n      isStatic: true,\n      genres: ['Drama', 'Legal'],\n      release_year: 'N/A'\n    }, {\n      id: 1560,\n      title: 'Return of the Dragon',\n      thumbnail: dragonPoster,\n      description: 'A classic martial arts adventure.',\n      language: 'en',\n      isStatic: true,\n      genres: ['Action', 'Comedy', 'Martial Arts'],\n      release_year: 'N/A'\n    }, {\n      id: 614932,\n      title: 'Saaho',\n      thumbnail: saahoPoster,\n      description: 'A high-octane action thriller.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Thriller'],\n      release_year: 'N/A'\n    }, {\n      id: 2,\n      title: 'Saripodhaa Sanivaaram',\n      thumbnail: saripodaPoster,\n      description: 'An intense vigilante story.',\n      isStatic: true,\n      language: 'te',\n      genres: ['Action', 'Thriller', 'Vigilante'],\n      release_year: 'N/A'\n    }, {\n      id: 301345,\n      title: 'Baahubali 2: The Conclusion',\n      thumbnail: baahubaliPoster,\n      description: 'The epic conclusion of a warrior’s saga.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Drama'],\n      release_year: 2017\n    }]\n  }, {\n    title: 'Watch It Again',\n    items: [{\n      id: 5,\n      title: 'Inception',\n      thumbnail: blackPoster,\n      description: 'A mind-bending heist movie.',\n      language: 'en',\n      genres: ['Sci-Fi', 'Thriller'],\n      release_year: 'N/A'\n    }, {\n      id: 6,\n      title: 'Titanic',\n      thumbnail: blackPoster,\n      description: 'A romantic disaster film.',\n      language: 'en',\n      genres: ['Romance', 'Drama'],\n      release_year: 'N/A'\n    }]\n  }];\n  const staticMovieTitles = initialRowsData[0].items.map(item => item.title);\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      console.log('Clearing recommendations from sessionStorage on unload');\n      sessionStorage.removeItem('recommendations');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n    console.log('Favorites saved to localStorage:', favorites);\n  }, [favorites]);\n  useEffect(() => {\n    console.log('Saving recommendations to sessionStorage:', recommendations);\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\n  }, [recommendations]);\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        console.log('Removing from favorites:', item.title);\n        const updatedFavorites = prevFavorites.filter(fav => fav.id !== item.id);\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return updatedFavorites;\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setTimeout(() => setNotification(''), 3000));\n        console.log('Adding to favorites:', item.title);\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies, retries = 3) => {\n    setLoading(true);\n    setError(null);\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\" (Attempt ${attempt}/${retries})...`);\n        const response = await fetch('http://localhost:5000/random-telugu', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(`/random-telugu response: status ${response.status}, statusText: ${response.statusText}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}, response: ${await response.text()}`);\n        }\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          console.log(`Received ${data.length} random Telugu recommendations for \"${movieTitle}\":`, data);\n          const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n          console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\n          const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n          const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\n            console.log(`Processing recommendation ${i}:`, rec);\n            const poster = rec.poster || blackPoster;\n            console.log(`Poster for ${rec.title}:`, poster);\n            if (!poster || poster === \"https://via.placeholder.com/200x300?text=Poster\") {\n              console.warn(`Invalid poster for ${rec.title}, using blackPoster`);\n              return {\n                ...rec,\n                thumbnail: blackPoster\n              };\n            }\n            return {\n              id: rec.id || i + 200,\n              title: rec.title,\n              thumbnail: poster,\n              description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres.join(', ') || 'N/A'}, Year: ${rec.release_year || 'N/A'}`,\n              language: rec.original_language || 'te',\n              genres: rec.genres || [],\n              release_year: rec.release_year || 'N/A'\n            };\n          });\n          setRecommendations(prev => ({\n            ...prev,\n            [movieTitle]: selectedRecommendations\n          }));\n          return;\n        } else {\n          throw new Error(`Invalid data format from /random-telugu endpoint: ${JSON.stringify(data)}`);\n        }\n      } catch (err) {\n        console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\" (Attempt ${attempt}/${retries}):`, err);\n        if (attempt === retries) {\n          console.warn(`All retries failed for \"${movieTitle}\". Using fallback Telugu movies.`);\n          setError(`Failed to fetch random Telugu recommendations for \"${movieTitle}\": ${err.message}`);\n          setRecommendations(prev => ({\n            ...prev,\n            [movieTitle]: fallbackTeluguMovies.slice(0, numMovies)\n          }));\n        }\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  const fetchTeluguRecommendationsByGenre = async (movieTitle, genres, numMovies, retries = 3) => {\n    setLoading(true);\n    setError(null);\n    const normalizedGenres = genres.map(genre => {\n      switch (genre.toLowerCase()) {\n        case 'epic mythological science fiction':\n          return ['Sci-Fi', 'Mythology', 'Action'];\n        case 'epic action drama':\n          return ['Action', 'Drama', 'Epic'];\n        case 'historical action drama':\n          return ['Historical', 'Action', 'Drama'];\n        case 'epic historical action drama':\n          return ['Action', 'Historical', 'Drama', 'Epic'];\n        case 'action drama':\n          return ['Action', 'Drama'];\n        case 'romantic drama':\n          return ['Romance', 'Drama'];\n        case 'coming-of-age comedy-drama':\n          return ['Comedy', 'Drama', 'Coming-of-Age'];\n        case 'legal drama':\n          return ['Drama', 'Legal'];\n        case 'martial arts action comedy':\n          return ['Action', 'Comedy', 'Martial Arts'];\n        case 'vigilante action thriller':\n          return ['Action', 'Thriller', 'Vigilante'];\n        case 'action thriller':\n          return ['Action', 'Thriller'];\n        case 'epic period action':\n          return ['Action', 'Period', 'Epic'];\n        default:\n          return genre;\n      }\n    }).flat();\n    console.log(`Normalized genres for \"${movieTitle}\":`, normalizedGenres);\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        console.log(`Fetching ${numMovies} Telugu recommendations for \"${movieTitle}\" in genres: ${normalizedGenres.join(', ')} (Attempt ${attempt}/${retries})...`);\n        const response = await fetch('http://localhost:5000/random-telugu-by-genre', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            genres: normalizedGenres,\n            exclude_titles: staticMovieTitles\n          })\n        });\n        console.log(`/random-telugu-by-genre response: status ${response.status}, statusText: ${response.statusText}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}, response: ${await response.text()}`);\n        }\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          console.log(`Received ${data.length} Telugu recommendations for \"${movieTitle}\":`, data);\n          const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n          console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\n          const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n          const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\n            console.log(`Processing recommendation ${i}:`, rec);\n            const poster = rec.poster || blackPoster;\n            console.log(`Poster for ${rec.title}:`, poster);\n            if (!poster || poster === \"https://via.placeholder.com/200x300?text=Poster\") {\n              console.warn(`Invalid poster for ${rec.title}, using blackPoster`);\n              return {\n                ...rec,\n                thumbnail: blackPoster\n              };\n            }\n            return {\n              id: rec.id || i + 200,\n              title: rec.title,\n              thumbnail: poster,\n              description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres.join(', ') || 'N/A'}, Year: ${rec.release_year || 'N/A'}`,\n              language: rec.original_language || 'te',\n              genres: rec.genres || [],\n              release_year: rec.release_year || 'N/A'\n            };\n          });\n          setRecommendations(prev => ({\n            ...prev,\n            [movieTitle]: selectedRecommendations\n          }));\n          return;\n        } else {\n          throw new Error(`Invalid data format from /random-telugu-by-genre endpoint: ${JSON.stringify(data)}`);\n        }\n      } catch (err) {\n        console.warn(`Failed to fetch genre-based recommendations for \"${movieTitle}\" (Attempt ${attempt}/${retries}): ${err.message}`);\n        if (attempt === retries) {\n          console.warn(`All retries failed for \"${movieTitle}\". Falling back to random Telugu recommendations.`);\n          await fetchRandomTeluguRecommendations(movieTitle, numMovies, retries);\n        }\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  const fetchPosterForMovie = async (movieTitle, retries = 3) => {\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        console.log(`Fetching poster for \"${movieTitle}\" via /movie endpoint (Attempt ${attempt}/${retries})...`);\n        const response = await fetch('http://localhost:5000/movie', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            title: movieTitle\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}, response: ${await response.text()}`);\n        }\n        const data = await response.json();\n        console.log(`Poster fetch response for \"${movieTitle}\":`, data);\n        if (data && data.poster && typeof data.poster === 'string' && data.poster.trim() !== '' && data.poster !== \"https://via.placeholder.com/200x300?text=Poster\") {\n          console.log(`Valid poster found for \"${movieTitle}\":`, data.poster);\n          return data.poster;\n        } else {\n          throw new Error(`No valid poster field in response for \"${movieTitle}\": ${JSON.stringify(data)}`);\n        }\n      } catch (err) {\n        console.error(`Error fetching poster for \"${movieTitle}\" (Attempt ${attempt}/${retries}):`, err);\n        if (attempt === retries) {\n          console.warn(`All retries failed for \"${movieTitle}\". Using blackPoster.`);\n          return blackPoster;\n        }\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  };\n  const fetchRecommendations = async (movieTitle, retries = 3) => {\n    setLoading(true);\n    setError(null);\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        console.log(`Fetching recommendations for \"${movieTitle}\" (Attempt ${attempt}/${retries})...`);\n        const response = await fetch('http://localhost:5000/recommend', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            movie_title: movieTitle\n          })\n        });\n        const data = await response.json();\n        console.log(`Response for /recommend: status ${response.status}, data:`, data);\n        if (response.ok && Array.isArray(data) && data.length > 0) {\n          const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n          console.log(`After removing duplicates, ${uniqueData.length} unique recommendations for \"${movieTitle}\":`, uniqueData);\n          const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n          console.log(`Selecting ${numRecs} recommendations for \"${movieTitle}\"...`);\n          const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n          const selectedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => {\n            const poster = rec.poster || blackPoster;\n            console.log(`Poster for ${rec.title}:`, poster);\n            if (!poster || poster === \"https://via.placeholder.com/200x300?text=Poster\") {\n              console.warn(`Invalid poster for ${rec.title}, using blackPoster`);\n              return {\n                ...rec,\n                thumbnail: blackPoster\n              };\n            }\n            return {\n              id: rec.movie_id || rec.id || i + 100,\n              title: rec.title,\n              thumbnail: poster,\n              description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres.join(', ') || 'N/A'}, Year: ${rec.release_year || 'N/A'}`,\n              language: rec.original_language || 'en',\n              genres: rec.genres || [],\n              release_year: rec.release_year || 'N/A'\n            };\n          });\n          setRecommendations(prev => ({\n            ...prev,\n            [movieTitle]: selectedRecommendations\n          }));\n          return;\n        } else {\n          throw new Error(`No valid data from /recommend for \"${movieTitle}\": ${JSON.stringify(data)}`);\n        }\n      } catch (err) {\n        console.error(`Error fetching recommendations for \"${movieTitle}\" (Attempt ${attempt}/${retries}):`, err);\n        if (attempt === retries) {\n          setError(`Failed to fetch recommendations for \"${movieTitle}\": ${err.message}`);\n          setRecommendations(prev => ({\n            ...prev,\n            [movieTitle]: []\n          }));\n        }\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\n        for (const row of updatedRows) {\n          if (row.title === 'Watch It Again') {\n            for (const item of row.items) {\n              if (item.language === 'en') {\n                const poster = await fetchPosterForMovie(item.title);\n                item.thumbnail = poster;\n              }\n            }\n          }\n        }\n        setInitialRows(updatedRows);\n        if (featuredItem.language === 'te' && !recommendations[featuredItem.title]) {\n          const numRecsForBaahubali = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n          console.log(`Fetching initial Baahubali recommendations (${numRecsForBaahubali})`);\n          await fetchTeluguRecommendationsByGenre(featuredItem.title, featuredItem.genres, numRecsForBaahubali);\n        } else {\n          console.log(`Skipping Baahubali recommendations fetch; already exists:`, recommendations[featuredItem.title]);\n        }\n      } catch (err) {\n        setError('Failed to fetch initial data: ' + err.message);\n        console.error('Initial fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, [recommendations]);\n  const handleMoreInfo = item => {\n    const updatedItem = {\n      ...item\n    };\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\n    }\n    setSelectedItem(updatedItem);\n    const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n    if (staticMovieTitles.includes(item.title)) {\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\n    } else if (item.language === 'te') {\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\n    } else {\n      fetchRecommendations(item.title);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 449,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"ZeQ/juDncc6iGOk4Jn2j4/7+q60=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Header","Hero","Row","Modal","Footer","kalkiPoster","salaarPoster","chaavaPoster","rrrPoster","pushpa2Poster","hiNannaPoster","mad2Poster","courtPoster","dragonPoster","saripodaPoster","saahoPoster","baahubaliPoster","blackPoster","jsxDEV","_jsxDEV","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","saved","sessionStorage","getItem","console","log","JSON","parse","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","localStorage","notification","setNotification","staticMoviesWithLocalPosters","Chaava","Mad2","Saaho","fallbackTeluguMovies","id","title","thumbnail","description","language","genres","release_year","featuredItem","video","initialRowsData","items","isStatic","staticMovieTitles","map","item","handleBeforeUnload","removeItem","window","addEventListener","removeEventListener","scrollTo","setItem","stringify","toggleFavorite","prevFavorites","isFavorited","some","fav","updatedFavorites","filter","setTimeout","fetchRandomTeluguRecommendations","movieTitle","numMovies","retries","attempt","response","fetch","method","headers","status","statusText","ok","Error","text","data","json","Array","isArray","length","uniqueData","from","Map","toLowerCase","values","shuffled","sort","Math","random","selectedRecommendations","slice","min","rec","i","poster","warn","original_language","join","prev","err","message","Promise","resolve","fetchTeluguRecommendationsByGenre","normalizedGenres","genre","flat","body","exclude_titles","fetchPosterForMovie","trim","fetchRecommendations","movie_title","numRecs","floor","movie_id","fetchInitialData","updatedRows","row","numRecsForBaahubali","handleMoreInfo","updatedItem","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onMoreInfo","index","Object","entries","recs","keys","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Import posters\r\nimport kalkiPoster from '../data/Kalki.jpg';\r\nimport salaarPoster from '../data/salaar.jpg';\r\nimport chaavaPoster from '../data/chaava.jpg';\r\nimport rrrPoster from '../data/rrr.jpg';\r\nimport pushpa2Poster from '../data/pushpa2.jpg';\r\nimport hiNannaPoster from '../data/hinanna.jpg';\r\nimport mad2Poster from '../data/mad2.jpg';\r\nimport courtPoster from '../data/court.jpg';\r\nimport dragonPoster from '../data/rod.jpg';\r\nimport saripodaPoster from '../data/ss.jpg';\r\nimport saahoPoster from '../data/saaho.jpg';\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\nimport blackPoster from '../data/black.jpg';\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState(() => {\r\n    const saved = sessionStorage.getItem('recommendations');\r\n    console.log('Initializing recommendations from sessionStorage:', saved);\r\n    return saved ? JSON.parse(saved) : {};\r\n  });\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() =>\r\n    JSON.parse(localStorage.getItem('myList') || '[]')\r\n  );\r\n  const [notification, setNotification] = useState('');\r\n\r\n  const staticMoviesWithLocalPosters = {\r\n    Chaava: chaavaPoster,\r\n    Mad2: mad2Poster,\r\n    'Saripodhaa Sanivaaram': saripodaPoster,\r\n    Saaho: saahoPoster,\r\n    'Baahubali 2: The Conclusion': baahubaliPoster\r\n  };\r\n\r\n  const fallbackTeluguMovies = [\r\n    {\r\n      id: 271726,\r\n      title: 'Baahubali: The Beginning',\r\n      thumbnail: baahubaliPoster,\r\n      description: 'Language: te, Genres: Action Drama, Year: 2015',\r\n      language: 'te',\r\n      genres: ['Action', 'Drama'],\r\n      release_year: 2015\r\n    },\r\n    {\r\n      id: 301345,\r\n      title: 'Baahubali 2: The Conclusion',\r\n      thumbnail: baahubaliPoster,\r\n      description: 'Language: te, Genres: Action Drama, Year: 2017',\r\n      language: 'te',\r\n      genres: ['Action', 'Drama'],\r\n      release_year: 2017\r\n    },\r\n    {\r\n      id: 134374,\r\n      title: '1 - Nenokkadine',\r\n      thumbnail: blackPoster,\r\n      description: 'Language: te, Genres: Action Thriller, Year: 2014',\r\n      language: 'te',\r\n      genres: ['Action', 'Thriller'],\r\n      release_year: 2014\r\n    },\r\n    {\r\n      id: 44977,\r\n      title: 'Dhoom:3',\r\n      thumbnail: blackPoster,\r\n      description: 'Language: te, Genres: Action Thriller, Year: 2013',\r\n      language: 'te',\r\n      genres: ['Action', 'Thriller'],\r\n      release_year: 2013\r\n    }\r\n  ];\r\n\r\n  const featuredItem = {\r\n    id: 271726,\r\n    title: 'Baahubali: The Beginning',\r\n    description: 'A Telugu epic about valor and sacrifice.',\r\n    thumbnail: baahubaliPoster,\r\n    video: '/videos/bb2.mp4',\r\n    language: 'te',\r\n    genres: ['Action', 'Drama'],\r\n    release_year: 2015\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: 'Trending Movies',\r\n      items: [\r\n        { id: 900352, title: 'Kalki 2898 AD', thumbnail: kalkiPoster, description: 'A futuristic film inspired by Hindu mythology.', language: 'te', isStatic: true, genres: ['Sci-Fi', 'Mythology', 'Action'], release_year: 'N/A' },\r\n        { id: 934632, title: 'Salaar: Part 1 – Ceasefire', thumbnail: salaarPoster, description: 'An action-packed saga of power and betrayal.', language: 'te', isStatic: true, genres: ['Action', 'Drama', 'Epic'], release_year: 'N/A' },\r\n        { id: 0, title: 'Chhaava', thumbnail: chaavaPoster, description: 'A historical drama about bravery.', isStatic: true, language: 'hi', genres: ['Historical', 'Action', 'Drama'], release_year: 'N/A' },\r\n        { id: 614933, title: 'RRR', thumbnail: rrrPoster, description: 'A revolutionary tale of friendship and rebellion.', language: 'te', isStatic: true, genres: ['Action', 'Historical', 'Drama', 'Epic'], release_year: 'N/A' },\r\n        { id: 614934, title: 'Pushpa 2: The Rule', thumbnail: pushpa2Poster, description: 'A gripping sequel to the smuggling saga.', language: 'te', isStatic: true, genres: ['Action', 'Drama'], release_year: 'N/A' },\r\n        { id: 1121402, title: 'Hi Nanna', thumbnail: hiNannaPoster, description: 'A heartwarming family drama.', language: 'te', isStatic: true, genres: ['Romance', 'Drama'], release_year: 'N/A' },\r\n        { id: 1, title: 'Mad2', thumbnail: mad2Poster, description: 'A thrilling continuation of mystery.', isStatic: true, language: 'te', genres: ['Comedy', 'Drama', 'Coming-of-Age'], release_year: 'N/A' },\r\n        { id: 297282, title: 'Court', thumbnail: courtPoster, description: 'A thought-provoking legal drama.', language: 'mr', isStatic: true, genres: ['Drama', 'Legal'], release_year: 'N/A' },\r\n        { id: 1560, title: 'Return of the Dragon', thumbnail: dragonPoster, description: 'A classic martial arts adventure.', language: 'en', isStatic: true, genres: ['Action', 'Comedy', 'Martial Arts'], release_year: 'N/A' },\r\n        { id: 614932, title: 'Saaho', thumbnail: saahoPoster, description: 'A high-octane action thriller.', language: 'te', isStatic: true, genres: ['Action', 'Thriller'], release_year: 'N/A' },\r\n        { id: 2, title: 'Saripodhaa Sanivaaram', thumbnail: saripodaPoster, description: 'An intense vigilante story.', isStatic: true, language: 'te', genres: ['Action', 'Thriller', 'Vigilante'], release_year: 'N/A' },\r\n        { id: 301345, title: 'Baahubali 2: The Conclusion', thumbnail: baahubaliPoster, description: 'The epic conclusion of a warrior’s saga.', language: 'te', isStatic: true, genres: ['Action', 'Drama'], release_year: 2017 }\r\n      ]\r\n    },\r\n    {\r\n      title: 'Watch It Again',\r\n      items: [\r\n        { id: 5, title: 'Inception', thumbnail: blackPoster, description: 'A mind-bending heist movie.', language: 'en', genres: ['Sci-Fi', 'Thriller'], release_year: 'N/A' },\r\n        { id: 6, title: 'Titanic', thumbnail: blackPoster, description: 'A romantic disaster film.', language: 'en', genres: ['Romance', 'Drama'], release_year: 'N/A' }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const staticMovieTitles = initialRowsData[0].items.map(item => item.title);\r\n\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      console.log('Clearing recommendations from sessionStorage on unload');\r\n      sessionStorage.removeItem('recommendations');\r\n    };\r\n\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n    console.log('Favorites saved to localStorage:', favorites);\r\n  }, [favorites]);\r\n\r\n  useEffect(() => {\r\n    console.log('Saving recommendations to sessionStorage:', recommendations);\r\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\r\n  }, [recommendations]);\r\n\r\n  const toggleFavorite = (item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        console.log('Removing from favorites:', item.title);\r\n        const updatedFavorites = prevFavorites.filter((fav) => fav.id !== item.id);\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return updatedFavorites;\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setTimeout(() => setNotification(''), 3000));\r\n        console.log('Adding to favorites:', item.title);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies, retries = 3) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    for (let attempt = 1; attempt <= retries; attempt++) {\r\n      try {\r\n        console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\" (Attempt ${attempt}/${retries})...`);\r\n        const response = await fetch('http://localhost:5000/random-telugu', {\r\n          method: 'GET',\r\n          headers: { 'Content-Type': 'application/json' }\r\n        });\r\n        console.log(`/random-telugu response: status ${response.status}, statusText: ${response.statusText}`);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}, response: ${await response.text()}`);\r\n        }\r\n        const data = await response.json();\r\n        if (Array.isArray(data)) {\r\n          console.log(`Received ${data.length} random Telugu recommendations for \"${movieTitle}\":`, data);\r\n          const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n          console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\r\n          const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n          const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\r\n            console.log(`Processing recommendation ${i}:`, rec);\r\n            const poster = rec.poster || blackPoster;\r\n            console.log(`Poster for ${rec.title}:`, poster);\r\n            if (!poster || poster === \"https://via.placeholder.com/200x300?text=Poster\") {\r\n              console.warn(`Invalid poster for ${rec.title}, using blackPoster`);\r\n              return {\r\n                ...rec,\r\n                thumbnail: blackPoster\r\n              };\r\n            }\r\n            return {\r\n              id: rec.id || (i + 200),\r\n              title: rec.title,\r\n              thumbnail: poster,\r\n              description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres.join(', ') || 'N/A'}, Year: ${rec.release_year || 'N/A'}`,\r\n              language: rec.original_language || 'te',\r\n              genres: rec.genres || [],\r\n              release_year: rec.release_year || 'N/A'\r\n            };\r\n          });\r\n          setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n          return;\r\n        } else {\r\n          throw new Error(`Invalid data format from /random-telugu endpoint: ${JSON.stringify(data)}`);\r\n        }\r\n      } catch (err) {\r\n        console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\" (Attempt ${attempt}/${retries}):`, err);\r\n        if (attempt === retries) {\r\n          console.warn(`All retries failed for \"${movieTitle}\". Using fallback Telugu movies.`);\r\n          setError(`Failed to fetch random Telugu recommendations for \"${movieTitle}\": ${err.message}`);\r\n          setRecommendations((prev) => ({ ...prev, [movieTitle]: fallbackTeluguMovies.slice(0, numMovies) }));\r\n        }\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchTeluguRecommendationsByGenre = async (movieTitle, genres, numMovies, retries = 3) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    const normalizedGenres = genres.map(genre => {\r\n      switch (genre.toLowerCase()) {\r\n        case 'epic mythological science fiction': return ['Sci-Fi', 'Mythology', 'Action'];\r\n        case 'epic action drama': return ['Action', 'Drama', 'Epic'];\r\n        case 'historical action drama': return ['Historical', 'Action', 'Drama'];\r\n        case 'epic historical action drama': return ['Action', 'Historical', 'Drama', 'Epic'];\r\n        case 'action drama': return ['Action', 'Drama'];\r\n        case 'romantic drama': return ['Romance', 'Drama'];\r\n        case 'coming-of-age comedy-drama': return ['Comedy', 'Drama', 'Coming-of-Age'];\r\n        case 'legal drama': return ['Drama', 'Legal'];\r\n        case 'martial arts action comedy': return ['Action', 'Comedy', 'Martial Arts'];\r\n        case 'vigilante action thriller': return ['Action', 'Thriller', 'Vigilante'];\r\n        case 'action thriller': return ['Action', 'Thriller'];\r\n        case 'epic period action': return ['Action', 'Period', 'Epic'];\r\n        default: return genre;\r\n      }\r\n    }).flat();\r\n    console.log(`Normalized genres for \"${movieTitle}\":`, normalizedGenres);\r\n\r\n    for (let attempt = 1; attempt <= retries; attempt++) {\r\n      try {\r\n        console.log(`Fetching ${numMovies} Telugu recommendations for \"${movieTitle}\" in genres: ${normalizedGenres.join(', ')} (Attempt ${attempt}/${retries})...`);\r\n        const response = await fetch('http://localhost:5000/random-telugu-by-genre', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ genres: normalizedGenres, exclude_titles: staticMovieTitles })\r\n        });\r\n        console.log(`/random-telugu-by-genre response: status ${response.status}, statusText: ${response.statusText}`);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}, response: ${await response.text()}`);\r\n        }\r\n        const data = await response.json();\r\n        if (Array.isArray(data)) {\r\n          console.log(`Received ${data.length} Telugu recommendations for \"${movieTitle}\":`, data);\r\n          const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n          console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\r\n          const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n          const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\r\n            console.log(`Processing recommendation ${i}:`, rec);\r\n            const poster = rec.poster || blackPoster;\r\n            console.log(`Poster for ${rec.title}:`, poster);\r\n            if (!poster || poster === \"https://via.placeholder.com/200x300?text=Poster\") {\r\n              console.warn(`Invalid poster for ${rec.title}, using blackPoster`);\r\n              return {\r\n                ...rec,\r\n                thumbnail: blackPoster\r\n              };\r\n            }\r\n            return {\r\n              id: rec.id || (i + 200),\r\n              title: rec.title,\r\n              thumbnail: poster,\r\n              description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres.join(', ') || 'N/A'}, Year: ${rec.release_year || 'N/A'}`,\r\n              language: rec.original_language || 'te',\r\n              genres: rec.genres || [],\r\n              release_year: rec.release_year || 'N/A'\r\n            };\r\n          });\r\n          setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n          return;\r\n        } else {\r\n          throw new Error(`Invalid data format from /random-telugu-by-genre endpoint: ${JSON.stringify(data)}`);\r\n        }\r\n      } catch (err) {\r\n        console.warn(`Failed to fetch genre-based recommendations for \"${movieTitle}\" (Attempt ${attempt}/${retries}): ${err.message}`);\r\n        if (attempt === retries) {\r\n          console.warn(`All retries failed for \"${movieTitle}\". Falling back to random Telugu recommendations.`);\r\n          await fetchRandomTeluguRecommendations(movieTitle, numMovies, retries);\r\n        }\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchPosterForMovie = async (movieTitle, retries = 3) => {\r\n    for (let attempt = 1; attempt <= retries; attempt++) {\r\n      try {\r\n        console.log(`Fetching poster for \"${movieTitle}\" via /movie endpoint (Attempt ${attempt}/${retries})...`);\r\n        const response = await fetch('http://localhost:5000/movie', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ title: movieTitle })\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}, response: ${await response.text()}`);\r\n        }\r\n        const data = await response.json();\r\n        console.log(`Poster fetch response for \"${movieTitle}\":`, data);\r\n        if (data && data.poster && typeof data.poster === 'string' && data.poster.trim() !== '' && data.poster !== \"https://via.placeholder.com/200x300?text=Poster\") {\r\n          console.log(`Valid poster found for \"${movieTitle}\":`, data.poster);\r\n          return data.poster;\r\n        } else {\r\n          throw new Error(`No valid poster field in response for \"${movieTitle}\": ${JSON.stringify(data)}`);\r\n        }\r\n      } catch (err) {\r\n        console.error(`Error fetching poster for \"${movieTitle}\" (Attempt ${attempt}/${retries}):`, err);\r\n        if (attempt === retries) {\r\n          console.warn(`All retries failed for \"${movieTitle}\". Using blackPoster.`);\r\n          return blackPoster;\r\n        }\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchRecommendations = async (movieTitle, retries = 3) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    for (let attempt = 1; attempt <= retries; attempt++) {\r\n      try {\r\n        console.log(`Fetching recommendations for \"${movieTitle}\" (Attempt ${attempt}/${retries})...`);\r\n        const response = await fetch('http://localhost:5000/recommend', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ movie_title: movieTitle })\r\n        });\r\n        const data = await response.json();\r\n        console.log(`Response for /recommend: status ${response.status}, data:`, data);\r\n        if (response.ok && Array.isArray(data) && data.length > 0) {\r\n          const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n          console.log(`After removing duplicates, ${uniqueData.length} unique recommendations for \"${movieTitle}\":`, uniqueData);\r\n          const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n          console.log(`Selecting ${numRecs} recommendations for \"${movieTitle}\"...`);\r\n          const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n          const selectedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => {\r\n            const poster = rec.poster || blackPoster;\r\n            console.log(`Poster for ${rec.title}:`, poster);\r\n            if (!poster || poster === \"https://via.placeholder.com/200x300?text=Poster\") {\r\n              console.warn(`Invalid poster for ${rec.title}, using blackPoster`);\r\n              return {\r\n                ...rec,\r\n                thumbnail: blackPoster\r\n              };\r\n            }\r\n            return {\r\n              id: rec.movie_id || rec.id || (i + 100),\r\n              title: rec.title,\r\n              thumbnail: poster,\r\n              description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres.join(', ') || 'N/A'}, Year: ${rec.release_year || 'N/A'}`,\r\n              language: rec.original_language || 'en',\r\n              genres: rec.genres || [],\r\n              release_year: rec.release_year || 'N/A'\r\n            };\r\n          });\r\n          setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n          return;\r\n        } else {\r\n          throw new Error(`No valid data from /recommend for \"${movieTitle}\": ${JSON.stringify(data)}`);\r\n        }\r\n      } catch (err) {\r\n        console.error(`Error fetching recommendations for \"${movieTitle}\" (Attempt ${attempt}/${retries}):`, err);\r\n        if (attempt === retries) {\r\n          setError(`Failed to fetch recommendations for \"${movieTitle}\": ${err.message}`);\r\n          setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n        }\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\r\n\r\n        for (const row of updatedRows) {\r\n          if (row.title === 'Watch It Again') {\r\n            for (const item of row.items) {\r\n              if (item.language === 'en') {\r\n                const poster = await fetchPosterForMovie(item.title);\r\n                item.thumbnail = poster;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        setInitialRows(updatedRows);\r\n\r\n        if (featuredItem.language === 'te' && !recommendations[featuredItem.title]) {\r\n          const numRecsForBaahubali = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n          console.log(`Fetching initial Baahubali recommendations (${numRecsForBaahubali})`);\r\n          await fetchTeluguRecommendationsByGenre(featuredItem.title, featuredItem.genres, numRecsForBaahubali);\r\n        } else {\r\n          console.log(`Skipping Baahubali recommendations fetch; already exists:`, recommendations[featuredItem.title]);\r\n        }\r\n      } catch (err) {\r\n        setError('Failed to fetch initial data: ' + err.message);\r\n        console.error('Initial fetch error:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, [recommendations]);\r\n\r\n  const handleMoreInfo = (item) => {\r\n    const updatedItem = { ...item };\r\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\r\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\r\n    }\r\n    setSelectedItem(updatedItem);\r\n    const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n    if (staticMovieTitles.includes(item.title)) {\r\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\r\n    } else if (item.language === 'te') {\r\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\r\n    } else {\r\n      fetchRecommendations(item.title);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <Header />\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites || []}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}