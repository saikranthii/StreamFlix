{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Only import the poster for Baahubali (used in the Hero section)\nimport baahubaliPoster from '../data/bb2.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState({});\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n  const featuredItem = {\n    id: 271726,\n    title: \"Baahubali: The Beginning\",\n    description: \"A Telugu epic about valor and sacrifice.\",\n    thumbnail: baahubaliPoster,\n    video: \"/videos/bb2.mp4\"\n  };\n  const initialRowsData = [{\n    title: \"Watch It Again\",\n    items: [{\n      id: 5,\n      title: \"Inception\",\n      thumbnail: null,\n      description: \"A mind-bending heist movie.\",\n      fallbackImage: \"../data/black.jpg\"\n    }, {\n      id: 6,\n      title: \"Titanic\",\n      thumbnail: null,\n      description: \"A romantic disaster film.\",\n      fallbackImage: \"../data/black.jpg\"\n    }]\n  }];\n\n  // Fallback static list for \"Trending Movies\" if fetch fails\n  const fallbackTrendingMovies = [{\n    id: 900352,\n    title: \"Kalki 2898 AD\",\n    thumbnail: null,\n    description: \"A sci-fi epic set in a dystopian future.\",\n    fallbackImage: \"../data/black.jpg\"\n  }, {\n    id: 934632,\n    title: \"Salaar\",\n    thumbnail: null,\n    description: \"An action-packed saga of power and betrayal.\",\n    fallbackImage: \"../data/black.jpg\"\n  }, {\n    id: 614933,\n    title: \"RRR\",\n    thumbnail: null,\n    description: \"A revolutionary tale of friendship and rebellion.\",\n    fallbackImage: \"../data/black.jpg\"\n  }, {\n    id: 614934,\n    title: \"Pushpa 2: The Rule\",\n    thumbnail: null,\n    description: \"A gripping sequel to the smuggling saga.\",\n    fallbackImage: \"../data/black.jpg\"\n  }, {\n    id: 1121402,\n    title: \"Hi Nanna\",\n    thumbnail: null,\n    description: \"A heartwarming family drama.\",\n    fallbackImage: \"../data/black.jpg\"\n  }, {\n    id: 614932,\n    title: \"Saaho\",\n    thumbnail: null,\n    description: \"A high-octane action thriller.\",\n    fallbackImage: \"../data/black.jpg\"\n  }];\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n    console.log('Favorites saved to localStorage:', favorites);\n  }, [favorites]);\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        console.log('Removing from favorites:', item.title);\n        const updatedFavorites = prevFavorites.filter(fav => fav.id !== item.id);\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return updatedFavorites;\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        console.log('Adding to favorites:', item.title);\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        // Fetch \"Trending Movies\" dynamically using /recommend with a timeout\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 5000); // 5-second timeout\n\n        const trendingMoviesResponse = await fetch('http://localhost:5000/recommend', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            movie_title: \"Kalki 2898 AD\"\n          }),\n          signal: controller.signal\n        }).catch(err => {\n          console.error('Fetch error for Trending Movies:', err.message);\n          throw new Error('Failed to fetch trending movies');\n        });\n        clearTimeout(timeoutId);\n        const trendingMoviesData = await trendingMoviesResponse.json();\n        console.log('Trending Movies response:', trendingMoviesData);\n\n        // Validate response format\n        if (!Array.isArray(trendingMoviesData)) {\n          console.error('Trending Movies response is not an array:', trendingMoviesData);\n          throw new Error('Invalid response format for trending movies');\n        }\n        const trendingMovies = trendingMoviesData.map((rec, i) => {\n          if (!rec.title) {\n            console.warn('Invalid recommendation item:', rec);\n            return null;\n          }\n          return {\n            id: i + 300,\n            title: rec.title,\n            thumbnail: rec.poster || null,\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n            fallbackImage: \"../data/black.jpg\"\n          };\n        }).filter(item => item !== null);\n        if (trendingMovies.length === 0) {\n          console.warn('No valid trending movies after mapping, using fallback');\n          throw new Error('No valid trending movies');\n        }\n        const updatedRows = await Promise.all(initialRowsData.map(async row => {\n          const updatedItems = await Promise.all(row.items.map(async item => {\n            if (item.thumbnail) return item;\n            try {\n              const response = await fetch('http://localhost:5000/recommend', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  movie_title: item.title\n                }),\n                signal: controller.signal\n              });\n              const data = await response.json();\n              if (response.ok && Array.isArray(data) && data.length > 0 && data[0].poster) {\n                return {\n                  ...item,\n                  thumbnail: data[0].poster\n                };\n              }\n              return {\n                ...item,\n                thumbnail: null,\n                fallbackImage: \"../data/black.jpg\"\n              };\n            } catch (err) {\n              console.error(`Failed to fetch poster for ${item.title}:`, err);\n              return {\n                ...item,\n                thumbnail: null,\n                fallbackImage: \"../data/black.jpg\"\n              };\n            }\n          }));\n          return {\n            ...row,\n            items: updatedItems\n          };\n        }));\n        setInitialRows([{\n          title: \"Trending Movies\",\n          items: trendingMovies\n        }, ...updatedRows]);\n        await fetchRecommendations(\"Baahubali: The Beginning\");\n      } catch (err) {\n        console.error('Error in fetchInitialData:', err.message);\n        setError('Failed to load trending movies, using fallback data');\n        setInitialRows([{\n          title: \"Trending Movies\",\n          items: fallbackTrendingMovies\n        }, ...initialRowsData]);\n        await fetchRecommendations(\"Baahubali: The Beginning\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n  const fetchRecommendations = async movieTitle => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5-second timeout\n\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        }),\n        signal: controller.signal\n      }).catch(err => {\n        console.error(`Fetch error for \"${movieTitle}\":`, err.message);\n        throw new Error('Failed to fetch recommendations');\n      });\n      clearTimeout(timeoutId);\n      const data = await response.json();\n      console.log(`Response for /recommend: status ${response.status}, data:`, data);\n      if (response.ok && Array.isArray(data) && data.length > 0) {\n        const numRecommendations = Math.floor(Math.random() * (8 - 3 + 1)) + 3;\n        const shuffledData = data.sort(() => Math.random() - 0.5);\n        const selectedRecommendations = shuffledData.slice(0, numRecommendations);\n        const mappedRecommendations = selectedRecommendations.map((rec, i) => {\n          if (!rec.title) {\n            console.warn('Invalid recommendation item:', rec);\n            return null;\n          }\n          return {\n            id: i + 100,\n            title: rec.title,\n            thumbnail: rec.poster || null,\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n            fallbackImage: \"../data/black.jpg\"\n          };\n        }).filter(item => item !== null);\n        if (mappedRecommendations.length === 0) {\n          console.warn('No valid recommendations after mapping');\n          throw new Error('No valid recommendations');\n        }\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: mappedRecommendations\n        }));\n      } else {\n        console.log(`No valid data from /recommend for \"${movieTitle}\", falling back to /random-telugu...`);\n        await fetchRandomTeluguRecommendations(movieTitle);\n      }\n    } catch (err) {\n      console.error(`Error fetching recommendations for \"${movieTitle}\":`, err.message);\n      setError(`Failed to load recommendations for \"${movieTitle}\"`);\n      await fetchRandomTeluguRecommendations(movieTitle);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchRandomTeluguRecommendations = async movieTitle => {\n    try {\n      console.log(`Attempting fetch from /random-telugu for \"${movieTitle}\" with GET...`);\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5-second timeout\n\n      const response = await fetch('http://localhost:5000/random-telugu', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: controller.signal\n      }).catch(err => {\n        console.error(`Fetch error for /random-telugu \"${movieTitle}\":`, err.message);\n        throw new Error('Failed to fetch random Telugu recommendations');\n      });\n      clearTimeout(timeoutId);\n      const data = await response.json();\n      console.log(`/random-telugu response: status ${response.status}, data:`, data);\n      if (response.ok && Array.isArray(data) && data.length > 0) {\n        const numRecommendations = Math.floor(Math.random() * (8 - 3 + 1)) + 3;\n        const shuffledData = data.sort(() => Math.random() - 0.5);\n        const selectedRecommendations = shuffledData.slice(0, numRecommendations);\n        const randomRecommendations = selectedRecommendations.map((rec, i) => {\n          if (!rec.title) {\n            console.warn('Invalid random recommendation item:', rec);\n            return null;\n          }\n          return {\n            id: i + 200,\n            title: rec.title,\n            thumbnail: rec.poster || null,\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n            fallbackImage: \"../data/black.jpg\"\n          };\n        }).filter(item => item !== null);\n        if (randomRecommendations.length === 0) {\n          console.warn('No valid random recommendations after mapping');\n          throw new Error('No valid random recommendations');\n        }\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: randomRecommendations\n        }));\n      } else {\n        throw new Error('Invalid data format from /random-telugu endpoint');\n      }\n    } catch (err) {\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err.message);\n      setError(`Network error fetching random recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    }\n  };\n  const handleMoreInfo = item => {\n    setSelectedItem(item);\n    fetchRecommendations(item.title);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"S2Hei3njckYK+XvAmANMcJbb7vc=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Header","Hero","Row","Modal","Footer","baahubaliPoster","jsxDEV","_jsxDEV","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","JSON","parse","localStorage","getItem","notification","setNotification","featuredItem","id","title","description","thumbnail","video","initialRowsData","items","fallbackImage","fallbackTrendingMovies","window","scrollTo","setItem","stringify","console","log","toggleFavorite","item","prevFavorites","isFavorited","some","fav","updatedFavorites","filter","setTimeout","fetchInitialData","controller","AbortController","timeoutId","abort","trendingMoviesResponse","fetch","method","headers","body","movie_title","signal","catch","err","message","Error","clearTimeout","trendingMoviesData","json","Array","isArray","trendingMovies","map","rec","i","warn","poster","original_language","genres","length","updatedRows","Promise","all","row","updatedItems","response","data","ok","fetchRecommendations","movieTitle","status","numRecommendations","Math","floor","random","shuffledData","sort","selectedRecommendations","slice","mappedRecommendations","prev","fetchRandomTeluguRecommendations","randomRecommendations","handleMoreInfo","className","children","onMoreInfo","fileName","_jsxFileName","lineNumber","columnNumber","index","Object","entries","recs","keys","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Only import the poster for Baahubali (used in the Hero section)\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState({});\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\r\n  const [notification, setNotification] = useState('');\r\n\r\n  const featuredItem = {\r\n    id: 271726,\r\n    title: \"Baahubali: The Beginning\",\r\n    description: \"A Telugu epic about valor and sacrifice.\",\r\n    thumbnail: baahubaliPoster,\r\n    video: \"/videos/bb2.mp4\"\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: \"Watch It Again\",\r\n      items: [\r\n        { id: 5, title: \"Inception\", thumbnail: null, description: \"A mind-bending heist movie.\", fallbackImage: \"../data/black.jpg\" },\r\n        { id: 6, title: \"Titanic\", thumbnail: null, description: \"A romantic disaster film.\", fallbackImage: \"../data/black.jpg\" },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // Fallback static list for \"Trending Movies\" if fetch fails\r\n  const fallbackTrendingMovies = [\r\n    { id: 900352, title: \"Kalki 2898 AD\", thumbnail: null, description: \"A sci-fi epic set in a dystopian future.\", fallbackImage: \"../data/black.jpg\" },\r\n    { id: 934632, title: \"Salaar\", thumbnail: null, description: \"An action-packed saga of power and betrayal.\", fallbackImage: \"../data/black.jpg\" },\r\n    { id: 614933, title: \"RRR\", thumbnail: null, description: \"A revolutionary tale of friendship and rebellion.\", fallbackImage: \"../data/black.jpg\" },\r\n    { id: 614934, title: \"Pushpa 2: The Rule\", thumbnail: null, description: \"A gripping sequel to the smuggling saga.\", fallbackImage: \"../data/black.jpg\" },\r\n    { id: 1121402, title: \"Hi Nanna\", thumbnail: null, description: \"A heartwarming family drama.\", fallbackImage: \"../data/black.jpg\" },\r\n    { id: 614932, title: \"Saaho\", thumbnail: null, description: \"A high-octane action thriller.\", fallbackImage: \"../data/black.jpg\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n    console.log('Favorites saved to localStorage:', favorites);\r\n  }, [favorites]);\r\n\r\n  const toggleFavorite = (item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        console.log('Removing from favorites:', item.title);\r\n        const updatedFavorites = prevFavorites.filter((fav) => fav.id !== item.id);\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return updatedFavorites;\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        console.log('Adding to favorites:', item.title);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Fetch \"Trending Movies\" dynamically using /recommend with a timeout\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), 5000); // 5-second timeout\r\n\r\n        const trendingMoviesResponse = await fetch('http://localhost:5000/recommend', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ movie_title: \"Kalki 2898 AD\" }),\r\n          signal: controller.signal,\r\n        }).catch((err) => {\r\n          console.error('Fetch error for Trending Movies:', err.message);\r\n          throw new Error('Failed to fetch trending movies');\r\n        });\r\n\r\n        clearTimeout(timeoutId);\r\n\r\n        const trendingMoviesData = await trendingMoviesResponse.json();\r\n        console.log('Trending Movies response:', trendingMoviesData);\r\n\r\n        // Validate response format\r\n        if (!Array.isArray(trendingMoviesData)) {\r\n          console.error('Trending Movies response is not an array:', trendingMoviesData);\r\n          throw new Error('Invalid response format for trending movies');\r\n        }\r\n\r\n        const trendingMovies = trendingMoviesData.map((rec, i) => {\r\n          if (!rec.title) {\r\n            console.warn('Invalid recommendation item:', rec);\r\n            return null;\r\n          }\r\n          return {\r\n            id: i + 300,\r\n            title: rec.title,\r\n            thumbnail: rec.poster || null,\r\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n            fallbackImage: \"../data/black.jpg\"\r\n          };\r\n        }).filter(item => item !== null);\r\n\r\n        if (trendingMovies.length === 0) {\r\n          console.warn('No valid trending movies after mapping, using fallback');\r\n          throw new Error('No valid trending movies');\r\n        }\r\n\r\n        const updatedRows = await Promise.all(\r\n          initialRowsData.map(async (row) => {\r\n            const updatedItems = await Promise.all(\r\n              row.items.map(async (item) => {\r\n                if (item.thumbnail) return item;\r\n                try {\r\n                  const response = await fetch('http://localhost:5000/recommend', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ movie_title: item.title }),\r\n                    signal: controller.signal,\r\n                  });\r\n                  const data = await response.json();\r\n                  if (response.ok && Array.isArray(data) && data.length > 0 && data[0].poster) {\r\n                    return { ...item, thumbnail: data[0].poster };\r\n                  }\r\n                  return { ...item, thumbnail: null, fallbackImage: \"../data/black.jpg\" };\r\n                } catch (err) {\r\n                  console.error(`Failed to fetch poster for ${item.title}:`, err);\r\n                  return { ...item, thumbnail: null, fallbackImage: \"../data/black.jpg\" };\r\n                }\r\n              })\r\n            );\r\n            return { ...row, items: updatedItems };\r\n          })\r\n        );\r\n\r\n        setInitialRows([{ title: \"Trending Movies\", items: trendingMovies }, ...updatedRows]);\r\n        await fetchRecommendations(\"Baahubali: The Beginning\");\r\n      } catch (err) {\r\n        console.error('Error in fetchInitialData:', err.message);\r\n        setError('Failed to load trending movies, using fallback data');\r\n        setInitialRows([{ title: \"Trending Movies\", items: fallbackTrendingMovies }, ...initialRowsData]);\r\n        await fetchRecommendations(\"Baahubali: The Beginning\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, []);\r\n\r\n  const fetchRecommendations = async (movieTitle) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5-second timeout\r\n\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n        signal: controller.signal,\r\n      }).catch((err) => {\r\n        console.error(`Fetch error for \"${movieTitle}\":`, err.message);\r\n        throw new Error('Failed to fetch recommendations');\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      const data = await response.json();\r\n      console.log(`Response for /recommend: status ${response.status}, data:`, data);\r\n\r\n      if (response.ok && Array.isArray(data) && data.length > 0) {\r\n        const numRecommendations = Math.floor(Math.random() * (8 - 3 + 1)) + 3;\r\n        const shuffledData = data.sort(() => Math.random() - 0.5);\r\n        const selectedRecommendations = shuffledData.slice(0, numRecommendations);\r\n\r\n        const mappedRecommendations = selectedRecommendations.map((rec, i) => {\r\n          if (!rec.title) {\r\n            console.warn('Invalid recommendation item:', rec);\r\n            return null;\r\n          }\r\n          return {\r\n            id: i + 100,\r\n            title: rec.title,\r\n            thumbnail: rec.poster || null,\r\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n            fallbackImage: \"../data/black.jpg\"\r\n          };\r\n        }).filter(item => item !== null);\r\n\r\n        if (mappedRecommendations.length === 0) {\r\n          console.warn('No valid recommendations after mapping');\r\n          throw new Error('No valid recommendations');\r\n        }\r\n\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: mappedRecommendations }));\r\n      } else {\r\n        console.log(`No valid data from /recommend for \"${movieTitle}\", falling back to /random-telugu...`);\r\n        await fetchRandomTeluguRecommendations(movieTitle);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching recommendations for \"${movieTitle}\":`, err.message);\r\n      setError(`Failed to load recommendations for \"${movieTitle}\"`);\r\n      await fetchRandomTeluguRecommendations(movieTitle);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRandomTeluguRecommendations = async (movieTitle) => {\r\n    try {\r\n      console.log(`Attempting fetch from /random-telugu for \"${movieTitle}\" with GET...`);\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(() => controller.abort(), 5000); // 5-second timeout\r\n\r\n      const response = await fetch('http://localhost:5000/random-telugu', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        signal: controller.signal,\r\n      }).catch((err) => {\r\n        console.error(`Fetch error for /random-telugu \"${movieTitle}\":`, err.message);\r\n        throw new Error('Failed to fetch random Telugu recommendations');\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      const data = await response.json();\r\n      console.log(`/random-telugu response: status ${response.status}, data:`, data);\r\n\r\n      if (response.ok && Array.isArray(data) && data.length > 0) {\r\n        const numRecommendations = Math.floor(Math.random() * (8 - 3 + 1)) + 3;\r\n        const shuffledData = data.sort(() => Math.random() - 0.5);\r\n        const selectedRecommendations = shuffledData.slice(0, numRecommendations);\r\n\r\n        const randomRecommendations = selectedRecommendations.map((rec, i) => {\r\n          if (!rec.title) {\r\n            console.warn('Invalid random recommendation item:', rec);\r\n            return null;\r\n          }\r\n          return {\r\n            id: i + 200,\r\n            title: rec.title,\r\n            thumbnail: rec.poster || null,\r\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n            fallbackImage: \"../data/black.jpg\"\r\n          };\r\n        }).filter(item => item !== null);\r\n\r\n        if (randomRecommendations.length === 0) {\r\n          console.warn('No valid random recommendations after mapping');\r\n          throw new Error('No valid random recommendations');\r\n        }\r\n\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: randomRecommendations }));\r\n      } else {\r\n        throw new Error('Invalid data format from /random-telugu endpoint');\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err.message);\r\n      setError(`Network error fetching random recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    }\r\n  };\r\n\r\n  const handleMoreInfo = (item) => {\r\n    setSelectedItem(item);\r\n    fetchRecommendations(item.title);\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      {/* <Header /> */}\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites || []}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}