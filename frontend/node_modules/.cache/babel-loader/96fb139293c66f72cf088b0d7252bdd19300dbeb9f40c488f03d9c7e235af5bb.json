{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\SpeedTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport './SpeedTest.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SpeedTest() {\n  _s();\n  const [speed, setSpeed] = useState(null);\n  const [latency, setLatency] = useState(null);\n  const [testing, setTesting] = useState(false);\n  const [error, setError] = useState('');\n  const [history, setHistory] = useState(() => {\n    const saved = localStorage.getItem('speedTestHistory');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [chartData, setChartData] = useState([]);\n\n  // Update local storage when history changes\n  useEffect(() => {\n    localStorage.setItem('speedTestHistory', JSON.stringify(history));\n  }, [history]);\n\n  // Initialize chart\n  useEffect(() => {\n    var _document$getElementB;\n    const ctx = (_document$getElementB = document.getElementById('speedChart')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.getContext('2d');\n    if (ctx) {\n      const chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: chartData.map((_, i) => `Sample ${i + 1}`),\n          datasets: [{\n            label: 'Speed (Mbps)',\n            data: chartData,\n            borderColor: '#ff0000',\n            backgroundColor: 'rgba(255, 0, 0, 0.2)',\n            fill: true\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Speed (Mbps)'\n              }\n            },\n            x: {\n              title: {\n                display: true,\n                text: 'Sample'\n              }\n            }\n          }\n        }\n      });\n      return () => chart.destroy();\n    }\n  }, [chartData]);\n  const runSpeedTest = async () => {\n    setTesting(true);\n    setSpeed(null);\n    setLatency(null);\n    setError('');\n    setChartData([]);\n    try {\n      // Measure latency (ping)\n      const pingStart = performance.now();\n      await axios.get('/');\n      const pingEnd = performance.now();\n      const pingMs = (pingEnd - pingStart).toFixed(2);\n      setLatency(pingMs);\n\n      // Run multiple samples\n      const samples = 3;\n      const speeds = [];\n      for (let i = 0; i < samples; i++) {\n        const startTime = performance.now();\n        const response = await axios.get('/files/100MB.bin', {\n          responseType: 'blob'\n        });\n        const endTime = performance.now();\n        const duration = (endTime - startTime) / 1000; // seconds\n        const fileSize = response.data.size / 1024 / 1024; // MB\n        const speedMbps = (fileSize * 8 / duration).toFixed(2); // Mbps\n        speeds.push(parseFloat(speedMbps));\n        setChartData(prev => [...prev, parseFloat(speedMbps)]);\n      }\n\n      // Average speed\n      const avgSpeed = (speeds.reduce((a, b) => a + b, 0) / speeds.length).toFixed(2);\n      setSpeed(avgSpeed);\n\n      // Update history\n      const result = {\n        speed: avgSpeed,\n        latency: pingMs,\n        timestamp: new Date().toLocaleString()\n      };\n      setHistory(prev => [result, ...prev].slice(0, 5)); // Keep last 5 results\n    } catch (err) {\n      setError('Failed to run speed test.');\n    }\n    setTesting(false);\n  };\n\n  // Calculate needle rotation based on speed (0-100 Mbps maps to -90 to 90 deg)\n  const needleAngle = speed ? parseFloat(speed) / 100 * 180 - 90 : -90;\n  const gaugeOffset = speed ? (1 - parseFloat(speed) / 100) * 251.2 : 251.2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speed-test\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Speed Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Test your internet speed for optimal StreamFlix streaming.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speedometer\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 200 100\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M 20 80 A 60 60 0 0 1 180 80\",\n            fill: \"none\",\n            stroke: \"#1a1a1a\",\n            strokeWidth: \"20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            className: testing || speed ? 'gauge' : '',\n            d: \"M 20 80 A 60 60 0 0 1 180 80\",\n            fill: \"none\",\n            stroke: \"#ff0000\",\n            strokeWidth: \"20\",\n            strokeDasharray: \"251.2\",\n            strokeDashoffset: testing ? '0' : gaugeOffset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            className: testing || speed ? 'needle' : '',\n            x1: \"100\",\n            y1: \"80\",\n            x2: \"100\",\n            y2: \"20\",\n            stroke: \"#ffffff\",\n            strokeWidth: \"4\",\n            style: {\n              transform: `rotate(${needleAngle}deg)`,\n              transformOrigin: '100px 80px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"speed-display\",\n          children: testing ? 'Testing...' : speed ? `${speed} Mbps` : 'Click to test'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metrics\",\n        children: [latency && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Latency: \", latency, \" ms\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 23\n        }, this), speed && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Download Speed: \", speed, \" Mbps\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runSpeedTest,\n        disabled: testing,\n        children: testing ? 'Testing...' : 'Run Speed Test'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Speed Test Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"speedChart\",\n          width: \"400\",\n          height: \"200\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Test History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Speed (Mbps)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Latency (ms)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: history.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.speed\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.latency\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeedTest, \"wM0Kh9e/6YtJrHUTiyOtECP2g/Q=\");\n_c = SpeedTest;\nexport default SpeedTest;\nvar _c;\n$RefreshReg$(_c, \"SpeedTest\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","Header","Footer","jsxDEV","_jsxDEV","SpeedTest","_s","speed","setSpeed","latency","setLatency","testing","setTesting","error","setError","history","setHistory","saved","localStorage","getItem","JSON","parse","chartData","setChartData","setItem","stringify","_document$getElementB","ctx","document","getElementById","getContext","chart","type","data","labels","map","_","i","datasets","label","borderColor","backgroundColor","fill","options","scales","y","beginAtZero","title","display","text","x","destroy","runSpeedTest","pingStart","performance","now","get","pingEnd","pingMs","toFixed","samples","speeds","startTime","response","responseType","endTime","duration","fileSize","size","speedMbps","push","parseFloat","prev","avgSpeed","reduce","a","b","length","result","timestamp","Date","toLocaleString","slice","err","needleAngle","gaugeOffset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","d","stroke","strokeWidth","strokeDasharray","strokeDashoffset","x1","y1","x2","y2","style","transform","transformOrigin","onClick","disabled","id","width","height","entry","index","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/SpeedTest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport './SpeedTest.css';\r\n\r\nfunction SpeedTest() {\r\n  const [speed, setSpeed] = useState(null);\r\n  const [latency, setLatency] = useState(null);\r\n  const [testing, setTesting] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [history, setHistory] = useState(() => {\r\n    const saved = localStorage.getItem('speedTestHistory');\r\n    return saved ? JSON.parse(saved) : [];\r\n  });\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  // Update local storage when history changes\r\n  useEffect(() => {\r\n    localStorage.setItem('speedTestHistory', JSON.stringify(history));\r\n  }, [history]);\r\n\r\n  // Initialize chart\r\n  useEffect(() => {\r\n    const ctx = document.getElementById('speedChart')?.getContext('2d');\r\n    if (ctx) {\r\n      const chart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: chartData.map((_, i) => `Sample ${i + 1}`),\r\n          datasets: [{\r\n            label: 'Speed (Mbps)',\r\n            data: chartData,\r\n            borderColor: '#ff0000',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.2)',\r\n            fill: true,\r\n          }],\r\n        },\r\n        options: {\r\n          scales: {\r\n            y: { beginAtZero: true, title: { display: true, text: 'Speed (Mbps)' } },\r\n            x: { title: { display: true, text: 'Sample' } },\r\n          },\r\n        },\r\n      });\r\n      return () => chart.destroy();\r\n    }\r\n  }, [chartData]);\r\n\r\n  const runSpeedTest = async () => {\r\n    setTesting(true);\r\n    setSpeed(null);\r\n    setLatency(null);\r\n    setError('');\r\n    setChartData([]);\r\n\r\n    try {\r\n      // Measure latency (ping)\r\n      const pingStart = performance.now();\r\n      await axios.get('/');\r\n      const pingEnd = performance.now();\r\n      const pingMs = (pingEnd - pingStart).toFixed(2);\r\n      setLatency(pingMs);\r\n\r\n      // Run multiple samples\r\n      const samples = 3;\r\n      const speeds = [];\r\n      for (let i = 0; i < samples; i++) {\r\n        const startTime = performance.now();\r\n        const response = await axios.get('/files/100MB.bin', {\r\n          responseType: 'blob',\r\n        });\r\n        const endTime = performance.now();\r\n        const duration = (endTime - startTime) / 1000; // seconds\r\n        const fileSize = response.data.size / 1024 / 1024; // MB\r\n        const speedMbps = (fileSize * 8 / duration).toFixed(2); // Mbps\r\n        speeds.push(parseFloat(speedMbps));\r\n        setChartData((prev) => [...prev, parseFloat(speedMbps)]);\r\n      }\r\n\r\n      // Average speed\r\n      const avgSpeed = (speeds.reduce((a, b) => a + b, 0) / speeds.length).toFixed(2);\r\n      setSpeed(avgSpeed);\r\n\r\n      // Update history\r\n      const result = {\r\n        speed: avgSpeed,\r\n        latency: pingMs,\r\n        timestamp: new Date().toLocaleString(),\r\n      };\r\n      setHistory((prev) => [result, ...prev].slice(0, 5)); // Keep last 5 results\r\n    } catch (err) {\r\n      setError('Failed to run speed test.');\r\n    }\r\n    setTesting(false);\r\n  };\r\n\r\n  // Calculate needle rotation based on speed (0-100 Mbps maps to -90 to 90 deg)\r\n  const needleAngle = speed ? (parseFloat(speed) / 100) * 180 - 90 : -90;\r\n  const gaugeOffset = speed ? (1 - parseFloat(speed) / 100) * 251.2 : 251.2;\r\n\r\n  return (\r\n    <div className=\"speed-test\">\r\n      <Header />\r\n      <main>\r\n        <h1>Speed Test</h1>\r\n        <p>Test your internet speed for optimal StreamFlix streaming.</p>\r\n        <div className=\"speedometer\">\r\n          <svg viewBox=\"0 0 200 100\">\r\n            <path\r\n              d=\"M 20 80 A 60 60 0 0 1 180 80\"\r\n              fill=\"none\"\r\n              stroke=\"#1a1a1a\"\r\n              strokeWidth=\"20\"\r\n            />\r\n            <path\r\n              className={testing || speed ? 'gauge' : ''}\r\n              d=\"M 20 80 A 60 60 0 0 1 180 80\"\r\n              fill=\"none\"\r\n              stroke=\"#ff0000\"\r\n              strokeWidth=\"20\"\r\n              strokeDasharray=\"251.2\"\r\n              strokeDashoffset={testing ? '0' : gaugeOffset}\r\n            />\r\n            <line\r\n              className={testing || speed ? 'needle' : ''}\r\n              x1=\"100\"\r\n              y1=\"80\"\r\n              x2=\"100\"\r\n              y2=\"20\"\r\n              stroke=\"#ffffff\"\r\n              strokeWidth=\"4\"\r\n              style={{ transform: `rotate(${needleAngle}deg)`, transformOrigin: '100px 80px' }}\r\n            />\r\n          </svg>\r\n          <div className=\"speed-display\">\r\n            {testing ? 'Testing...' : speed ? `${speed} Mbps` : 'Click to test'}\r\n          </div>\r\n        </div>\r\n        <div className=\"metrics\">\r\n          {latency && <p>Latency: {latency} ms</p>}\r\n          {speed && <p>Download Speed: {speed} Mbps</p>}\r\n        </div>\r\n        <button onClick={runSpeedTest} disabled={testing}>\r\n          {testing ? 'Testing...' : 'Run Speed Test'}\r\n        </button>\r\n        {error && <p className=\"error\">{error}</p>}\r\n        <div className=\"chart-container\">\r\n          <h3>Speed Test Results</h3>\r\n          <canvas id=\"speedChart\" width=\"400\" height=\"200\"></canvas>\r\n        </div>\r\n        {history.length > 0 && (\r\n          <div className=\"history\">\r\n            <h3>Test History</h3>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Date</th>\r\n                  <th>Speed (Mbps)</th>\r\n                  <th>Latency (ms)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {history.map((entry, index) => (\r\n                  <tr key={index}>\r\n                    <td>{entry.timestamp}</td>\r\n                    <td>{entry.speed}</td>\r\n                    <td>{entry.latency}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpeedTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}