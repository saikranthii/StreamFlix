{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Import posters\nimport kalkiPoster from '../data/Kalki.jpg';\nimport salaarPoster from '../data/salaar.jpg';\nimport chaavaPoster from '../data/chaava.jpg';\nimport rrrPoster from '../data/rrr.jpg';\nimport pushpa2Poster from '../data/pushpa2.jpg';\nimport hiNannaPoster from '../data/hinanna.jpg';\nimport mad2Poster from '../data/mad2.jpg';\nimport courtPoster from '../data/court.jpg';\nimport dragonPoster from '../data/rod.jpg';\nimport saripodaPoster from '../data/ss.jpg';\nimport saahoPoster from '../data/saaho.jpg';\nimport baahubaliPoster from '../data/bb2.jpg';\nimport blackPoster from '../data/black.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState({});\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n  const staticMoviesWithLocalPosters = {\n    \"Chaava\": chaavaPoster,\n    \"Mad2\": mad2Poster,\n    \"Saripoda Sanivaaram\": saripodaPoster\n  };\n  const featuredItem = {\n    id: 271726,\n    title: \"Baahubali: The Beginning\",\n    description: \"A Telugu epic about valor and sacrifice.\",\n    thumbnail: baahubaliPoster,\n    video: \"/videos/bb2.mp4\",\n    language: \"te\"\n  };\n  const initialRowsData = [{\n    title: \"Trending Movies\",\n    items: [{\n      id: 900352,\n      title: \"Kalki 2898 AD\",\n      thumbnail: kalkiPoster,\n      description: \"A sci-fi epic set in a dystopian future.\",\n      language: \"te\"\n    }, {\n      id: 934632,\n      title: \"Salaar\",\n      thumbnail: salaarPoster,\n      description: \"An action-packed saga of power and betrayal.\",\n      language: \"te\"\n    }, {\n      id: 0,\n      title: \"Chaava\",\n      thumbnail: chaavaPoster,\n      description: \"A historical drama about bravery.\",\n      isStatic: true,\n      language: \"te\"\n    }, {\n      id: 614933,\n      title: \"RRR\",\n      thumbnail: rrrPoster,\n      description: \"A revolutionary tale of friendship and rebellion.\",\n      language: \"te\"\n    }, {\n      id: 614934,\n      title: \"Pushpa 2: The Rule\",\n      thumbnail: pushpa2Poster,\n      description: \"A gripping sequel to the smuggling saga.\",\n      language: \"te\"\n    }, {\n      id: 1121402,\n      title: \"Hi Nanna\",\n      thumbnail: hiNannaPoster,\n      description: \"A heartwarming family drama.\",\n      language: \"te\"\n    }, {\n      id: 1,\n      title: \"Mad2\",\n      thumbnail: mad2Poster,\n      description: \"A thrilling continuation of mystery.\",\n      isStatic: true,\n      language: \"te\"\n    }, {\n      id: 297282,\n      title: \"Court\",\n      thumbnail: courtPoster,\n      description: \"A thought-provoking legal drama.\",\n      language: \"te\"\n    }, {\n      id: 1560,\n      title: \"Return of the Dragon\",\n      thumbnail: dragonPoster,\n      description: \"A classic martial arts adventure.\",\n      language: \"te\"\n    }, {\n      id: 614932,\n      title: \"Saaho\",\n      thumbnail: saahoPoster,\n      description: \"A high-octane action thriller.\",\n      language: \"te\"\n    }, {\n      id: 2,\n      title: \"Saripoda Sanivaaram\",\n      thumbnail: saripodaPoster,\n      description: \"An intense vigilante story.\",\n      isStatic: true,\n      language: \"te\"\n    }]\n  }, {\n    title: \"Watch It Again\",\n    items: [{\n      id: 5,\n      title: \"Inception\",\n      thumbnail: blackPoster,\n      description: \"A mind-bending heist movie.\",\n      language: \"en\"\n    }, {\n      id: 6,\n      title: \"Titanic\",\n      thumbnail: blackPoster,\n      description: \"A romantic disaster film.\",\n      language: \"en\"\n    }]\n  }];\n\n  // Clear sessionStorage on page load to handle refresh\n  useEffect(() => {\n    console.log('Clearing sessionStorage on page load (refresh)');\n    sessionStorage.removeItem('recommendations');\n    setRecommendations({});\n  }, []);\n\n  // Clear sessionStorage on tab close\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      console.log('Clearing sessionStorage on tab close');\n      sessionStorage.removeItem('recommendations');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  // Save recommendations to sessionStorage when they change\n  useEffect(() => {\n    if (Object.keys(recommendations).length > 0) {\n      console.log('Saving recommendations to sessionStorage:', recommendations);\n      sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\n    }\n  }, [recommendations]);\n\n  // Load recommendations from sessionStorage on page switch\n  useEffect(() => {\n    const savedRecommendations = sessionStorage.getItem('recommendations');\n    if (savedRecommendations) {\n      console.log('Loading recommendations from sessionStorage:', JSON.parse(savedRecommendations));\n      setRecommendations(JSON.parse(savedRecommendations));\n    }\n  }, []);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n    console.log('Favorites saved to localStorage:', favorites);\n  }, [favorites]);\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        console.log('Removing from favorites:', item.title);\n        const updatedFavorites = prevFavorites.filter(fav => fav.id !== item.id);\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return updatedFavorites;\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        console.log('Adding to favorites:', item.title);\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\n    if (recommendations[movieTitle]) {\n      console.log(`Recommendations for \"${movieTitle}\" already exist, skipping fetch.`);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/random-telugu', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\n          id: i + 200,\n          title: rec.title,\n          thumbnail: rec.poster || blackPoster,\n          description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n          language: \"te\"\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        throw new Error('Invalid data format from /random-telugu endpoint');\n      }\n    } catch (err) {\n      console.error(`Error fetching Telugu recommendations for \"${movieTitle}\":`, err);\n      setError(`Failed to fetch Telugu recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPosterForMovie = async movieTitle => {\n    try {\n      var _data$0$poster;\n      console.log(`Fetching poster for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      if (!response.ok) {\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}`);\n        return blackPoster;\n      }\n      const data = await response.json();\n      if (Array.isArray(data) && data.length > 0 && (_data$0$poster = data[0].poster) !== null && _data$0$poster !== void 0 && _data$0$poster.trim()) {\n        return data[0].poster;\n      }\n      console.warn(`No valid poster for \"${movieTitle}\"`);\n      return blackPoster;\n    } catch (err) {\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err);\n      return blackPoster;\n    }\n  };\n  const fetchRecommendations = async movieTitle => {\n    if (recommendations[movieTitle]) {\n      console.log(`Recommendations for \"${movieTitle}\" already exist, skipping fetch.`);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      const data = await response.json();\n      if (response.ok && Array.isArray(data) && data.length > 0) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => ({\n          id: i + 100,\n          title: rec.title,\n          thumbnail: rec.poster || blackPoster,\n          description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\n          language: rec.original_language || 'en'\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: mappedRecommendations\n        }));\n      } else {\n        console.log(`No valid data for \"${movieTitle}\"`);\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: []\n        }));\n      }\n    } catch (err) {\n      console.error(`Error fetching recommendations for \"${movieTitle}\":`, err);\n      setError(`Failed to fetch recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\n        for (const row of updatedRows) {\n          if (row.title === \"Watch It Again\") {\n            for (const item of row.items) {\n              if (item.language === \"en\") {\n                item.thumbnail = await fetchPosterForMovie(item.title);\n              }\n            }\n          }\n        }\n        setInitialRows(updatedRows);\n        // Fetch Baahubali recommendations if not already present\n        if (featuredItem.language === \"te\" && !recommendations[featuredItem.title]) {\n          const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n          await fetchRandomTeluguRecommendations(featuredItem.title, numRecs);\n        }\n      } catch (err) {\n        setError('Failed to fetch initial data');\n        console.error('Initial fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n  const handleMoreInfo = item => {\n    const updatedItem = {\n      ...item,\n      thumbnail: item.isStatic && staticMoviesWithLocalPosters[item.title] ? staticMoviesWithLocalPosters[item.title] : item.thumbnail\n    };\n    setSelectedItem(updatedItem);\n    if (!recommendations[item.title]) {\n      const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n      if (item.language === \"te\") {\n        fetchRandomTeluguRecommendations(item.title, numRecs);\n      } else {\n        fetchRecommendations(item.title);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites,\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites,\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites,\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"CbY965Igk88MAD0GUM4QG7tn7JU=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Header","Hero","Row","Modal","Footer","kalkiPoster","salaarPoster","chaavaPoster","rrrPoster","pushpa2Poster","hiNannaPoster","mad2Poster","courtPoster","dragonPoster","saripodaPoster","saahoPoster","baahubaliPoster","blackPoster","jsxDEV","_jsxDEV","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","JSON","parse","localStorage","getItem","notification","setNotification","staticMoviesWithLocalPosters","featuredItem","id","title","description","thumbnail","video","language","initialRowsData","items","isStatic","console","log","sessionStorage","removeItem","handleBeforeUnload","window","addEventListener","removeEventListener","Object","keys","length","setItem","stringify","savedRecommendations","scrollTo","toggleFavorite","item","prevFavorites","isFavorited","some","fav","updatedFavorites","filter","setTimeout","fetchRandomTeluguRecommendations","movieTitle","numMovies","response","fetch","method","headers","ok","Error","status","data","json","Array","isArray","uniqueData","from","Map","map","toLowerCase","values","shuffled","sort","Math","random","selectedRecommendations","slice","min","rec","i","poster","original_language","genres","prev","err","message","fetchPosterForMovie","_data$0$poster","body","movie_title","warn","trim","fetchRecommendations","numRecs","floor","mappedRecommendations","fetchInitialData","updatedRows","row","handleMoreInfo","updatedItem","className","children","onMoreInfo","fileName","_jsxFileName","lineNumber","columnNumber","index","entries","recs","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Import posters\r\nimport kalkiPoster from '../data/Kalki.jpg';\r\nimport salaarPoster from '../data/salaar.jpg';\r\nimport chaavaPoster from '../data/chaava.jpg';\r\nimport rrrPoster from '../data/rrr.jpg';\r\nimport pushpa2Poster from '../data/pushpa2.jpg';\r\nimport hiNannaPoster from '../data/hinanna.jpg';\r\nimport mad2Poster from '../data/mad2.jpg';\r\nimport courtPoster from '../data/court.jpg';\r\nimport dragonPoster from '../data/rod.jpg';\r\nimport saripodaPoster from '../data/ss.jpg';\r\nimport saahoPoster from '../data/saaho.jpg';\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\nimport blackPoster from '../data/black.jpg';\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState({});\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\r\n  const [notification, setNotification] = useState('');\r\n\r\n  const staticMoviesWithLocalPosters = {\r\n    \"Chaava\": chaavaPoster,\r\n    \"Mad2\": mad2Poster,\r\n    \"Saripoda Sanivaaram\": saripodaPoster,\r\n  };\r\n\r\n  const featuredItem = {\r\n    id: 271726,\r\n    title: \"Baahubali: The Beginning\",\r\n    description: \"A Telugu epic about valor and sacrifice.\",\r\n    thumbnail: baahubaliPoster,\r\n    video: \"/videos/bb2.mp4\",\r\n    language: \"te\"\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: \"Trending Movies\",\r\n      items: [\r\n        { id: 900352, title: \"Kalki 2898 AD\", thumbnail: kalkiPoster, description: \"A sci-fi epic set in a dystopian future.\", language: \"te\" },\r\n        { id: 934632, title: \"Salaar\", thumbnail: salaarPoster, description: \"An action-packed saga of power and betrayal.\", language: \"te\" },\r\n        { id: 0, title: \"Chaava\", thumbnail: chaavaPoster, description: \"A historical drama about bravery.\", isStatic: true, language: \"te\" },\r\n        { id: 614933, title: \"RRR\", thumbnail: rrrPoster, description: \"A revolutionary tale of friendship and rebellion.\", language: \"te\" },\r\n        { id: 614934, title: \"Pushpa 2: The Rule\", thumbnail: pushpa2Poster, description: \"A gripping sequel to the smuggling saga.\", language: \"te\" },\r\n        { id: 1121402, title: \"Hi Nanna\", thumbnail: hiNannaPoster, description: \"A heartwarming family drama.\", language: \"te\" },\r\n        { id: 1, title: \"Mad2\", thumbnail: mad2Poster, description: \"A thrilling continuation of mystery.\", isStatic: true, language: \"te\" },\r\n        { id: 297282, title: \"Court\", thumbnail: courtPoster, description: \"A thought-provoking legal drama.\", language: \"te\" },\r\n        { id: 1560, title: \"Return of the Dragon\", thumbnail: dragonPoster, description: \"A classic martial arts adventure.\", language: \"te\" },\r\n        { id: 614932, title: \"Saaho\", thumbnail: saahoPoster, description: \"A high-octane action thriller.\", language: \"te\" },\r\n        { id: 2, title: \"Saripoda Sanivaaram\", thumbnail: saripodaPoster, description: \"An intense vigilante story.\", isStatic: true, language: \"te\" },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Watch It Again\",\r\n      items: [\r\n        { id: 5, title: \"Inception\", thumbnail: blackPoster, description: \"A mind-bending heist movie.\", language: \"en\" },\r\n        { id: 6, title: \"Titanic\", thumbnail: blackPoster, description: \"A romantic disaster film.\", language: \"en\" },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // Clear sessionStorage on page load to handle refresh\r\n  useEffect(() => {\r\n    console.log('Clearing sessionStorage on page load (refresh)');\r\n    sessionStorage.removeItem('recommendations');\r\n    setRecommendations({});\r\n  }, []);\r\n\r\n  // Clear sessionStorage on tab close\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      console.log('Clearing sessionStorage on tab close');\r\n      sessionStorage.removeItem('recommendations');\r\n    };\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  // Save recommendations to sessionStorage when they change\r\n  useEffect(() => {\r\n    if (Object.keys(recommendations).length > 0) {\r\n      console.log('Saving recommendations to sessionStorage:', recommendations);\r\n      sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\r\n    }\r\n  }, [recommendations]);\r\n\r\n  // Load recommendations from sessionStorage on page switch\r\n  useEffect(() => {\r\n    const savedRecommendations = sessionStorage.getItem('recommendations');\r\n    if (savedRecommendations) {\r\n      console.log('Loading recommendations from sessionStorage:', JSON.parse(savedRecommendations));\r\n      setRecommendations(JSON.parse(savedRecommendations));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n    console.log('Favorites saved to localStorage:', favorites);\r\n  }, [favorites]);\r\n\r\n  const toggleFavorite = (item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        console.log('Removing from favorites:', item.title);\r\n        const updatedFavorites = prevFavorites.filter((fav) => fav.id !== item.id);\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return updatedFavorites;\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        console.log('Adding to favorites:', item.title);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\r\n    if (recommendations[movieTitle]) {\r\n      console.log(`Recommendations for \"${movieTitle}\" already exist, skipping fetch.`);\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/random-telugu', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\r\n          id: i + 200,\r\n          title: rec.title,\r\n          thumbnail: rec.poster || blackPoster,\r\n          description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n          language: \"te\"\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        throw new Error('Invalid data format from /random-telugu endpoint');\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching Telugu recommendations for \"${movieTitle}\":`, err);\r\n      setError(`Failed to fetch Telugu recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchPosterForMovie = async (movieTitle) => {\r\n    try {\r\n      console.log(`Fetching poster for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n      });\r\n      if (!response.ok) {\r\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}`);\r\n        return blackPoster;\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data) && data.length > 0 && data[0].poster?.trim()) {\r\n        return data[0].poster;\r\n      }\r\n      console.warn(`No valid poster for \"${movieTitle}\"`);\r\n      return blackPoster;\r\n    } catch (err) {\r\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err);\r\n      return blackPoster;\r\n    }\r\n  };\r\n\r\n  const fetchRecommendations = async (movieTitle) => {\r\n    if (recommendations[movieTitle]) {\r\n      console.log(`Recommendations for \"${movieTitle}\" already exist, skipping fetch.`);\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok && Array.isArray(data) && data.length > 0) {\r\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\r\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => ({\r\n          id: i + 100,\r\n          title: rec.title,\r\n          thumbnail: rec.poster || blackPoster,\r\n          description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\r\n          language: rec.original_language || 'en'\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: mappedRecommendations }));\r\n      } else {\r\n        console.log(`No valid data for \"${movieTitle}\"`);\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching recommendations for \"${movieTitle}\":`, err);\r\n      setError(`Failed to fetch recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\r\n        for (const row of updatedRows) {\r\n          if (row.title === \"Watch It Again\") {\r\n            for (const item of row.items) {\r\n              if (item.language === \"en\") {\r\n                item.thumbnail = await fetchPosterForMovie(item.title);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setInitialRows(updatedRows);\r\n        // Fetch Baahubali recommendations if not already present\r\n        if (featuredItem.language === \"te\" && !recommendations[featuredItem.title]) {\r\n          const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n          await fetchRandomTeluguRecommendations(featuredItem.title, numRecs);\r\n        }\r\n      } catch (err) {\r\n        setError('Failed to fetch initial data');\r\n        console.error('Initial fetch error:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, []);\r\n\r\n  const handleMoreInfo = (item) => {\r\n    const updatedItem = {\r\n      ...item,\r\n      thumbnail: item.isStatic && staticMoviesWithLocalPosters[item.title] ? staticMoviesWithLocalPosters[item.title] : item.thumbnail\r\n    };\r\n    setSelectedItem(updatedItem);\r\n    if (!recommendations[item.title]) {\r\n      const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n      if (item.language === \"te\") {\r\n        fetchRandomTeluguRecommendations(item.title, numRecs);\r\n      } else {\r\n        fetchRecommendations(item.title);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAO,YAAY;;AAEnB;AACA,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,YAAY,MAAM,oBAAoB;AAC7C,OAAOC,YAAY,MAAM,oBAAoB;AAC7C,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,OAAOC,cAAc,MAAM,gBAAgB;AAC3C,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,eAAe,MAAM,iBAAiB;AAC7C,OAAOC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC0B,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAAC4B,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC8B,OAAO,EAAEC,UAAU,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACgC,KAAK,EAAEC,QAAQ,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkC,SAAS,EAAEC,YAAY,CAAC,GAAGnC,QAAQ,CAAC,MAAMoC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC;EACpG,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAM0C,4BAA4B,GAAG;IACnC,QAAQ,EAAEjC,YAAY;IACtB,MAAM,EAAEI,UAAU;IAClB,qBAAqB,EAAEG;EACzB,CAAC;EAED,MAAM2B,YAAY,GAAG;IACnBC,EAAE,EAAE,MAAM;IACVC,KAAK,EAAE,0BAA0B;IACjCC,WAAW,EAAE,0CAA0C;IACvDC,SAAS,EAAE7B,eAAe;IAC1B8B,KAAK,EAAE,iBAAiB;IACxBC,QAAQ,EAAE;EACZ,CAAC;EAED,MAAMC,eAAe,GAAG,CACtB;IACEL,KAAK,EAAE,iBAAiB;IACxBM,KAAK,EAAE,CACL;MAAEP,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,eAAe;MAAEE,SAAS,EAAExC,WAAW;MAAEuC,WAAW,EAAE,0CAA0C;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACvI;MAAEL,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,QAAQ;MAAEE,SAAS,EAAEvC,YAAY;MAAEsC,WAAW,EAAE,8CAA8C;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACrI;MAAEL,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,QAAQ;MAAEE,SAAS,EAAEtC,YAAY;MAAEqC,WAAW,EAAE,mCAAmC;MAAEM,QAAQ,EAAE,IAAI;MAAEH,QAAQ,EAAE;IAAK,CAAC,EACrI;MAAEL,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,KAAK;MAAEE,SAAS,EAAErC,SAAS;MAAEoC,WAAW,EAAE,mDAAmD;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACpI;MAAEL,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,oBAAoB;MAAEE,SAAS,EAAEpC,aAAa;MAAEmC,WAAW,EAAE,0CAA0C;MAAEG,QAAQ,EAAE;IAAK,CAAC,EAC9I;MAAEL,EAAE,EAAE,OAAO;MAAEC,KAAK,EAAE,UAAU;MAAEE,SAAS,EAAEnC,aAAa;MAAEkC,WAAW,EAAE,8BAA8B;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACzH;MAAEL,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,MAAM;MAAEE,SAAS,EAAElC,UAAU;MAAEiC,WAAW,EAAE,sCAAsC;MAAEM,QAAQ,EAAE,IAAI;MAAEH,QAAQ,EAAE;IAAK,CAAC,EACpI;MAAEL,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,OAAO;MAAEE,SAAS,EAAEjC,WAAW;MAAEgC,WAAW,EAAE,kCAAkC;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACvH;MAAEL,EAAE,EAAE,IAAI;MAAEC,KAAK,EAAE,sBAAsB;MAAEE,SAAS,EAAEhC,YAAY;MAAE+B,WAAW,EAAE,mCAAmC;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACtI;MAAEL,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,OAAO;MAAEE,SAAS,EAAE9B,WAAW;MAAE6B,WAAW,EAAE,gCAAgC;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACrH;MAAEL,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,qBAAqB;MAAEE,SAAS,EAAE/B,cAAc;MAAE8B,WAAW,EAAE,6BAA6B;MAAEM,QAAQ,EAAE,IAAI;MAAEH,QAAQ,EAAE;IAAK,CAAC;EAElJ,CAAC,EACD;IACEJ,KAAK,EAAE,gBAAgB;IACvBM,KAAK,EAAE,CACL;MAAEP,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,WAAW;MAAEE,SAAS,EAAE5B,WAAW;MAAE2B,WAAW,EAAE,6BAA6B;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACjH;MAAEL,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,SAAS;MAAEE,SAAS,EAAE5B,WAAW;MAAE2B,WAAW,EAAE,2BAA2B;MAAEG,QAAQ,EAAE;IAAK,CAAC;EAEjH,CAAC,CACF;;EAED;EACAhD,SAAS,CAAC,MAAM;IACdoD,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IAC7DC,cAAc,CAACC,UAAU,CAAC,iBAAiB,CAAC;IAC5C7B,kBAAkB,CAAC,CAAC,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA1B,SAAS,CAAC,MAAM;IACd,MAAMwD,kBAAkB,GAAGA,CAAA,KAAM;MAC/BJ,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDC,cAAc,CAACC,UAAU,CAAC,iBAAiB,CAAC;IAC9C,CAAC;IACDE,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAEF,kBAAkB,CAAC;IAC3D,OAAO,MAAM;MACXC,MAAM,CAACE,mBAAmB,CAAC,cAAc,EAAEH,kBAAkB,CAAC;IAChE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAxD,SAAS,CAAC,MAAM;IACd,IAAI4D,MAAM,CAACC,IAAI,CAACpC,eAAe,CAAC,CAACqC,MAAM,GAAG,CAAC,EAAE;MAC3CV,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAE5B,eAAe,CAAC;MACzE6B,cAAc,CAACS,OAAO,CAAC,iBAAiB,EAAE5B,IAAI,CAAC6B,SAAS,CAACvC,eAAe,CAAC,CAAC;IAC5E;EACF,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;;EAErB;EACAzB,SAAS,CAAC,MAAM;IACd,MAAMiE,oBAAoB,GAAGX,cAAc,CAAChB,OAAO,CAAC,iBAAiB,CAAC;IACtE,IAAI2B,oBAAoB,EAAE;MACxBb,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAElB,IAAI,CAACC,KAAK,CAAC6B,oBAAoB,CAAC,CAAC;MAC7FvC,kBAAkB,CAACS,IAAI,CAACC,KAAK,CAAC6B,oBAAoB,CAAC,CAAC;IACtD;EACF,CAAC,EAAE,EAAE,CAAC;EAENjE,SAAS,CAAC,MAAM;IACdyD,MAAM,CAACS,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACrB7B,YAAY,CAAC0B,OAAO,CAAC,QAAQ,EAAE5B,IAAI,CAAC6B,SAAS,CAAC/B,SAAS,CAAC,CAAC;IACzDmB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEpB,SAAS,CAAC;EAC5D,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMkC,cAAc,GAAIC,IAAI,IAAK;IAC/BlC,YAAY,CAAEmC,aAAa,IAAK;MAC9B,MAAMC,WAAW,GAAGD,aAAa,CAACE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAAC7B,EAAE,KAAKyB,IAAI,CAACzB,EAAE,CAAC;MACnE,IAAI2B,WAAW,EAAE;QACflB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEe,IAAI,CAACxB,KAAK,CAAC;QACnD,MAAM6B,gBAAgB,GAAGJ,aAAa,CAACK,MAAM,CAAEF,GAAG,IAAKA,GAAG,CAAC7B,EAAE,KAAKyB,IAAI,CAACzB,EAAE,CAAC;QAC1EH,eAAe,CAAC,IAAI4B,IAAI,CAACxB,KAAK,0BAA0B,CAAC;QACzD+B,UAAU,CAAC,MAAMnC,eAAe,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QAC3C,OAAOiC,gBAAgB;MACzB,CAAC,MAAM;QACLjC,eAAe,CAAC,IAAI4B,IAAI,CAACxB,KAAK,sBAAsB,CAAC;QACrD+B,UAAU,CAAC,MAAMnC,eAAe,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QAC3CY,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEe,IAAI,CAACxB,KAAK,CAAC;QAC/C,OAAO,CAAC,GAAGyB,aAAa,EAAED,IAAI,CAAC;MACjC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMQ,gCAAgC,GAAG,MAAAA,CAAOC,UAAU,EAAEC,SAAS,KAAK;IACxE,IAAIrD,eAAe,CAACoD,UAAU,CAAC,EAAE;MAC/BzB,OAAO,CAACC,GAAG,CAAC,wBAAwBwB,UAAU,kCAAkC,CAAC;MACjF;IACF;IACA/C,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACFoB,OAAO,CAACC,GAAG,CAAC,YAAYyB,SAAS,uCAAuCD,UAAU,MAAM,CAAC;MACzF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CAAC,CAAC;MACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC;MAC3D;MACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;QACvB,MAAMI,UAAU,GAAGF,KAAK,CAACG,IAAI,CAAC,IAAIC,GAAG,CAACN,IAAI,CAACO,GAAG,CAACzB,IAAI,IAAI,CAACA,IAAI,CAACxB,KAAK,CAACkD,WAAW,CAAC,CAAC,EAAE1B,IAAI,CAAC,CAAC,CAAC,CAAC2B,MAAM,CAAC,CAAC,CAAC;QACnG,MAAMC,QAAQ,GAAGN,UAAU,CAACO,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;QAC3D,MAAMC,uBAAuB,GAAGJ,QAAQ,CAACK,KAAK,CAAC,CAAC,EAAEH,IAAI,CAACI,GAAG,CAACxB,SAAS,EAAEY,UAAU,CAAC5B,MAAM,CAAC,CAAC,CAAC+B,GAAG,CAAC,CAACU,GAAG,EAAEC,CAAC,MAAM;UACzG7D,EAAE,EAAE6D,CAAC,GAAG,GAAG;UACX5D,KAAK,EAAE2D,GAAG,CAAC3D,KAAK;UAChBE,SAAS,EAAEyD,GAAG,CAACE,MAAM,IAAIvF,WAAW;UACpC2B,WAAW,EAAE,aAAa0D,GAAG,CAACG,iBAAiB,IAAI,IAAI,aAAaH,GAAG,CAACI,MAAM,IAAI,KAAK,EAAE;UACzF3D,QAAQ,EAAE;QACZ,CAAC,CAAC,CAAC;QACHtB,kBAAkB,CAAEkF,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAE,CAAC/B,UAAU,GAAGuB;QAAwB,CAAC,CAAC,CAAC;MACpF,CAAC,MAAM;QACL,MAAM,IAAIhB,KAAK,CAAC,kDAAkD,CAAC;MACrE;IACF,CAAC,CAAC,OAAOyB,GAAG,EAAE;MACZzD,OAAO,CAACrB,KAAK,CAAC,8CAA8C8C,UAAU,IAAI,EAAEgC,GAAG,CAAC;MAChF7E,QAAQ,CAAC,2CAA2C6E,GAAG,CAACC,OAAO,EAAE,CAAC;MAClEpF,kBAAkB,CAAEkF,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAE,CAAC/B,UAAU,GAAG;MAAG,CAAC,CAAC,CAAC;IAC/D,CAAC,SAAS;MACR/C,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMiF,mBAAmB,GAAG,MAAOlC,UAAU,IAAK;IAChD,IAAI;MAAA,IAAAmC,cAAA;MACF5D,OAAO,CAACC,GAAG,CAAC,wBAAwBwB,UAAU,MAAM,CAAC;MACrD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/C+B,IAAI,EAAE9E,IAAI,CAAC6B,SAAS,CAAC;UAAEkD,WAAW,EAAErC;QAAW,CAAC;MAClD,CAAC,CAAC;MACF,IAAI,CAACE,QAAQ,CAACI,EAAE,EAAE;QAChB/B,OAAO,CAAC+D,IAAI,CAAC,+BAA+BtC,UAAU,kBAAkBE,QAAQ,CAACM,MAAM,EAAE,CAAC;QAC1F,OAAOnE,WAAW;MACpB;MACA,MAAMoE,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IAAIA,IAAI,CAACxB,MAAM,GAAG,CAAC,KAAAkD,cAAA,GAAI1B,IAAI,CAAC,CAAC,CAAC,CAACmB,MAAM,cAAAO,cAAA,eAAdA,cAAA,CAAgBI,IAAI,CAAC,CAAC,EAAE;QACpE,OAAO9B,IAAI,CAAC,CAAC,CAAC,CAACmB,MAAM;MACvB;MACArD,OAAO,CAAC+D,IAAI,CAAC,wBAAwBtC,UAAU,GAAG,CAAC;MACnD,OAAO3D,WAAW;IACpB,CAAC,CAAC,OAAO2F,GAAG,EAAE;MACZzD,OAAO,CAACrB,KAAK,CAAC,8BAA8B8C,UAAU,IAAI,EAAEgC,GAAG,CAAC;MAChE,OAAO3F,WAAW;IACpB;EACF,CAAC;EAED,MAAMmG,oBAAoB,GAAG,MAAOxC,UAAU,IAAK;IACjD,IAAIpD,eAAe,CAACoD,UAAU,CAAC,EAAE;MAC/BzB,OAAO,CAACC,GAAG,CAAC,wBAAwBwB,UAAU,kCAAkC,CAAC;MACjF;IACF;IACA/C,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACFoB,OAAO,CAACC,GAAG,CAAC,iCAAiCwB,UAAU,MAAM,CAAC;MAC9D,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/C+B,IAAI,EAAE9E,IAAI,CAAC6B,SAAS,CAAC;UAAEkD,WAAW,EAAErC;QAAW,CAAC;MAClD,CAAC,CAAC;MACF,MAAMS,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAIR,QAAQ,CAACI,EAAE,IAAIK,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IAAIA,IAAI,CAACxB,MAAM,GAAG,CAAC,EAAE;QACzD,MAAM4B,UAAU,GAAGF,KAAK,CAACG,IAAI,CAAC,IAAIC,GAAG,CAACN,IAAI,CAACO,GAAG,CAACzB,IAAI,IAAI,CAACA,IAAI,CAACxB,KAAK,CAACkD,WAAW,CAAC,CAAC,EAAE1B,IAAI,CAAC,CAAC,CAAC,CAAC2B,MAAM,CAAC,CAAC,CAAC;QACnG,MAAMuB,OAAO,GAAGpB,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAC5D,MAAMH,QAAQ,GAAGN,UAAU,CAACO,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;QAC3D,MAAMqB,qBAAqB,GAAGxB,QAAQ,CAACK,KAAK,CAAC,CAAC,EAAEH,IAAI,CAACI,GAAG,CAACgB,OAAO,EAAE5B,UAAU,CAAC5B,MAAM,CAAC,CAAC,CAAC+B,GAAG,CAAC,CAACU,GAAG,EAAEC,CAAC,MAAM;UACrG7D,EAAE,EAAE6D,CAAC,GAAG,GAAG;UACX5D,KAAK,EAAE2D,GAAG,CAAC3D,KAAK;UAChBE,SAAS,EAAEyD,GAAG,CAACE,MAAM,IAAIvF,WAAW;UACpC2B,WAAW,EAAE,aAAa0D,GAAG,CAACG,iBAAiB,IAAI,IAAI,aAAaH,GAAG,CAACI,MAAM,IAAI,KAAK,EAAE;UACzF3D,QAAQ,EAAEuD,GAAG,CAACG,iBAAiB,IAAI;QACrC,CAAC,CAAC,CAAC;QACHhF,kBAAkB,CAAEkF,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAE,CAAC/B,UAAU,GAAG2C;QAAsB,CAAC,CAAC,CAAC;MAClF,CAAC,MAAM;QACLpE,OAAO,CAACC,GAAG,CAAC,sBAAsBwB,UAAU,GAAG,CAAC;QAChDnD,kBAAkB,CAAEkF,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAE,CAAC/B,UAAU,GAAG;QAAG,CAAC,CAAC,CAAC;MAC/D;IACF,CAAC,CAAC,OAAOgC,GAAG,EAAE;MACZzD,OAAO,CAACrB,KAAK,CAAC,uCAAuC8C,UAAU,IAAI,EAAEgC,GAAG,CAAC;MACzE7E,QAAQ,CAAC,oCAAoC6E,GAAG,CAACC,OAAO,EAAE,CAAC;MAC3DpF,kBAAkB,CAAEkF,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAE,CAAC/B,UAAU,GAAG;MAAG,CAAC,CAAC,CAAC;IAC/D,CAAC,SAAS;MACR/C,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED9B,SAAS,CAAC,MAAM;IACd,MAAMyH,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC3F,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,MAAM4F,WAAW,GAAGvF,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC6B,SAAS,CAACf,eAAe,CAAC,CAAC;QAC/D,KAAK,MAAM0E,GAAG,IAAID,WAAW,EAAE;UAC7B,IAAIC,GAAG,CAAC/E,KAAK,KAAK,gBAAgB,EAAE;YAClC,KAAK,MAAMwB,IAAI,IAAIuD,GAAG,CAACzE,KAAK,EAAE;cAC5B,IAAIkB,IAAI,CAACpB,QAAQ,KAAK,IAAI,EAAE;gBAC1BoB,IAAI,CAACtB,SAAS,GAAG,MAAMiE,mBAAmB,CAAC3C,IAAI,CAACxB,KAAK,CAAC;cACxD;YACF;UACF;QACF;QACAhB,cAAc,CAAC8F,WAAW,CAAC;QAC3B;QACA,IAAIhF,YAAY,CAACM,QAAQ,KAAK,IAAI,IAAI,CAACvB,eAAe,CAACiB,YAAY,CAACE,KAAK,CAAC,EAAE;UAC1E,MAAM0E,OAAO,GAAGpB,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;UAC5D,MAAMvB,gCAAgC,CAAClC,YAAY,CAACE,KAAK,EAAE0E,OAAO,CAAC;QACrE;MACF,CAAC,CAAC,OAAOT,GAAG,EAAE;QACZ7E,QAAQ,CAAC,8BAA8B,CAAC;QACxCoB,OAAO,CAACrB,KAAK,CAAC,sBAAsB,EAAE8E,GAAG,CAAC;MAC5C,CAAC,SAAS;QACR/E,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED2F,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,cAAc,GAAIxD,IAAI,IAAK;IAC/B,MAAMyD,WAAW,GAAG;MAClB,GAAGzD,IAAI;MACPtB,SAAS,EAAEsB,IAAI,CAACjB,QAAQ,IAAIV,4BAA4B,CAAC2B,IAAI,CAACxB,KAAK,CAAC,GAAGH,4BAA4B,CAAC2B,IAAI,CAACxB,KAAK,CAAC,GAAGwB,IAAI,CAACtB;IACzH,CAAC;IACDtB,eAAe,CAACqG,WAAW,CAAC;IAC5B,IAAI,CAACpG,eAAe,CAAC2C,IAAI,CAACxB,KAAK,CAAC,EAAE;MAChC,MAAM0E,OAAO,GAAGpB,IAAI,CAACqB,KAAK,CAACrB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;MAC5D,IAAI/B,IAAI,CAACpB,QAAQ,KAAK,IAAI,EAAE;QAC1B4B,gCAAgC,CAACR,IAAI,CAACxB,KAAK,EAAE0E,OAAO,CAAC;MACvD,CAAC,MAAM;QACLD,oBAAoB,CAACjD,IAAI,CAACxB,KAAK,CAAC;MAClC;IACF;EACF,CAAC;EAED,oBACExB,OAAA;IAAK0G,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnB3G,OAAA,CAAClB,IAAI;MACHkE,IAAI,EAAE1B,YAAa;MACnBsF,UAAU,EAAEJ,cAAe;MAC3B3F,SAAS,EAAEA,SAAU;MACrBkC,cAAc,EAAEA;IAAe;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,EACD,CAACzG,WAAW,CAACmC,MAAM,GAAG,CAAC,GAAGnC,WAAW,GAAGsB,eAAe,EAAE4C,GAAG,CAAC,CAAC8B,GAAG,EAAEU,KAAK,kBACvEjH,OAAA,CAACjB,GAAG;MAEFyC,KAAK,EAAE+E,GAAG,CAAC/E,KAAM;MACjBM,KAAK,EAAEyE,GAAG,CAACzE,KAAM;MACjB8E,UAAU,EAAEJ,cAAe;MAC3B3F,SAAS,EAAEA,SAAU;MACrBkC,cAAc,EAAEA;IAAe,GAL1BkE,KAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMX,CACF,CAAC,EACDxE,MAAM,CAAC0E,OAAO,CAAC7G,eAAe,CAAC,CAACoE,GAAG,CAAC,CAAC,CAACjD,KAAK,EAAE2F,IAAI,CAAC,kBACjDnH,OAAA,CAACjB,GAAG;MAEFyC,KAAK,EAAE,uBAAuBA,KAAK,EAAG;MACtCM,KAAK,EAAEqF,IAAK;MACZP,UAAU,EAAEJ,cAAe;MAC3B3F,SAAS,EAAEA,SAAU;MACrBkC,cAAc,EAAEA;IAAe,GAL1B,OAAOvB,KAAK,EAAE;MAAAqF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMpB,CACF,CAAC,EACD,CAACxE,MAAM,CAACC,IAAI,CAACpC,eAAe,CAAC,CAACqC,MAAM,IAAI,CAACjC,OAAO,iBAC/CT,OAAA;MAAK0G,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAA8B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACxE,EACAvG,OAAO,iBAAIT,OAAA;MAAK0G,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACpDrG,KAAK,iBAAIX,OAAA;MAAK0G,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEhG;IAAK;MAAAkG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAC7C7G,YAAY,iBAAIH,OAAA,CAAChB,KAAK;MAACgE,IAAI,EAAE7C,YAAa;MAACiH,OAAO,EAAEA,CAAA,KAAMhH,eAAe,CAAC,IAAI;IAAE;MAAAyG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACnF7F,YAAY,iBAAInB,OAAA;MAAK0G,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAExF;IAAY;MAAA0F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnEhH,OAAA,CAACf,MAAM;MAAA4H,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV;AAAC9G,EAAA,CA3SQD,IAAI;AAAAoH,EAAA,GAAJpH,IAAI;AA6Sb,eAAeA,IAAI;AAAC,IAAAoH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}