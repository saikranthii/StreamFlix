{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Import posters\nimport kalkiPoster from '../data/Kalki.jpg';\nimport salaarPoster from '../data/salaar.jpg';\nimport chaavaPoster from '../data/chaava.jpg';\nimport rrrPoster from '../data/rrr.jpg';\nimport pushpa2Poster from '../data/pushpa2.jpg';\nimport hiNannaPoster from '../data/hinanna.jpg';\nimport mad2Poster from '../data/mad2.jpg';\nimport courtPoster from '../data/court.jpg';\nimport dragonPoster from '../data/rod.jpg';\nimport saripodaPoster from '../data/ss.jpg';\nimport saahoPoster from '../data/saaho.jpg';\nimport baahubaliPoster from '../data/bb2.jpg';\nimport blackPoster from '../data/black.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState(() => {\n    const saved = sessionStorage.getItem('recommendations');\n    console.log('Initializing recommendations from sessionStorage:', saved);\n    return saved ? JSON.parse(saved) : {};\n  });\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n  const staticMoviesWithLocalPosters = {\n    Chhaava: chaavaPoster,\n    Mad2: mad2Poster,\n    'Saripodhaa Sanivaaram': saripodaPoster,\n    Saaho: saahoPoster,\n    'Baahubali 2: The Conclusion': baahubaliPoster\n  };\n  const featuredItem = {\n    id: 271726,\n    title: 'Baahubali: The Beginning',\n    description: 'A Telugu epic about valor and sacrifice.',\n    thumbnail: baahubaliPoster,\n    video: '/videos/bb2.mp4',\n    language: 'Telugu',\n    genres: ['Action', 'Period', 'Epic']\n  };\n  const initialRowsData = [{\n    title: 'Trending Movies',\n    items: [{\n      id: 900352,\n      title: 'Kalki 2898 AD',\n      thumbnail: kalkiPoster,\n      description: 'A futuristic film inspired by Hindu mythology.',\n      language: 'Telugu',\n      isStatic: true,\n      genres: ['Sci-Fi', 'Mythology', 'Action']\n    }, {\n      id: 934632,\n      title: 'Salaar: Part 1 – Ceasefire',\n      thumbnail: salaarPoster,\n      description: 'An action-packed saga of power and betrayal.',\n      language: 'Telugu',\n      isStatic: true,\n      genres: ['Action', 'Drama', 'Epic']\n    }, {\n      id: 0,\n      title: 'Chhaava',\n      thumbnail: chaavaPoster,\n      description: 'A historical drama about bravery.',\n      isStatic: true,\n      language: 'hi',\n      genres: ['Historical', 'Action', 'Drama']\n    }, {\n      id: 614933,\n      title: 'RRR',\n      thumbnail: rrrPoster,\n      description: 'A revolutionary tale of friendship and rebellion.',\n      language: 'Telugu',\n      isStatic: true,\n      genres: ['Action', 'Historical', 'Drama', 'Epic']\n    }, {\n      id: 614934,\n      title: 'Pushpa 2: The Rule',\n      thumbnail: pushpa2Poster,\n      description: 'A gripping sequel to the smuggling saga.',\n      language: 'Telugu',\n      isStatic: true,\n      genres: ['Action', 'Drama']\n    }, {\n      id: 1121402,\n      title: 'Hi Nanna',\n      thumbnail: hiNannaPoster,\n      description: 'A heartwarming family drama.',\n      language: 'Telugu',\n      isStatic: true,\n      genres: ['Romance', 'Drama']\n    }, {\n      id: 1,\n      title: 'Mad2',\n      thumbnail: mad2Poster,\n      description: 'A thrilling continuation of mystery.',\n      isStatic: true,\n      language: 'Telugu',\n      genres: ['Comedy', 'Drama', 'Coming-of-Age']\n    }, {\n      id: 297282,\n      title: 'Court',\n      thumbnail: courtPoster,\n      description: 'A thought-provoking legal drama.',\n      language: 'mr',\n      isStatic: true,\n      genres: ['Drama', 'Legal']\n    }, {\n      id: 1560,\n      title: 'Return of the Dragon',\n      thumbnail: dragonPoster,\n      description: 'A classic martial arts adventure.',\n      language: 'English',\n      isStatic: true,\n      genres: ['Action', 'Comedy', 'Martial Arts']\n    }, {\n      id: 614932,\n      title: 'Saaho',\n      thumbnail: saahoPoster,\n      description: 'A high-octane action thriller.',\n      language: 'Telugu',\n      isStatic: true,\n      genres: ['Action', 'Thriller']\n    }, {\n      id: 2,\n      title: 'Saripodhaa Sanivaaram',\n      thumbnail: saripodaPoster,\n      description: 'An intense vigilante story.',\n      isStatic: true,\n      language: 'Telugu',\n      genres: ['Action', 'Thriller', 'Vigilante']\n    }, {\n      id: 301345,\n      title: 'Baahubali 2: The Conclusion',\n      thumbnail: baahubaliPoster,\n      description: 'The epic conclusion of a warrior’s saga.',\n      language: 'Telugu',\n      isStatic: true,\n      genres: ['Action', 'Period', 'Epic']\n    }]\n  }, {\n    title: 'Watch It Again',\n    items: [{\n      id: 5,\n      title: 'Inception',\n      thumbnail: blackPoster,\n      description: 'A mind-bending heist movie.',\n      language: 'English',\n      genres: ['Sci-Fi', 'Thriller']\n    }, {\n      id: 6,\n      title: 'Titanic',\n      thumbnail: blackPoster,\n      description: 'A romantic disaster film.',\n      language: 'English',\n      genres: ['Romance', 'Drama']\n    }]\n  }];\n\n  // List of static movie titles for genre-based recommendations\n  const staticMovieTitles = initialRowsData[0].items.map(item => item.title);\n\n  // Clear recommendations from sessionStorage on page unload\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      console.log('Clearing recommendations from sessionStorage on unload');\n      sessionStorage.removeItem('recommendations');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  // Save favorites to localStorage\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n    console.log('Favorites saved to localStorage:', favorites);\n  }, [favorites]);\n\n  // Save recommendations to sessionStorage\n  useEffect(() => {\n    console.log('Saving recommendations to sessionStorage:', recommendations);\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\n  }, [recommendations]);\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        console.log('Removing from favorites:', item.title);\n        const updatedFavorites = prevFavorites.filter(fav => fav.id !== item.id);\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return updatedFavorites;\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        console.log('Adding to favorites:', item.title);\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/random-telugu', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(`/random-telugu response: status ${response.status}, statusText: ${response.statusText}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        console.log(`Received ${data.length} random Telugu recommendations for \"${movieTitle}\":`, data);\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\n          console.log(`Processing recommendation ${i}:`, rec);\n          const poster = rec.poster || blackPoster;\n          console.log(`Poster for ${rec.title}:`, poster);\n          if (!poster) {\n            console.warn(`No poster found for ${rec.title}, using blackPoster`);\n          }\n          return {\n            id: i + 200,\n            title: rec.title,\n            thumbnail: poster,\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n            language: 'te'\n          };\n        });\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        throw new Error('Invalid data format from /random-telugu endpoint');\n      }\n    } catch (err) {\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\n      setError(`Network error fetching random recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchTeluguRecommendationsByGenre = async (movieTitle, genres, numMovies) => {\n    setLoading(true);\n    setError(null);\n    // Static fallback recommendations (Telugu, 2020–2025)\n    const fallbackRecommendations = [{\n      title: 'Devara: Part 1',\n      release_year: 2024,\n      genres: ['Action', 'Drama', 'Epic'],\n      description: 'A coastal saga of power and vengeance.',\n      poster: blackPoster\n    }, {\n      title: 'Game Changer',\n      release_year: 2024,\n      genres: ['Action', 'Thriller', 'Political'],\n      description: 'A political action thriller about reform.',\n      poster: blackPoster\n    }, {\n      title: 'Guntur Kaaram',\n      release_year: 2024,\n      genres: ['Action', 'Drama', 'Family'],\n      description: 'A fiery family drama with intense conflicts.',\n      poster: blackPoster\n    }, {\n      title: 'Sita Ramam',\n      release_year: 2022,\n      genres: ['Romance', 'Drama'],\n      description: 'A poignant love story across decades.',\n      poster: blackPoster\n    }, {\n      title: 'Jathi Ratnalu',\n      release_year: 2021,\n      genres: ['Comedy', 'Drama', 'Coming-of-Age'],\n      description: 'A hilarious tale of friends on a chaotic trip.',\n      poster: blackPoster\n    }, {\n      title: 'Vakeel Saab',\n      release_year: 2021,\n      genres: ['Drama', 'Legal'],\n      description: 'A lawyer fights for justice in a courtroom drama.',\n      poster: blackPoster\n    }, {\n      title: 'Major',\n      release_year: 2022,\n      genres: ['Action', 'Thriller', 'Biographical'],\n      description: 'A tribute to a soldier’s bravery.',\n      poster: blackPoster\n    }, {\n      title: 'Aay',\n      release_year: '2024',\n      genres: ['Action', 'Drama', 'Comedy'],\n      description: 'A village tale of love and rivalry.',\n      poster: blackPoster\n    }, {\n      title: 'Hari Hara Veera Mallu',\n      release_year: 2024,\n      genres: ['Action', 'Historical', 'Epic'],\n      description: 'A warrior’s fight against oppression.',\n      poster: blackPoster\n    }, {\n      title: 'DJ Tillu',\n      release_year: 2022,\n      genres: ['Comedy', 'Thriller', 'Romance'],\n      description: 'A DJ’s chaotic life with love and crime.',\n      poster: blackPoster\n    }, {\n      title: 'Mathu Vadalara 2',\n      release_year: 2024,\n      genres: ['Comedy', 'Thriller', 'Action'],\n      description: 'A comedic sequel with thrilling twists.',\n      poster: blackPoster\n    }, {\n      title: 'HIT: The Second Case',\n      release_year: 2022,\n      genres: ['Thriller', 'Action', 'Crime'],\n      description: 'A cop unravels a chilling murder case.',\n      poster: blackPoster\n    }];\n    try {\n      console.log(`Fetching ${numMovies} Telugu recommendations for \"${movieTitle}\" in genres: ${genres.join(', ')}...`);\n      const response = await fetch('http://localhost:5000/random-telugu-by-genre', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          genres,\n          exclude_titles: staticMovieTitles\n        })\n      });\n      console.log(`/random-telugu-by-genre response: status ${response.status}, statusText: ${response.statusText}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        console.log(`Received ${data.length} Telugu recommendations for \"${movieTitle}\":`, data);\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\n          console.log(`Processing recommendation ${i}:`, rec);\n          const poster = rec.poster || blackPoster;\n          console.log(`Poster for ${rec.title}:`, poster);\n          if (!poster) {\n            console.warn(`No poster found for ${rec.title}, using blackPoster`);\n          }\n          return {\n            id: i + 200,\n            title: rec.title,\n            thumbnail: poster,\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}, Year: ${rec.release_year || 'N/A'}`,\n            language: 'te'\n          };\n        });\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        throw new Error('Invalid data format from /random-telugu-by-genre endpoint');\n      }\n    } catch (err) {\n      console.warn(`Failed to fetch genre-based recommendations for \"${movieTitle}\": ${err.message}. Using static fallback recommendations.`);\n      // Static fallback: select recommendations matching at least one genre\n      const matchedRecs = fallbackRecommendations.filter(rec => rec.genres.some(g => genres.includes(g)) && !staticMovieTitles.includes(rec.title));\n      if (matchedRecs.length > 0) {\n        console.log(`Using ${matchedRecs.length} static fallback recommendations for \"${movieTitle}\":`, matchedRecs);\n        const shuffled = matchedRecs.sort(() => 0.5 - Math.random());\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, matchedRecs.length)).map((rec, i) => ({\n          id: i + 200,\n          title: rec.title,\n          thumbnail: rec.poster,\n          description: `Language: te, Genres: ${rec.genres.join(', ')}, Year: ${rec.release_year}`,\n          language: 'te'\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        console.warn(`No static fallback recommendations match genres for \"${movieTitle}\". Falling back to random Telugu recommendations.`);\n        await fetchRandomTeluguRecommendations(movieTitle, numMovies);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPosterForMovie = async movieTitle => {\n    try {\n      console.log(`Fetching poster for \"${movieTitle}\" via /recommend endpoint...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      if (!response.ok) {\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}, ${response.statusText}`);\n        return blackPoster;\n      }\n      const data = await response.json();\n      console.log(`Poster fetch response for \"${movieTitle}\":`, data);\n      if (Array.isArray(data) && data.length > 0) {\n        const firstMovie = data[0];\n        if (firstMovie.poster && typeof firstMovie.poster === 'string' && firstMovie.poster.trim() !== '') {\n          console.log(`Valid poster found for \"${movieTitle}\":`, firstMovie.poster);\n          return firstMovie.poster;\n        } else {\n          console.warn(`No valid poster field in response for \"${movieTitle}\":`, firstMovie);\n          return blackPoster;\n        }\n      } else {\n        console.warn(`Empty or invalid response for \"${movieTitle}\" when fetching poster`);\n        return blackPoster;\n      }\n    } catch (err) {\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err);\n      return blackPoster;\n    }\n  };\n  const fetchRecommendations = async movieTitle => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      const data = await response.json();\n      console.log(`Response for /recommend: status ${response.status}, data:`, data);\n      if (response.ok && Array.isArray(data) && data.length > 0) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        console.log(`After removing duplicates, ${uniqueData.length} unique recommendations for \"${movieTitle}\":`, uniqueData);\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n        console.log(`Selecting ${numRecs} recommendations for \"${movieTitle}\"...`);\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => {\n          const poster = rec.poster || blackPoster;\n          console.log(`Poster for ${rec.title}:`, poster);\n          if (!poster) {\n            console.warn(`No poster found for ${rec.title}, using blackPoster`);\n          }\n          return {\n            id: i + 100,\n            title: rec.title,\n            thumbnail: poster,\n            description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\n            language: rec.original_language || 'en'\n          };\n        });\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: mappedRecommendations\n        }));\n      } else {\n        console.log(`No valid data from /recommend for \"${movieTitle}\"`);\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: []\n        }));\n      }\n    } catch (err) {\n      console.error(`Network error for \"${movieTitle}\":`, err);\n      setError(`Network error fetching recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\n        for (const row of updatedRows) {\n          if (row.title === 'Watch It Again') {\n            for (const item of row.items) {\n              if (item.language === 'en') {\n                const poster = await fetchPosterForMovie(item.title);\n                item.thumbnail = poster;\n              }\n            }\n          }\n        }\n        setInitialRows(updatedRows);\n        if (featuredItem.language === 'te' && !recommendations[featuredItem.title]) {\n          const numRecsForBaahubali = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n          console.log(`Fetching initial Baahubali recommendations (${numRecsForBaahubali})`);\n          await fetchRandomTeluguRecommendations(featuredItem.title, numRecsForBaahubali);\n        } else {\n          console.log(`Skipping Baahubali recommendations fetch; already exists:`, recommendations[featuredItem.title]);\n        }\n      } catch (err) {\n        setError('Failed to fetch initial data');\n        console.error('Initial fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, [recommendations]);\n  const handleMoreInfo = item => {\n    const updatedItem = {\n      ...item\n    };\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\n    }\n    setSelectedItem(updatedItem);\n    const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n    if (staticMovieTitles.includes(item.title)) {\n      // For static movies, fetch genre-based Telugu recommendations\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\n    } else if (item.language === 'te') {\n      fetchRandomTeluguRecommendations(item.title, numRecs);\n    } else {\n      fetchRecommendations(item.title);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"ZeQ/juDncc6iGOk4Jn2j4/7+q60=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Header","Hero","Row","Modal","Footer","kalkiPoster","salaarPoster","chaavaPoster","rrrPoster","pushpa2Poster","hiNannaPoster","mad2Poster","courtPoster","dragonPoster","saripodaPoster","saahoPoster","baahubaliPoster","blackPoster","jsxDEV","_jsxDEV","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","saved","sessionStorage","getItem","console","log","JSON","parse","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","localStorage","notification","setNotification","staticMoviesWithLocalPosters","Chhaava","Mad2","Saaho","featuredItem","id","title","description","thumbnail","video","language","genres","initialRowsData","items","isStatic","staticMovieTitles","map","item","handleBeforeUnload","removeItem","window","addEventListener","removeEventListener","scrollTo","setItem","stringify","toggleFavorite","prevFavorites","isFavorited","some","fav","updatedFavorites","filter","setTimeout","fetchRandomTeluguRecommendations","movieTitle","numMovies","response","fetch","method","headers","status","statusText","ok","Error","data","json","Array","isArray","length","uniqueData","from","Map","toLowerCase","values","shuffled","sort","Math","random","selectedRecommendations","slice","min","rec","i","poster","warn","original_language","prev","err","message","fetchTeluguRecommendationsByGenre","fallbackRecommendations","release_year","join","body","exclude_titles","matchedRecs","g","includes","fetchPosterForMovie","movie_title","firstMovie","trim","fetchRecommendations","numRecs","floor","mappedRecommendations","fetchInitialData","updatedRows","row","numRecsForBaahubali","handleMoreInfo","updatedItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onMoreInfo","index","Object","entries","recs","keys","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Import posters\r\nimport kalkiPoster from '../data/Kalki.jpg';\r\nimport salaarPoster from '../data/salaar.jpg';\r\nimport chaavaPoster from '../data/chaava.jpg';\r\nimport rrrPoster from '../data/rrr.jpg';\r\nimport pushpa2Poster from '../data/pushpa2.jpg';\r\nimport hiNannaPoster from '../data/hinanna.jpg';\r\nimport mad2Poster from '../data/mad2.jpg';\r\nimport courtPoster from '../data/court.jpg';\r\nimport dragonPoster from '../data/rod.jpg';\r\nimport saripodaPoster from '../data/ss.jpg';\r\nimport saahoPoster from '../data/saaho.jpg';\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\nimport blackPoster from '../data/black.jpg';\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState(() => {\r\n    const saved = sessionStorage.getItem('recommendations');\r\n    console.log('Initializing recommendations from sessionStorage:', saved);\r\n    return saved ? JSON.parse(saved) : {};\r\n  });\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() =>\r\n    JSON.parse(localStorage.getItem('myList') || '[]')\r\n  );\r\n  const [notification, setNotification] = useState('');\r\n\r\n  const staticMoviesWithLocalPosters = {\r\n    Chhaava: chaavaPoster,\r\n    Mad2: mad2Poster,\r\n    'Saripodhaa Sanivaaram': saripodaPoster,\r\n    Saaho: saahoPoster,\r\n    'Baahubali 2: The Conclusion': baahubaliPoster\r\n  };\r\n\r\n  const featuredItem = {\r\n    id: 271726,\r\n    title: 'Baahubali: The Beginning',\r\n    description: 'A Telugu epic about valor and sacrifice.',\r\n    thumbnail: baahubaliPoster,\r\n    video: '/videos/bb2.mp4',\r\n    language: 'Telugu',\r\n    genres: ['Action', 'Period', 'Epic']\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: 'Trending Movies',\r\n      items: [\r\n        { id: 900352, title: 'Kalki 2898 AD', thumbnail: kalkiPoster, description: 'A futuristic film inspired by Hindu mythology.', language: 'Telugu', isStatic: true, genres: ['Sci-Fi', 'Mythology', 'Action'] },\r\n        { id: 934632, title: 'Salaar: Part 1 – Ceasefire', thumbnail: salaarPoster, description: 'An action-packed saga of power and betrayal.', language: 'Telugu', isStatic: true, genres: ['Action', 'Drama', 'Epic'] },\r\n        { id: 0, title: 'Chhaava', thumbnail: chaavaPoster, description: 'A historical drama about bravery.', isStatic: true, language: 'hi', genres: ['Historical', 'Action', 'Drama'] },\r\n        { id: 614933, title: 'RRR', thumbnail: rrrPoster, description: 'A revolutionary tale of friendship and rebellion.', language: 'Telugu', isStatic: true, genres: ['Action', 'Historical', 'Drama', 'Epic'] },\r\n        { id: 614934, title: 'Pushpa 2: The Rule', thumbnail: pushpa2Poster, description: 'A gripping sequel to the smuggling saga.', language: 'Telugu', isStatic: true, genres: ['Action', 'Drama'] },\r\n        { id: 1121402, title: 'Hi Nanna', thumbnail: hiNannaPoster, description: 'A heartwarming family drama.', language: 'Telugu', isStatic: true, genres: ['Romance', 'Drama'] },\r\n        { id: 1, title: 'Mad2', thumbnail: mad2Poster, description: 'A thrilling continuation of mystery.', isStatic: true, language: 'Telugu', genres: ['Comedy', 'Drama', 'Coming-of-Age'] },\r\n        { id: 297282, title: 'Court', thumbnail: courtPoster, description: 'A thought-provoking legal drama.', language: 'mr', isStatic: true, genres: ['Drama', 'Legal'] },\r\n        { id: 1560, title: 'Return of the Dragon', thumbnail: dragonPoster, description: 'A classic martial arts adventure.', language: 'English', isStatic: true, genres: ['Action', 'Comedy', 'Martial Arts'] },\r\n        { id: 614932, title: 'Saaho', thumbnail: saahoPoster, description: 'A high-octane action thriller.', language: 'Telugu', isStatic: true, genres: ['Action', 'Thriller'] },\r\n        { id: 2, title: 'Saripodhaa Sanivaaram', thumbnail: saripodaPoster, description: 'An intense vigilante story.', isStatic: true, language: 'Telugu', genres: ['Action', 'Thriller', 'Vigilante'] },\r\n        { id: 301345, title: 'Baahubali 2: The Conclusion', thumbnail: baahubaliPoster, description: 'The epic conclusion of a warrior’s saga.', language: 'Telugu', isStatic: true, genres: ['Action', 'Period', 'Epic'] }\r\n      ]\r\n    },\r\n    {\r\n      title: 'Watch It Again',\r\n      items: [\r\n        { id: 5, title: 'Inception', thumbnail: blackPoster, description: 'A mind-bending heist movie.', language: 'English', genres: ['Sci-Fi', 'Thriller'] },\r\n        { id: 6, title: 'Titanic', thumbnail: blackPoster, description: 'A romantic disaster film.', language: 'English', genres: ['Romance', 'Drama'] }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  // List of static movie titles for genre-based recommendations\r\n  const staticMovieTitles = initialRowsData[0].items.map(item => item.title);\r\n\r\n  // Clear recommendations from sessionStorage on page unload\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      console.log('Clearing recommendations from sessionStorage on unload');\r\n      sessionStorage.removeItem('recommendations');\r\n    };\r\n\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  // Save favorites to localStorage\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n    console.log('Favorites saved to localStorage:', favorites);\r\n  }, [favorites]);\r\n\r\n  // Save recommendations to sessionStorage\r\n  useEffect(() => {\r\n    console.log('Saving recommendations to sessionStorage:', recommendations);\r\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\r\n  }, [recommendations]);\r\n\r\n  const toggleFavorite = (item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        console.log('Removing from favorites:', item.title);\r\n        const updatedFavorites = prevFavorites.filter((fav) => fav.id !== item.id);\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return updatedFavorites;\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        console.log('Adding to favorites:', item.title);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/random-telugu', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      console.log(`/random-telugu response: status ${response.status}, statusText: ${response.statusText}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        console.log(`Received ${data.length} random Telugu recommendations for \"${movieTitle}\":`, data);\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\r\n          console.log(`Processing recommendation ${i}:`, rec);\r\n          const poster = rec.poster || blackPoster;\r\n          console.log(`Poster for ${rec.title}:`, poster);\r\n          if (!poster) {\r\n            console.warn(`No poster found for ${rec.title}, using blackPoster`);\r\n          }\r\n          return {\r\n            id: i + 200,\r\n            title: rec.title,\r\n            thumbnail: poster,\r\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n            language: 'te'\r\n          };\r\n        });\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        throw new Error('Invalid data format from /random-telugu endpoint');\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\r\n      setError(`Network error fetching random recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTeluguRecommendationsByGenre = async (movieTitle, genres, numMovies) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    // Static fallback recommendations (Telugu, 2020–2025)\r\n    const fallbackRecommendations = [\r\n      { title: 'Devara: Part 1', release_year: 2024, genres: ['Action', 'Drama', 'Epic'], description: 'A coastal saga of power and vengeance.', poster: blackPoster },\r\n      { title: 'Game Changer', release_year: 2024, genres: ['Action', 'Thriller', 'Political'], description: 'A political action thriller about reform.', poster: blackPoster },\r\n      { title: 'Guntur Kaaram', release_year: 2024, genres: ['Action', 'Drama', 'Family'], description: 'A fiery family drama with intense conflicts.', poster: blackPoster },\r\n      { title: 'Sita Ramam', release_year: 2022, genres: ['Romance', 'Drama'], description: 'A poignant love story across decades.', poster: blackPoster },\r\n      { title: 'Jathi Ratnalu', release_year: 2021, genres: ['Comedy', 'Drama', 'Coming-of-Age'], description: 'A hilarious tale of friends on a chaotic trip.', poster: blackPoster },\r\n      { title: 'Vakeel Saab', release_year: 2021, genres: ['Drama', 'Legal'], description: 'A lawyer fights for justice in a courtroom drama.', poster: blackPoster },\r\n      { title: 'Major', release_year: 2022, genres: ['Action', 'Thriller', 'Biographical'], description: 'A tribute to a soldier’s bravery.', poster: blackPoster },\r\n      { title: 'Aay', release_year: '2024', genres: ['Action', 'Drama', 'Comedy'], description: 'A village tale of love and rivalry.', poster: blackPoster },\r\n      { title: 'Hari Hara Veera Mallu', release_year: 2024, genres: ['Action', 'Historical', 'Epic'], description: 'A warrior’s fight against oppression.', poster: blackPoster },\r\n      { title: 'DJ Tillu', release_year: 2022, genres: ['Comedy', 'Thriller', 'Romance'], description: 'A DJ’s chaotic life with love and crime.', poster: blackPoster },\r\n      { title: 'Mathu Vadalara 2', release_year: 2024, genres: ['Comedy', 'Thriller', 'Action'], description: 'A comedic sequel with thrilling twists.', poster: blackPoster },\r\n      { title: 'HIT: The Second Case', release_year: 2022, genres: ['Thriller', 'Action', 'Crime'], description: 'A cop unravels a chilling murder case.', poster: blackPoster }\r\n    ];\r\n\r\n    try {\r\n      console.log(`Fetching ${numMovies} Telugu recommendations for \"${movieTitle}\" in genres: ${genres.join(', ')}...`);\r\n      const response = await fetch('http://localhost:5000/random-telugu-by-genre', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ genres, exclude_titles: staticMovieTitles })\r\n      });\r\n      console.log(`/random-telugu-by-genre response: status ${response.status}, statusText: ${response.statusText}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        console.log(`Received ${data.length} Telugu recommendations for \"${movieTitle}\":`, data);\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\r\n          console.log(`Processing recommendation ${i}:`, rec);\r\n          const poster = rec.poster || blackPoster;\r\n          console.log(`Poster for ${rec.title}:`, poster);\r\n          if (!poster) {\r\n            console.warn(`No poster found for ${rec.title}, using blackPoster`);\r\n          }\r\n          return {\r\n            id: i + 200,\r\n            title: rec.title,\r\n            thumbnail: poster,\r\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}, Year: ${rec.release_year || 'N/A'}`,\r\n            language: 'te'\r\n          };\r\n        });\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        throw new Error('Invalid data format from /random-telugu-by-genre endpoint');\r\n      }\r\n    } catch (err) {\r\n      console.warn(`Failed to fetch genre-based recommendations for \"${movieTitle}\": ${err.message}. Using static fallback recommendations.`);\r\n      // Static fallback: select recommendations matching at least one genre\r\n      const matchedRecs = fallbackRecommendations.filter(rec =>\r\n        rec.genres.some(g => genres.includes(g)) &&\r\n        !staticMovieTitles.includes(rec.title)\r\n      );\r\n      if (matchedRecs.length > 0) {\r\n        console.log(`Using ${matchedRecs.length} static fallback recommendations for \"${movieTitle}\":`, matchedRecs);\r\n        const shuffled = matchedRecs.sort(() => 0.5 - Math.random());\r\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, matchedRecs.length)).map((rec, i) => ({\r\n          id: i + 200,\r\n          title: rec.title,\r\n          thumbnail: rec.poster,\r\n          description: `Language: te, Genres: ${rec.genres.join(', ')}, Year: ${rec.release_year}`,\r\n          language: 'te'\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        console.warn(`No static fallback recommendations match genres for \"${movieTitle}\". Falling back to random Telugu recommendations.`);\r\n        await fetchRandomTeluguRecommendations(movieTitle, numMovies);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchPosterForMovie = async (movieTitle) => {\r\n    try {\r\n      console.log(`Fetching poster for \"${movieTitle}\" via /recommend endpoint...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle })\r\n      });\r\n      if (!response.ok) {\r\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}, ${response.statusText}`);\r\n        return blackPoster;\r\n      }\r\n      const data = await response.json();\r\n      console.log(`Poster fetch response for \"${movieTitle}\":`, data);\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        const firstMovie = data[0];\r\n        if (firstMovie.poster && typeof firstMovie.poster === 'string' && firstMovie.poster.trim() !== '') {\r\n          console.log(`Valid poster found for \"${movieTitle}\":`, firstMovie.poster);\r\n          return firstMovie.poster;\r\n        } else {\r\n          console.warn(`No valid poster field in response for \"${movieTitle}\":`, firstMovie);\r\n          return blackPoster;\r\n        }\r\n      } else {\r\n        console.warn(`Empty or invalid response for \"${movieTitle}\" when fetching poster`);\r\n        return blackPoster;\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err);\r\n      return blackPoster;\r\n    }\r\n  };\r\n\r\n  const fetchRecommendations = async (movieTitle) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle })\r\n      });\r\n      const data = await response.json();\r\n      console.log(`Response for /recommend: status ${response.status}, data:`, data);\r\n      if (response.ok && Array.isArray(data) && data.length > 0) {\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        console.log(`After removing duplicates, ${uniqueData.length} unique recommendations for \"${movieTitle}\":`, uniqueData);\r\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n        console.log(`Selecting ${numRecs} recommendations for \"${movieTitle}\"...`);\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => {\r\n          const poster = rec.poster || blackPoster;\r\n          console.log(`Poster for ${rec.title}:`, poster);\r\n          if (!poster) {\r\n            console.warn(`No poster found for ${rec.title}, using blackPoster`);\r\n          }\r\n          return {\r\n            id: i + 100,\r\n            title: rec.title,\r\n            thumbnail: poster,\r\n            description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\r\n            language: rec.original_language || 'en'\r\n          };\r\n        });\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: mappedRecommendations }));\r\n      } else {\r\n        console.log(`No valid data from /recommend for \"${movieTitle}\"`);\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n      }\r\n    } catch (err) {\r\n      console.error(`Network error for \"${movieTitle}\":`, err);\r\n      setError(`Network error fetching recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\r\n\r\n        for (const row of updatedRows) {\r\n          if (row.title === 'Watch It Again') {\r\n            for (const item of row.items) {\r\n              if (item.language === 'en') {\r\n                const poster = await fetchPosterForMovie(item.title);\r\n                item.thumbnail = poster;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        setInitialRows(updatedRows);\r\n\r\n        if (featuredItem.language === 'te' && !recommendations[featuredItem.title]) {\r\n          const numRecsForBaahubali = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n          console.log(`Fetching initial Baahubali recommendations (${numRecsForBaahubali})`);\r\n          await fetchRandomTeluguRecommendations(featuredItem.title, numRecsForBaahubali);\r\n        } else {\r\n          console.log(`Skipping Baahubali recommendations fetch; already exists:`, recommendations[featuredItem.title]);\r\n        }\r\n      } catch (err) {\r\n        setError('Failed to fetch initial data');\r\n        console.error('Initial fetch error:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, [recommendations]);\r\n\r\n  const handleMoreInfo = (item) => {\r\n    const updatedItem = { ...item };\r\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\r\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\r\n    }\r\n    setSelectedItem(updatedItem);\r\n    const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n    if (staticMovieTitles.includes(item.title)) {\r\n      // For static movies, fetch genre-based Telugu recommendations\r\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\r\n    } else if (item.language === 'te') {\r\n      fetchRandomTeluguRecommendations(item.title, numRecs);\r\n    } else {\r\n      fetchRecommendations(item.title);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <Header />\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites || []}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}