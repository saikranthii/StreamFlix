{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Import posters\nimport kalkiPoster from '../data/Kalki.jpg';\nimport salaarPoster from '../data/salaar.jpg';\nimport chaavaPoster from '../data/chaava.jpg';\nimport rrrPoster from '../data/rrr.jpg';\nimport pushpa2Poster from '../data/pushpa2.jpg';\nimport hiNannaPoster from '../data/hinanna.jpg';\nimport mad2Poster from '../data/mad2.jpg';\nimport courtPoster from '../data/court.jpg';\nimport dragonPoster from '../data/rod.jpg';\nimport saripodaPoster from '../data/ss.jpg';\nimport saahoPoster from '../data/saaho.jpg';\nimport baahubaliPoster from '../data/bb2.jpg';\nimport blackPoster from '../data/black.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState({});\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n  const staticMoviesWithLocalPosters = {\n    \"Chaava\": chaavaPoster,\n    \"Mad2\": mad2Poster,\n    \"Saripoda Sanivaaram\": saripodaPoster\n  };\n  const featuredItem = {\n    id: 271726,\n    title: \"Baahubali: The Beginning\",\n    description: \"A Telugu epic about valor and sacrifice.\",\n    thumbnail: baahubaliPoster,\n    video: \"/videos/bb2.mp4\",\n    language: \"te\",\n    genre: \"Action\"\n  };\n  const initialRowsData = [{\n    title: \"Trending Movies\",\n    items: [{\n      id: 900352,\n      title: \"Kalki 2898 AD\",\n      thumbnail: kalkiPoster,\n      description: \"A sci-fi epic set in a dystopian future.\",\n      language: \"te\",\n      genre: \"Sci-Fi\"\n    }, {\n      id: 934632,\n      title: \"Salaar\",\n      thumbnail: salaarPoster,\n      description: \"An action-packed saga of power and betrayal.\",\n      language: \"te\",\n      genre: \"Action\"\n    }, {\n      id: 0,\n      title: \"Chaava\",\n      thumbnail: chaavaPoster,\n      description: \"A historical drama about bravery.\",\n      isStatic: true,\n      language: \"te\",\n      genre: \"Drama\"\n    }, {\n      id: 614933,\n      title: \"RRR\",\n      thumbnail: rrrPoster,\n      description: \"A revolutionary tale of friendship and rebellion.\",\n      language: \"te\",\n      genre: \"Action\"\n    }, {\n      id: 614934,\n      title: \"Pushpa 2: The Rule\",\n      thumbnail: pushpa2Poster,\n      description: \"A gripping sequel to the smuggling saga.\",\n      language: \"te\",\n      genre: \"Action\"\n    }, {\n      id: 1121402,\n      title: \"Hi Nanna\",\n      thumbnail: hiNannaPoster,\n      description: \"A heartwarming family drama.\",\n      language: \"te\",\n      genre: \"Drama\"\n    }, {\n      id: 1,\n      title: \"Mad2\",\n      thumbnail: mad2Poster,\n      description: \"A thrilling continuation of mystery.\",\n      isStatic: true,\n      language: \"te\",\n      genre: \"Thriller\"\n    }, {\n      id: 297282,\n      title: \"Court\",\n      thumbnail: courtPoster,\n      description: \"A thought-provoking legal drama.\",\n      language: \"te\",\n      genre: \"Drama\"\n    }, {\n      id: 1560,\n      title: \"Return of the Dragon\",\n      thumbnail: dragonPoster,\n      description: \"A classic martial arts adventure.\",\n      language: \"te\",\n      genre: \"Action\"\n    }, {\n      id: 614932,\n      title: \"Saaho\",\n      thumbnail: saahoPoster,\n      description: \"A high-octane action thriller.\",\n      language: \"te\",\n      genre: \"Action\"\n    }, {\n      id: 2,\n      title: \"Saripoda Sanivaaram\",\n      thumbnail: saripodaPoster,\n      description: \"An intense vigilante story.\",\n      isStatic: true,\n      language: \"te\",\n      genre: \"Action\"\n    }]\n  }, {\n    title: \"Watch It Again\",\n    items: [{\n      id: 5,\n      title: \"Inception\",\n      thumbnail: blackPoster,\n      description: \"A mind-bending heist movie.\",\n      language: \"en\",\n      genre: \"Sci-Fi\"\n    }, {\n      id: 6,\n      title: \"Titanic\",\n      thumbnail: blackPoster,\n      description: \"A romantic disaster film.\",\n      language: \"en\",\n      genre: \"Romance\"\n    }]\n  }];\n\n  // Fallback recommendations for Baahubali\n  const fallbackRecommendations = [{\n    id: 614933,\n    title: \"RRR\",\n    thumbnail: rrrPoster,\n    description: \"Language: te, Genres: Action\",\n    language: \"te\",\n    genre: \"Action\"\n  }, {\n    id: 934632,\n    title: \"Salaar\",\n    thumbnail: salaarPoster,\n    description: \"Language: te, Genres: Action\",\n    language: \"te\",\n    genre: \"Action\"\n  }, {\n    id: 614934,\n    title: \"Pushpa 2: The Rule\",\n    thumbnail: pushpa2Poster,\n    description: \"Language: te, Genres: Action\",\n    language: \"te\",\n    genre: \"Action\"\n  }, {\n    id: 614932,\n    title: \"Saaho\",\n    thumbnail: saahoPoster,\n    description: \"Language: te, Genres: Action\",\n    language: \"te\",\n    genre: \"Action\"\n  }];\n\n  // Load recommendations from sessionStorage on mount\n  useEffect(() => {\n    const savedRecommendations = sessionStorage.getItem('recommendations');\n    if (savedRecommendations) {\n      console.log('Loading recommendations from sessionStorage:', JSON.parse(savedRecommendations));\n      setRecommendations(JSON.parse(savedRecommendations));\n    }\n  }, []);\n\n  // Save recommendations to sessionStorage when they change\n  useEffect(() => {\n    if (Object.keys(recommendations).length > 0) {\n      console.log('Saving recommendations to sessionStorage:', recommendations);\n      sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\n    }\n  }, [recommendations]);\n\n  // Clear sessionStorage only on tab close\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      console.log('Ending session: Clearing sessionStorage on tab close');\n      sessionStorage.removeItem('recommendations');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n    console.log('Favorites saved to localStorage:', favorites);\n  }, [favorites]);\n  const toggleFavorite = useCallback(item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        console.log('Removing from favorites:', item.title);\n        const updatedFavorites = prevFavorites.filter(fav => fav.id !== item.id);\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return updatedFavorites;\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        console.log('Adding to favorites:', item.title);\n        return [...prevFavorites, item];\n      }\n    });\n  }, []);\n  const fetchPosterForMovie = async movieTitle => {\n    try {\n      console.log(`Fetching poster for \"${movieTitle}\" via /recommend endpoint...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      if (!response.ok) {\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}, ${response.statusText}`);\n        return blackPoster;\n      }\n      const data = await response.json();\n      console.log(`Poster fetch response for \"${movieTitle}\":`, data);\n      if (Array.isArray(data) && data.length > 0) {\n        const firstMovie = data[0];\n        if (firstMovie.poster && typeof firstMovie.poster === 'string' && firstMovie.poster.trim() !== '') {\n          console.log(`Valid poster found for \"${movieTitle}\":`, firstMovie.poster);\n          return firstMovie.poster;\n        }\n      }\n      console.warn(`No valid poster for \"${movieTitle}\"`);\n      return blackPoster;\n    } catch (err) {\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err.message);\n      return blackPoster;\n    }\n  };\n  const fetchTeluguRecommendations = async (movieTitle, genre, numMovies) => {\n    if (recommendations[movieTitle]) {\n      console.log(`Recommendations for \"${movieTitle}\" already exist in session, skipping fetch.`);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    let recommendationsData = [];\n\n    // Try multiple title variations\n    const titleVariations = [movieTitle, movieTitle.replace(/:\\s*The\\s*Beginning/, ''), movieTitle.toLowerCase(), movieTitle.replace('Baahubali', 'Bahubali')];\n    for (const title of titleVariations) {\n      try {\n        console.log(`Fetching ${numMovies} Telugu recommendations for \"${title}\" (Genre: ${genre})...`);\n        const requestBody = {\n          movie_title: title,\n          genre,\n          language: 'te'\n        };\n        console.log(`Request body:`, requestBody);\n        const response = await fetch('http://localhost:5000/recommend', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(requestBody)\n        });\n        console.log(`Fetch response for \"${title}\": Status ${response.status}`);\n        if (!response.ok) {\n          console.warn(`Fetch failed for \"${title}\": Status ${response.status}, ${response.statusText}`);\n          continue;\n        }\n        const data = await response.json();\n        console.log(`Fetch data for \"${title}\":`, data);\n        if (Array.isArray(data) && data.length > 0) {\n          recommendationsData = data;\n          break;\n        }\n      } catch (err) {\n        console.error(`Network error for \"${title}\":`, err.message);\n      }\n    }\n\n    // Process recommendations\n    if (recommendationsData.length > 0) {\n      const uniqueData = Array.from(new Map(recommendationsData.map(item => [item.title.toLowerCase(), item])).values());\n      console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\n      const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n      recommendationsData = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\n        id: i + 200,\n        title: rec.title,\n        thumbnail: rec.poster || blackPoster,\n        description: `Language: te, Genres: ${rec.genres || genre || 'Action'}`,\n        language: 'te',\n        genre: rec.genres || genre\n      }));\n      console.log(`Processed recommendations for \"${movieTitle}\":`, recommendationsData);\n    } else {\n      console.warn(`No recommendations received for \"${movieTitle}\", using fallback.`);\n      recommendationsData = movieTitle.includes('Baahubali') ? fallbackRecommendations : [];\n    }\n    setRecommendations(prev => {\n      const newRecs = {\n        ...prev,\n        [movieTitle]: recommendationsData\n      };\n      console.log('Updating recommendations state:', newRecs);\n      return newRecs;\n    });\n    setLoading(false);\n  };\n  const fetchRecommendations = async movieTitle => {\n    if (recommendations[movieTitle]) {\n      console.log(`Recommendations for \"${movieTitle}\" already exist in session, skipping fetch.`);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      console.log(`Response for /recommend: status ${response.status}`);\n      if (!response.ok) {\n        console.warn(`Fetch failed for \"${movieTitle}\": Status ${response.status}, ${response.statusText}`);\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: []\n        }));\n        return;\n      }\n      const data = await response.json();\n      console.log(`Fetch data for \"${movieTitle}\":`, data);\n      if (Array.isArray(data) && data.length > 0) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n        console.log(`Selecting ${numRecs} recommendations for \"${movieTitle}\"...`);\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => ({\n          id: i + 100,\n          title: rec.title,\n          thumbnail: rec.poster || blackPoster,\n          description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\n          language: rec.original_language || 'en',\n          genre: rec.genres || 'N/A'\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: mappedRecommendations\n        }));\n      } else {\n        console.warn(`No recommendations received for \"${movieTitle}\"`);\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: []\n        }));\n      }\n    } catch (err) {\n      console.error(`Network error fetching recommendations for \"${movieTitle}\":`, err.message);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\n        for (const row of updatedRows) {\n          if (row.title === \"Watch It Again\") {\n            for (const item of row.items) {\n              if (item.language === \"en\") {\n                item.thumbnail = await fetchPosterForMovie(item.title);\n              }\n            }\n          }\n        }\n        setInitialRows(updatedRows);\n        if (featuredItem.language === \"te\" && !recommendations[featuredItem.title]) {\n          const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n          await fetchTeluguRecommendations(featuredItem.title, featuredItem.genre, numRecs);\n        }\n      } catch (err) {\n        console.error('Initial fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n  const handleMoreInfo = useCallback(item => {\n    const updatedItem = {\n      ...item,\n      thumbnail: item.isStatic && staticMoviesWithLocalPosters[item.title] ? staticMoviesWithLocalPosters[item.title] : item.thumbnail\n    };\n    setSelectedItem(updatedItem);\n    if (!recommendations[item.title]) {\n      if (item.language === \"te\") {\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n        fetchTeluguRecommendations(item.title, item.genre || 'Action', numRecs);\n      } else {\n        fetchRecommendations(item.title);\n      }\n    }\n  }, [recommendations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet. Click \\\"More Info\\\" to fetch recommendations.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading recommendations...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"G9IR/zn1JYNDggjyIi1k1EyYwNY=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Header","Hero","Row","Modal","Footer","kalkiPoster","salaarPoster","chaavaPoster","rrrPoster","pushpa2Poster","hiNannaPoster","mad2Poster","courtPoster","dragonPoster","saripodaPoster","saahoPoster","baahubaliPoster","blackPoster","jsxDEV","_jsxDEV","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","JSON","parse","localStorage","getItem","notification","setNotification","staticMoviesWithLocalPosters","featuredItem","id","title","description","thumbnail","video","language","genre","initialRowsData","items","isStatic","fallbackRecommendations","savedRecommendations","sessionStorage","console","log","Object","keys","length","setItem","stringify","handleBeforeUnload","removeItem","window","addEventListener","removeEventListener","scrollTo","toggleFavorite","item","prevFavorites","isFavorited","some","fav","updatedFavorites","filter","setTimeout","fetchPosterForMovie","movieTitle","response","fetch","method","headers","body","movie_title","ok","warn","status","statusText","data","json","Array","isArray","firstMovie","poster","trim","err","message","fetchTeluguRecommendations","numMovies","recommendationsData","titleVariations","replace","toLowerCase","requestBody","uniqueData","from","Map","map","values","shuffled","sort","Math","random","slice","min","rec","i","genres","includes","prev","newRecs","fetchRecommendations","numRecs","floor","mappedRecommendations","original_language","fetchInitialData","updatedRows","row","handleMoreInfo","updatedItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onMoreInfo","index","entries","recs","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Import posters\r\nimport kalkiPoster from '../data/Kalki.jpg';\r\nimport salaarPoster from '../data/salaar.jpg';\r\nimport chaavaPoster from '../data/chaava.jpg';\r\nimport rrrPoster from '../data/rrr.jpg';\r\nimport pushpa2Poster from '../data/pushpa2.jpg';\r\nimport hiNannaPoster from '../data/hinanna.jpg';\r\nimport mad2Poster from '../data/mad2.jpg';\r\nimport courtPoster from '../data/court.jpg';\r\nimport dragonPoster from '../data/rod.jpg';\r\nimport saripodaPoster from '../data/ss.jpg';\r\nimport saahoPoster from '../data/saaho.jpg';\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\nimport blackPoster from '../data/black.jpg';\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState({});\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\r\n  const [notification, setNotification] = useState('');\r\n\r\n  const staticMoviesWithLocalPosters = {\r\n    \"Chaava\": chaavaPoster,\r\n    \"Mad2\": mad2Poster,\r\n    \"Saripoda Sanivaaram\": saripodaPoster,\r\n  };\r\n\r\n  const featuredItem = {\r\n    id: 271726,\r\n    title: \"Baahubali: The Beginning\",\r\n    description: \"A Telugu epic about valor and sacrifice.\",\r\n    thumbnail: baahubaliPoster,\r\n    video: \"/videos/bb2.mp4\",\r\n    language: \"te\",\r\n    genre: \"Action\"\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: \"Trending Movies\",\r\n      items: [\r\n        { id: 900352, title: \"Kalki 2898 AD\", thumbnail: kalkiPoster, description: \"A sci-fi epic set in a dystopian future.\", language: \"te\", genre: \"Sci-Fi\" },\r\n        { id: 934632, title: \"Salaar\", thumbnail: salaarPoster, description: \"An action-packed saga of power and betrayal.\", language: \"te\", genre: \"Action\" },\r\n        { id: 0, title: \"Chaava\", thumbnail: chaavaPoster, description: \"A historical drama about bravery.\", isStatic: true, language: \"te\", genre: \"Drama\" },\r\n        { id: 614933, title: \"RRR\", thumbnail: rrrPoster, description: \"A revolutionary tale of friendship and rebellion.\", language: \"te\", genre: \"Action\" },\r\n        { id: 614934, title: \"Pushpa 2: The Rule\", thumbnail: pushpa2Poster, description: \"A gripping sequel to the smuggling saga.\", language: \"te\", genre: \"Action\" },\r\n        { id: 1121402, title: \"Hi Nanna\", thumbnail: hiNannaPoster, description: \"A heartwarming family drama.\", language: \"te\", genre: \"Drama\" },\r\n        { id: 1, title: \"Mad2\", thumbnail: mad2Poster, description: \"A thrilling continuation of mystery.\", isStatic: true, language: \"te\", genre: \"Thriller\" },\r\n        { id: 297282, title: \"Court\", thumbnail: courtPoster, description: \"A thought-provoking legal drama.\", language: \"te\", genre: \"Drama\" },\r\n        { id: 1560, title: \"Return of the Dragon\", thumbnail: dragonPoster, description: \"A classic martial arts adventure.\", language: \"te\", genre: \"Action\" },\r\n        { id: 614932, title: \"Saaho\", thumbnail: saahoPoster, description: \"A high-octane action thriller.\", language: \"te\", genre: \"Action\" },\r\n        { id: 2, title: \"Saripoda Sanivaaram\", thumbnail: saripodaPoster, description: \"An intense vigilante story.\", isStatic: true, language: \"te\", genre: \"Action\" },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Watch It Again\",\r\n      items: [\r\n        { id: 5, title: \"Inception\", thumbnail: blackPoster, description: \"A mind-bending heist movie.\", language: \"en\", genre: \"Sci-Fi\" },\r\n        { id: 6, title: \"Titanic\", thumbnail: blackPoster, description: \"A romantic disaster film.\", language: \"en\", genre: \"Romance\" },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // Fallback recommendations for Baahubali\r\n  const fallbackRecommendations = [\r\n    { id: 614933, title: \"RRR\", thumbnail: rrrPoster, description: \"Language: te, Genres: Action\", language: \"te\", genre: \"Action\" },\r\n    { id: 934632, title: \"Salaar\", thumbnail: salaarPoster, description: \"Language: te, Genres: Action\", language: \"te\", genre: \"Action\" },\r\n    { id: 614934, title: \"Pushpa 2: The Rule\", thumbnail: pushpa2Poster, description: \"Language: te, Genres: Action\", language: \"te\", genre: \"Action\" },\r\n    { id: 614932, title: \"Saaho\", thumbnail: saahoPoster, description: \"Language: te, Genres: Action\", language: \"te\", genre: \"Action\" },\r\n  ];\r\n\r\n  // Load recommendations from sessionStorage on mount\r\n  useEffect(() => {\r\n    const savedRecommendations = sessionStorage.getItem('recommendations');\r\n    if (savedRecommendations) {\r\n      console.log('Loading recommendations from sessionStorage:', JSON.parse(savedRecommendations));\r\n      setRecommendations(JSON.parse(savedRecommendations));\r\n    }\r\n  }, []);\r\n\r\n  // Save recommendations to sessionStorage when they change\r\n  useEffect(() => {\r\n    if (Object.keys(recommendations).length > 0) {\r\n      console.log('Saving recommendations to sessionStorage:', recommendations);\r\n      sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\r\n    }\r\n  }, [recommendations]);\r\n\r\n  // Clear sessionStorage only on tab close\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      console.log('Ending session: Clearing sessionStorage on tab close');\r\n      sessionStorage.removeItem('recommendations');\r\n    };\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n    console.log('Favorites saved to localStorage:', favorites);\r\n  }, [favorites]);\r\n\r\n  const toggleFavorite = useCallback((item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        console.log('Removing from favorites:', item.title);\r\n        const updatedFavorites = prevFavorites.filter((fav) => fav.id !== item.id);\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return updatedFavorites;\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        console.log('Adding to favorites:', item.title);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const fetchPosterForMovie = async (movieTitle) => {\r\n    try {\r\n      console.log(`Fetching poster for \"${movieTitle}\" via /recommend endpoint...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n      });\r\n      if (!response.ok) {\r\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}, ${response.statusText}`);\r\n        return blackPoster;\r\n      }\r\n      const data = await response.json();\r\n      console.log(`Poster fetch response for \"${movieTitle}\":`, data);\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        const firstMovie = data[0];\r\n        if (firstMovie.poster && typeof firstMovie.poster === 'string' && firstMovie.poster.trim() !== '') {\r\n          console.log(`Valid poster found for \"${movieTitle}\":`, firstMovie.poster);\r\n          return firstMovie.poster;\r\n        }\r\n      }\r\n      console.warn(`No valid poster for \"${movieTitle}\"`);\r\n      return blackPoster;\r\n    } catch (err) {\r\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err.message);\r\n      return blackPoster;\r\n    }\r\n  };\r\n\r\n  const fetchTeluguRecommendations = async (movieTitle, genre, numMovies) => {\r\n    if (recommendations[movieTitle]) {\r\n      console.log(`Recommendations for \"${movieTitle}\" already exist in session, skipping fetch.`);\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    setError(null);\r\n    let recommendationsData = [];\r\n\r\n    // Try multiple title variations\r\n    const titleVariations = [\r\n      movieTitle,\r\n      movieTitle.replace(/:\\s*The\\s*Beginning/, ''),\r\n      movieTitle.toLowerCase(),\r\n      movieTitle.replace('Baahubali', 'Bahubali')\r\n    ];\r\n\r\n    for (const title of titleVariations) {\r\n      try {\r\n        console.log(`Fetching ${numMovies} Telugu recommendations for \"${title}\" (Genre: ${genre})...`);\r\n        const requestBody = { movie_title: title, genre, language: 'te' };\r\n        console.log(`Request body:`, requestBody);\r\n        const response = await fetch('http://localhost:5000/recommend', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(requestBody),\r\n        });\r\n        console.log(`Fetch response for \"${title}\": Status ${response.status}`);\r\n        if (!response.ok) {\r\n          console.warn(`Fetch failed for \"${title}\": Status ${response.status}, ${response.statusText}`);\r\n          continue;\r\n        }\r\n        const data = await response.json();\r\n        console.log(`Fetch data for \"${title}\":`, data);\r\n        if (Array.isArray(data) && data.length > 0) {\r\n          recommendationsData = data;\r\n          break;\r\n        }\r\n      } catch (err) {\r\n        console.error(`Network error for \"${title}\":`, err.message);\r\n      }\r\n    }\r\n\r\n    // Process recommendations\r\n    if (recommendationsData.length > 0) {\r\n      const uniqueData = Array.from(new Map(recommendationsData.map(item => [item.title.toLowerCase(), item])).values());\r\n      console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\r\n      const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n      recommendationsData = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\r\n        id: i + 200,\r\n        title: rec.title,\r\n        thumbnail: rec.poster || blackPoster,\r\n        description: `Language: te, Genres: ${rec.genres || genre || 'Action'}`,\r\n        language: 'te',\r\n        genre: rec.genres || genre\r\n      }));\r\n      console.log(`Processed recommendations for \"${movieTitle}\":`, recommendationsData);\r\n    } else {\r\n      console.warn(`No recommendations received for \"${movieTitle}\", using fallback.`);\r\n      recommendationsData = movieTitle.includes('Baahubali') ? fallbackRecommendations : [];\r\n    }\r\n\r\n    setRecommendations((prev) => {\r\n      const newRecs = { ...prev, [movieTitle]: recommendationsData };\r\n      console.log('Updating recommendations state:', newRecs);\r\n      return newRecs;\r\n    });\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchRecommendations = async (movieTitle) => {\r\n    if (recommendations[movieTitle]) {\r\n      console.log(`Recommendations for \"${movieTitle}\" already exist in session, skipping fetch.`);\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n      });\r\n      console.log(`Response for /recommend: status ${response.status}`);\r\n      if (!response.ok) {\r\n        console.warn(`Fetch failed for \"${movieTitle}\": Status ${response.status}, ${response.statusText}`);\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n        return;\r\n      }\r\n      const data = await response.json();\r\n      console.log(`Fetch data for \"${movieTitle}\":`, data);\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\r\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n        console.log(`Selecting ${numRecs} recommendations for \"${movieTitle}\"...`);\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => ({\r\n          id: i + 100,\r\n          title: rec.title,\r\n          thumbnail: rec.poster || blackPoster,\r\n          description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\r\n          language: rec.original_language || 'en',\r\n          genre: rec.genres || 'N/A'\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: mappedRecommendations }));\r\n      } else {\r\n        console.warn(`No recommendations received for \"${movieTitle}\"`);\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n      }\r\n    } catch (err) {\r\n      console.error(`Network error fetching recommendations for \"${movieTitle}\":`, err.message);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\r\n        for (const row of updatedRows) {\r\n          if (row.title === \"Watch It Again\") {\r\n            for (const item of row.items) {\r\n              if (item.language === \"en\") {\r\n                item.thumbnail = await fetchPosterForMovie(item.title);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setInitialRows(updatedRows);\r\n        if (featuredItem.language === \"te\" && !recommendations[featuredItem.title]) {\r\n          const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n          await fetchTeluguRecommendations(featuredItem.title, featuredItem.genre, numRecs);\r\n        }\r\n      } catch (err) {\r\n        console.error('Initial fetch error:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, []);\r\n\r\n  const handleMoreInfo = useCallback((item) => {\r\n    const updatedItem = {\r\n      ...item,\r\n      thumbnail: item.isStatic && staticMoviesWithLocalPosters[item.title] ? staticMoviesWithLocalPosters[item.title] : item.thumbnail\r\n    };\r\n    setSelectedItem(updatedItem);\r\n    if (!recommendations[item.title]) {\r\n      if (item.language === \"te\") {\r\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n        fetchTeluguRecommendations(item.title, item.genre || 'Action', numRecs);\r\n      } else {\r\n        fetchRecommendations(item.title);\r\n      }\r\n    }\r\n  }, [recommendations]);\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <Header />\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites || []}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet. Click \"More Info\" to fetch recommendations.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading recommendations...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}