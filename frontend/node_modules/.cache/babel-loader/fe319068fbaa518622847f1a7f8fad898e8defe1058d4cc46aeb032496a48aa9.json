{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\SpeedTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport './SpeedTest.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SpeedTest() {\n  _s();\n  const [downloadSpeed, setDownloadSpeed] = useState(null);\n  const [uploadSpeed, setUploadSpeed] = useState(null);\n  const [latency, setLatency] = useState(null);\n  const [testing, setTesting] = useState(false);\n  const [error, setError] = useState('');\n  const [history, setHistory] = useState(() => {\n    const saved = localStorage.getItem('speedTestHistory');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [chartData, setChartData] = useState({\n    download: [],\n    upload: []\n  });\n\n  // Update local storage when history changes\n  useEffect(() => {\n    localStorage.setItem('speedTestHistory', JSON.stringify(history));\n  }, [history]);\n\n  // Initialize chart\n  useEffect(() => {\n    var _document$getElementB;\n    const ctx = (_document$getElementB = document.getElementById('speedChart')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.getContext('2d');\n    if (ctx) {\n      const chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: chartData.download.map((_, i) => `Sample ${i + 1}`),\n          datasets: [{\n            label: 'Download Speed (Mbps)',\n            data: chartData.download,\n            borderColor: '#ff0000',\n            backgroundColor: 'rgba(255, 0, 0, 0.2)',\n            fill: true\n          }, {\n            label: 'Upload Speed (Mbps)',\n            data: chartData.upload,\n            borderColor: '#ffffff',\n            backgroundColor: 'rgba(255, 255, 255, 0.2)',\n            fill: true\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Speed (Mbps)'\n              }\n            },\n            x: {\n              title: {\n                display: true,\n                text: 'Sample'\n              }\n            }\n          }\n        }\n      });\n      return () => chart.destroy();\n    }\n  }, [chartData]);\n  const runSpeedTest = async () => {\n    setTesting(true);\n    setDownloadSpeed(null);\n    setUploadSpeed(null);\n    setLatency(null);\n    setError('');\n    setChartData({\n      download: [],\n      upload: []\n    });\n    try {\n      // Measure latency (ping)\n      const pingStart = performance.now();\n      await axios.get('http://localhost:5001/');\n      const pingEnd = performance.now();\n      const pingMs = (pingEnd - pingStart).toFixed(2);\n      setLatency(pingMs);\n      console.log('Latency:', pingMs, 'ms');\n\n      // Download test\n      const downloadSamples = 3;\n      const downloadSpeeds = [];\n      for (let i = 0; i < downloadSamples; i++) {\n        const startTime = performance.now();\n        const response = await axios.get('http://localhost:3000/files/100MB.bin', {\n          responseType: 'blob'\n        });\n        const endTime = performance.now();\n        const duration = (endTime - startTime) / 1000; // seconds\n        const fileSize = response.data.size / 1024 / 1024; // MB\n        const speedMbps = (fileSize * 8 / duration).toFixed(2); // Mbps\n        downloadSpeeds.push(parseFloat(speedMbps));\n        setChartData(prev => ({\n          download: [...prev.download, parseFloat(speedMbps)],\n          upload: prev.upload\n        }));\n        console.log(`Download sample ${i + 1}: ${speedMbps} Mbps`);\n      }\n      const avgDownloadSpeed = (downloadSpeeds.reduce((a, b) => a + b, 0) / downloadSpeeds.length).toFixed(2);\n      setDownloadSpeed(avgDownloadSpeed);\n      console.log('Average Download Speed:', avgDownloadSpeed, 'Mbps');\n\n      // Upload test\n      const uploadSamples = 3;\n      const uploadSpeeds = [];\n      const fileSizeMB = 10; // 10MB\n      const fileData = new Blob([new ArrayBuffer(fileSizeMB * 1024 * 1024)], {\n        type: 'application/octet-stream'\n      });\n      for (let i = 0; i < uploadSamples; i++) {\n        const startTime = performance.now();\n        await axios.post('http://localhost:5001/upload', fileData, {\n          headers: {\n            'Content-Type': 'application/octet-stream'\n          }\n        });\n        const endTime = performance.now();\n        const duration = (endTime - startTime) / 1000; // seconds\n        const speedMbps = (fileSizeMB * 8 / duration).toFixed(2); // Mbps\n        uploadSpeeds.push(parseFloat(speedMbps));\n        setChartData(prev => ({\n          download: prev.download,\n          upload: [...prev.upload, parseFloat(speedMbps)]\n        }));\n        console.log(`Upload sample ${i + 1}: ${speedMbps} Mbps`);\n      }\n      const avgUploadSpeed = (uploadSpeeds.reduce((a, b) => a + b, 0) / uploadSpeeds.length).toFixed(2);\n      setUploadSpeed(avgUploadSpeed);\n      console.log('Average Upload Speed:', avgUploadSpeed, 'Mbps');\n\n      // Update history\n      const result = {\n        downloadSpeed: avgDownloadSpeed,\n        uploadSpeed: avgUploadSpeed,\n        latency: pingMs,\n        timestamp: new Date().toLocaleString()\n      };\n      console.log('History entry:', result);\n      setHistory(prev => [result, ...prev].slice(0, 5)); // Keep last 5 results\n    } catch (err) {\n      console.error('Speed test error:', err);\n      setError('Failed to run speed test.');\n    }\n    setTesting(false);\n  };\n\n  // Calculate needle rotation and gauge offsets (0-100 Mbps maps to 0-360 deg)\n  const downloadGaugeOffset = downloadSpeed ? (1 - parseFloat(downloadSpeed) / 100) * 439.8 : 439.8;\n  const uploadGaugeOffset = uploadSpeed ? (1 - parseFloat(uploadSpeed) / 100) * 439.8 : 439.8;\n  const needleAngle = testing ? 0 : uploadSpeed ? parseFloat(uploadSpeed) / 100 * 360 : downloadSpeed ? parseFloat(downloadSpeed) / 100 * 360 : 0;\n\n  // Generate tick marks and labels\n  const ticks = [];\n  for (let i = 0; i <= 100; i += 5) {\n    const isMajor = i % 20 === 0;\n    const angle = i / 100 * 360;\n    const rad = angle * Math.PI / 180;\n    const innerRadius = isMajor ? 55 : 60;\n    const outerRadius = isMajor ? 45 : 50;\n    const x1 = 100 + innerRadius * Math.cos(rad);\n    const y1 = 100 + innerRadius * Math.sin(rad);\n    const x2 = 100 + outerRadius * Math.cos(rad);\n    const y2 = 100 + outerRadius * Math.sin(rad);\n    ticks.push(/*#__PURE__*/_jsxDEV(\"line\", {\n      x1: x1,\n      y1: y1,\n      x2: x2,\n      y2: y2,\n      stroke: \"#ffffff\",\n      strokeWidth: isMajor ? 2 : 1\n    }, `tick-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this));\n    if (isMajor) {\n      const labelX = 100 + 35 * Math.cos(rad);\n      const labelY = 100 + 35 * Math.sin(rad);\n      ticks.push(/*#__PURE__*/_jsxDEV(\"text\", {\n        x: labelX,\n        y: labelY,\n        fill: \"#ffffff\",\n        fontSize: \"10\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        children: i\n      }, `label-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speed-test\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Speed Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Test your internet speed for optimal StreamFlix streaming.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speedometer\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 200 200\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"100\",\n            cy: \"100\",\n            r: \"70\",\n            fill: \"none\",\n            stroke: \"#1a1a1a\",\n            strokeWidth: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            className: testing || downloadSpeed ? 'gauge download-gauge' : '',\n            cx: \"100\",\n            cy: \"100\",\n            r: \"70\",\n            fill: \"none\",\n            stroke: \"#ff0000\",\n            strokeWidth: \"5\",\n            strokeDasharray: \"439.8\",\n            strokeDashoffset: testing ? '0' : downloadGaugeOffset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            className: testing || uploadSpeed ? 'gauge upload-gauge' : '',\n            cx: \"100\",\n            cy: \"100\",\n            r: \"65\",\n            fill: \"none\",\n            stroke: \"#ffffff\",\n            strokeWidth: \"5\",\n            strokeDasharray: \"408.4\",\n            strokeDashoffset: testing ? '0' : uploadGaugeOffset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), ticks, /*#__PURE__*/_jsxDEV(\"line\", {\n            className: testing || downloadSpeed || uploadSpeed ? 'needle' : '',\n            x1: \"100\",\n            y1: \"100\",\n            x2: \"100\",\n            y2: \"30\",\n            stroke: \"#ffffff\",\n            strokeWidth: \"4\",\n            style: {\n              transform: `rotate(${needleAngle}deg)`,\n              transformOrigin: '100px 100px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"speed-display\",\n          children: testing ? 'Testing...' : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [downloadSpeed && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Download: \", downloadSpeed, \" Mbps\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 35\n            }, this), uploadSpeed && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" | Upload: \", uploadSpeed, \" Mbps\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metrics\",\n        children: [latency && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Latency: \", latency, \" ms\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 23\n        }, this), downloadSpeed && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Download Speed: \", downloadSpeed, \" Mbps\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 29\n        }, this), uploadSpeed && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Upload Speed: \", uploadSpeed, \" Mbps\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runSpeedTest,\n        disabled: testing,\n        children: testing ? 'Testing...' : 'Run Speed Test'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Speed Test Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"speedChart\",\n          width: \"400\",\n          height: \"200\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Test History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Download (Mbps)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Upload (Mbps)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Latency (ms)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: history.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.downloadSpeed || '-'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.uploadSpeed || '-'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.latency || '-'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeedTest, \"SoVuQ/56bNRLWIWhPTLzsooYHfE=\");\n_c = SpeedTest;\nexport default SpeedTest;\nvar _c;\n$RefreshReg$(_c, \"SpeedTest\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","Header","Footer","jsxDEV","_jsxDEV","Fragment","_Fragment","SpeedTest","_s","downloadSpeed","setDownloadSpeed","uploadSpeed","setUploadSpeed","latency","setLatency","testing","setTesting","error","setError","history","setHistory","saved","localStorage","getItem","JSON","parse","chartData","setChartData","download","upload","setItem","stringify","_document$getElementB","ctx","document","getElementById","getContext","chart","type","data","labels","map","_","i","datasets","label","borderColor","backgroundColor","fill","options","scales","y","beginAtZero","title","display","text","x","destroy","runSpeedTest","pingStart","performance","now","get","pingEnd","pingMs","toFixed","console","log","downloadSamples","downloadSpeeds","startTime","response","responseType","endTime","duration","fileSize","size","speedMbps","push","parseFloat","prev","avgDownloadSpeed","reduce","a","b","length","uploadSamples","uploadSpeeds","fileSizeMB","fileData","Blob","ArrayBuffer","post","headers","avgUploadSpeed","result","timestamp","Date","toLocaleString","slice","err","downloadGaugeOffset","uploadGaugeOffset","needleAngle","ticks","isMajor","angle","rad","Math","PI","innerRadius","outerRadius","x1","cos","y1","sin","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","labelX","labelY","fontSize","textAnchor","dominantBaseline","children","className","viewBox","cx","cy","r","strokeDasharray","strokeDashoffset","style","transform","transformOrigin","onClick","disabled","id","width","height","entry","index","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/SpeedTest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport './SpeedTest.css';\r\n\r\nfunction SpeedTest() {\r\n  const [downloadSpeed, setDownloadSpeed] = useState(null);\r\n  const [uploadSpeed, setUploadSpeed] = useState(null);\r\n  const [latency, setLatency] = useState(null);\r\n  const [testing, setTesting] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [history, setHistory] = useState(() => {\r\n    const saved = localStorage.getItem('speedTestHistory');\r\n    return saved ? JSON.parse(saved) : [];\r\n  });\r\n  const [chartData, setChartData] = useState({ download: [], upload: [] });\r\n\r\n  // Update local storage when history changes\r\n  useEffect(() => {\r\n    localStorage.setItem('speedTestHistory', JSON.stringify(history));\r\n  }, [history]);\r\n\r\n  // Initialize chart\r\n  useEffect(() => {\r\n    const ctx = document.getElementById('speedChart')?.getContext('2d');\r\n    if (ctx) {\r\n      const chart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: chartData.download.map((_, i) => `Sample ${i + 1}`),\r\n          datasets: [\r\n            {\r\n              label: 'Download Speed (Mbps)',\r\n              data: chartData.download,\r\n              borderColor: '#ff0000',\r\n              backgroundColor: 'rgba(255, 0, 0, 0.2)',\r\n              fill: true,\r\n            },\r\n            {\r\n              label: 'Upload Speed (Mbps)',\r\n              data: chartData.upload,\r\n              borderColor: '#ffffff',\r\n              backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n              fill: true,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          scales: {\r\n            y: { beginAtZero: true, title: { display: true, text: 'Speed (Mbps)' } },\r\n            x: { title: { display: true, text: 'Sample' } },\r\n          },\r\n        },\r\n      });\r\n      return () => chart.destroy();\r\n    }\r\n  }, [chartData]);\r\n\r\n  const runSpeedTest = async () => {\r\n    setTesting(true);\r\n    setDownloadSpeed(null);\r\n    setUploadSpeed(null);\r\n    setLatency(null);\r\n    setError('');\r\n    setChartData({ download: [], upload: [] });\r\n\r\n    try {\r\n      // Measure latency (ping)\r\n      const pingStart = performance.now();\r\n      await axios.get('http://localhost:5001/');\r\n      const pingEnd = performance.now();\r\n      const pingMs = (pingEnd - pingStart).toFixed(2);\r\n      setLatency(pingMs);\r\n      console.log('Latency:', pingMs, 'ms');\r\n\r\n      // Download test\r\n      const downloadSamples = 3;\r\n      const downloadSpeeds = [];\r\n      for (let i = 0; i < downloadSamples; i++) {\r\n        const startTime = performance.now();\r\n        const response = await axios.get('http://localhost:3000/files/100MB.bin', {\r\n          responseType: 'blob',\r\n        });\r\n        const endTime = performance.now();\r\n        const duration = (endTime - startTime) / 1000; // seconds\r\n        const fileSize = response.data.size / 1024 / 1024; // MB\r\n        const speedMbps = (fileSize * 8 / duration).toFixed(2); // Mbps\r\n        downloadSpeeds.push(parseFloat(speedMbps));\r\n        setChartData((prev) => ({\r\n          download: [...prev.download, parseFloat(speedMbps)],\r\n          upload: prev.upload,\r\n        }));\r\n        console.log(`Download sample ${i + 1}: ${speedMbps} Mbps`);\r\n      }\r\n      const avgDownloadSpeed = (downloadSpeeds.reduce((a, b) => a + b, 0) / downloadSpeeds.length).toFixed(2);\r\n      setDownloadSpeed(avgDownloadSpeed);\r\n      console.log('Average Download Speed:', avgDownloadSpeed, 'Mbps');\r\n\r\n      // Upload test\r\n      const uploadSamples = 3;\r\n      const uploadSpeeds = [];\r\n      const fileSizeMB = 10; // 10MB\r\n      const fileData = new Blob([new ArrayBuffer(fileSizeMB * 1024 * 1024)], { type: 'application/octet-stream' });\r\n      for (let i = 0; i < uploadSamples; i++) {\r\n        const startTime = performance.now();\r\n        await axios.post('http://localhost:5001/upload', fileData, {\r\n          headers: { 'Content-Type': 'application/octet-stream' },\r\n        });\r\n        const endTime = performance.now();\r\n        const duration = (endTime - startTime) / 1000; // seconds\r\n        const speedMbps = (fileSizeMB * 8 / duration).toFixed(2); // Mbps\r\n        uploadSpeeds.push(parseFloat(speedMbps));\r\n        setChartData((prev) => ({\r\n          download: prev.download,\r\n          upload: [...prev.upload, parseFloat(speedMbps)],\r\n        }));\r\n        console.log(`Upload sample ${i + 1}: ${speedMbps} Mbps`);\r\n      }\r\n      const avgUploadSpeed = (uploadSpeeds.reduce((a, b) => a + b, 0) / uploadSpeeds.length).toFixed(2);\r\n      setUploadSpeed(avgUploadSpeed);\r\n      console.log('Average Upload Speed:', avgUploadSpeed, 'Mbps');\r\n\r\n      // Update history\r\n      const result = {\r\n        downloadSpeed: avgDownloadSpeed,\r\n        uploadSpeed: avgUploadSpeed,\r\n        latency: pingMs,\r\n        timestamp: new Date().toLocaleString(),\r\n      };\r\n      console.log('History entry:', result);\r\n      setHistory((prev) => [result, ...prev].slice(0, 5)); // Keep last 5 results\r\n    } catch (err) {\r\n      console.error('Speed test error:', err);\r\n      setError('Failed to run speed test.');\r\n    }\r\n    setTesting(false);\r\n  };\r\n\r\n  // Calculate needle rotation and gauge offsets (0-100 Mbps maps to 0-360 deg)\r\n  const downloadGaugeOffset = downloadSpeed ? (1 - parseFloat(downloadSpeed) / 100) * 439.8 : 439.8;\r\n  const uploadGaugeOffset = uploadSpeed ? (1 - parseFloat(uploadSpeed) / 100) * 439.8 : 439.8;\r\n  const needleAngle = testing\r\n    ? 0\r\n    : uploadSpeed\r\n      ? (parseFloat(uploadSpeed) / 100) * 360\r\n      : downloadSpeed\r\n        ? (parseFloat(downloadSpeed) / 100) * 360\r\n        : 0;\r\n\r\n  // Generate tick marks and labels\r\n  const ticks = [];\r\n  for (let i = 0; i <= 100; i += 5) {\r\n    const isMajor = i % 20 === 0;\r\n    const angle = (i / 100) * 360;\r\n    const rad = (angle * Math.PI) / 180;\r\n    const innerRadius = isMajor ? 55 : 60;\r\n    const outerRadius = isMajor ? 45 : 50;\r\n    const x1 = 100 + innerRadius * Math.cos(rad);\r\n    const y1 = 100 + innerRadius * Math.sin(rad);\r\n    const x2 = 100 + outerRadius * Math.cos(rad);\r\n    const y2 = 100 + outerRadius * Math.sin(rad);\r\n    ticks.push(\r\n      <line\r\n        key={`tick-${i}`}\r\n        x1={x1}\r\n        y1={y1}\r\n        x2={x2}\r\n        y2={y2}\r\n        stroke=\"#ffffff\"\r\n        strokeWidth={isMajor ? 2 : 1}\r\n      />\r\n    );\r\n    if (isMajor) {\r\n      const labelX = 100 + 35 * Math.cos(rad);\r\n      const labelY = 100 + 35 * Math.sin(rad);\r\n      ticks.push(\r\n        <text\r\n          key={`label-${i}`}\r\n          x={labelX}\r\n          y={labelY}\r\n          fill=\"#ffffff\"\r\n          fontSize=\"10\"\r\n          textAnchor=\"middle\"\r\n          dominantBaseline=\"middle\"\r\n        >\r\n          {i}\r\n        </text>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"speed-test\">\r\n      <Header />\r\n      <main>\r\n        <h1>Speed Test</h1>\r\n        <p>Test your internet speed for optimal StreamFlix streaming.</p>\r\n        <div className=\"speedometer\">\r\n          <svg viewBox=\"0 0 200 200\">\r\n            <circle\r\n              cx=\"100\"\r\n              cy=\"100\"\r\n              r=\"70\"\r\n              fill=\"none\"\r\n              stroke=\"#1a1a1a\"\r\n              strokeWidth=\"10\"\r\n            />\r\n            <circle\r\n              className={testing || downloadSpeed ? 'gauge download-gauge' : ''}\r\n              cx=\"100\"\r\n              cy=\"100\"\r\n              r=\"70\"\r\n              fill=\"none\"\r\n              stroke=\"#ff0000\"\r\n              strokeWidth=\"5\"\r\n              strokeDasharray=\"439.8\"\r\n              strokeDashoffset={testing ? '0' : downloadGaugeOffset}\r\n            />\r\n            <circle\r\n              className={testing || uploadSpeed ? 'gauge upload-gauge' : ''}\r\n              cx=\"100\"\r\n              cy=\"100\"\r\n              r=\"65\"\r\n              fill=\"none\"\r\n              stroke=\"#ffffff\"\r\n              strokeWidth=\"5\"\r\n              strokeDasharray=\"408.4\"\r\n              strokeDashoffset={testing ? '0' : uploadGaugeOffset}\r\n            />\r\n            {ticks}\r\n            <line\r\n              className={testing || downloadSpeed || uploadSpeed ? 'needle' : ''}\r\n              x1=\"100\"\r\n              y1=\"100\"\r\n              x2=\"100\"\r\n              y2=\"30\"\r\n              stroke=\"#ffffff\"\r\n              strokeWidth=\"4\"\r\n              style={{ transform: `rotate(${needleAngle}deg)`, transformOrigin: '100px 100px' }}\r\n            />\r\n          </svg>\r\n          <div className=\"speed-display\">\r\n            {testing ? 'Testing...' : (\r\n              <>\r\n                {downloadSpeed && <span>Download: {downloadSpeed} Mbps</span>}\r\n                {uploadSpeed && <span> | Upload: {uploadSpeed} Mbps</span>}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"metrics\">\r\n          {latency && <p>Latency: {latency} ms</p>}\r\n          {downloadSpeed && <p>Download Speed: {downloadSpeed} Mbps</p>}\r\n          {uploadSpeed && <p>Upload Speed: {uploadSpeed} Mbps</p>}\r\n        </div>\r\n        <button onClick={runSpeedTest} disabled={testing}>\r\n          {testing ? 'Testing...' : 'Run Speed Test'}\r\n        </button>\r\n        {error && <p className=\"error\">{error}</p>}\r\n        <div className=\"chart-container\">\r\n          <h3>Speed Test Results</h3>\r\n          <canvas id=\"speedChart\" width=\"400\" height=\"200\"></canvas>\r\n        </div>\r\n        {history.length > 0 && (\r\n          <div className=\"history\">\r\n            <h3>Test History</h3>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Date</th>\r\n                  <th>Download (Mbps)</th>\r\n                  <th>Upload (Mbps)</th>\r\n                  <th>Latency (ms)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {history.map((entry, index) => (\r\n                  <tr key={index}>\r\n                    <td>{entry.timestamp}</td>\r\n                    <td>{entry.downloadSpeed || '-'}</td>\r\n                    <td>{entry.uploadSpeed || '-'}</td>\r\n                    <td>{entry.latency || '-'}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpeedTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}