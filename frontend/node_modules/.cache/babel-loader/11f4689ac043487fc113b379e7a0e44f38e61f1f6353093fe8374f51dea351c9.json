{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Import posters\nimport kalkiPoster from '../data/Kalki.jpg';\nimport salaarPoster from '../data/salaar.jpg';\nimport chaavaPoster from '../data/chaava.jpg';\nimport rrrPoster from '../data/rrr.jpg';\nimport pushpa2Poster from '../data/pushpa2.jpg';\nimport hiNannaPoster from '../data/hinanna.jpg';\nimport mad2Poster from '../data/mad2.jpg';\nimport courtPoster from '../data/court.jpg';\nimport dragonPoster from '../data/rod.jpg';\nimport saripodaPoster from '../data/ss.jpg';\nimport saahoPoster from '../data/saaho.jpg';\nimport baahubaliPoster from '../data/bb2.jpg';\nimport blackPoster from '../data/court.jpg'; // Import black.jpg\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState({});\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n  const staticMoviesWithLocalPosters = {\n    \"Chaava\": chaavaPoster,\n    \"Mad2\": mad2Poster,\n    \"Saripoda Sanivaaram\": saripodaPoster\n  };\n  const featuredItem = {\n    id: 271726,\n    title: \"Baahubali: The Beginning\",\n    description: \"A Telugu epic about valor and sacrifice.\",\n    thumbnail: baahubaliPoster,\n    video: \"/videos/bb2.mp4\"\n  };\n  const initialRowsData = [{\n    title: \"Trending Movies\",\n    items: [{\n      id: 900352,\n      title: \"Kalki 2898 AD\",\n      thumbnail: kalkiPoster,\n      description: \"A sci-fi epic set in a dystopian future.\"\n    }, {\n      id: 934632,\n      title: \"Salaar\",\n      thumbnail: salaarPoster,\n      description: \"An action-packed saga of power and betrayal.\"\n    }, {\n      id: 0,\n      title: \"Chaava\",\n      thumbnail: chaavaPoster,\n      description: \"A historical drama about bravery.\",\n      isStatic: true\n    }, {\n      id: 614933,\n      title: \"RRR\",\n      thumbnail: rrrPoster,\n      description: \"A revolutionary tale of friendship and rebellion.\"\n    }, {\n      id: 614934,\n      title: \"Pushpa 2: The Rule\",\n      thumbnail: pushpa2Poster,\n      description: \"A gripping sequel to the smuggling saga.\"\n    }, {\n      id: 1121402,\n      title: \"Hi Nanna\",\n      thumbnail: hiNannaPoster,\n      description: \"A heartwarming family drama.\"\n    }, {\n      id: 1,\n      title: \"Mad2\",\n      thumbnail: mad2Poster,\n      description: \"A thrilling continuation of mystery.\",\n      isStatic: true\n    }, {\n      id: 297282,\n      title: \"Court\",\n      thumbnail: courtPoster,\n      description: \"A thought-provoking legal drama.\"\n    }, {\n      id: 1560,\n      title: \"Return of the Dragon\",\n      thumbnail: dragonPoster,\n      description: \"A classic martial arts adventure.\"\n    }, {\n      id: 2,\n      title: \"Saripoda Sanivaaram\",\n      thumbnail: saripodaPoster,\n      description: \"An intense vigilante story.\",\n      isStatic: true\n    }, {\n      id: 614932,\n      title: \"Saaho\",\n      thumbnail: saahoPoster,\n      description: \"A high-octane action thriller.\"\n    }]\n  }, {\n    title: \"Watch It Again\",\n    items: [{\n      id: 5,\n      title: \"Inception\",\n      thumbnail: null,\n      description: \"A mind-bending heist movie.\"\n    }, {\n      id: 6,\n      title: \"Titanic\",\n      thumbnail: null,\n      description: \"A romantic disaster film.\"\n    }]\n  }];\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n    console.log('Favorites saved to localStorage:', favorites);\n  }, [favorites]);\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        console.log('Removing from favorites:', item.title);\n        const updatedFavorites = prevFavorites.filter(fav => fav.id !== item.id);\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return updatedFavorites;\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        console.log('Adding to favorites:', item.title);\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        const updatedRows = await Promise.all(initialRowsData.map(async row => {\n          const updatedItems = await Promise.all(row.items.map(async item => {\n            if (item.thumbnail || item.isStatic) return item;\n            try {\n              const response = await fetch('http://localhost:5000/recommend', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  movie_title: item.title\n                })\n              });\n              const data = await response.json();\n              if (response.ok && data.length > 0 && data[0].poster) {\n                return {\n                  ...item,\n                  thumbnail: data[0].poster\n                };\n              }\n              return {\n                ...item,\n                thumbnail: blackPoster\n              }; // Use black.jpg\n            } catch (err) {\n              console.error(`Failed to fetch poster for ${item.title}:`, err);\n              return {\n                ...item,\n                thumbnail: blackPoster\n              }; // Use black.jpg\n            }\n          }));\n          return {\n            ...row,\n            items: updatedItems\n          };\n        }));\n        setInitialRows(updatedRows);\n        await fetchRecommendations(\"Baahubali: The Beginning\");\n      } catch (err) {\n        setError('Failed to fetch initial data');\n        console.error('Initial fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n  const fetchRecommendations = async movieTitle => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      const data = await response.json();\n      console.log(`Response for /recommend: status ${response.status}, data:`, data);\n      if (response.ok && Array.isArray(data) && data.length > 0) {\n        const mappedRecommendations = data.map((rec, i) => ({\n          id: i + 100,\n          title: rec.title,\n          thumbnail: rec.poster || blackPoster,\n          // Use black.jpg\n          description: `Language: ${rec.original_language || 'N/A'}, Genres: ${rec.genres || 'N/A'}`\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: mappedRecommendations\n        }));\n      } else {\n        console.log(`No valid data from /recommend for \"${movieTitle}\", falling back to /random-telugu...`);\n        await fetchRandomTeluguRecommendations(movieTitle);\n      }\n    } catch (err) {\n      console.error(`Network error for \"${movieTitle}\":`, err);\n      await fetchRandomTeluguRecommendations(movieTitle);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchRandomTeluguRecommendations = async movieTitle => {\n    try {\n      console.log(`Attempting fetch from /random-telugu for \"${movieTitle}\" with GET...`);\n      const response = await fetch('http://localhost:5000/random-telugu', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(`/random-telugu response: status ${response.status}, statusText: ${response.statusText}, data:`, await response.clone().json());\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        console.log(`Received ${data.length} random Telugu recommendations for \"${movieTitle}\":`, data);\n        const randomRecommendations = data.map((rec, i) => {\n          console.log(`Processing recommendation ${i}:`, rec);\n          const poster = rec.poster || blackPoster; // Use black.jpg\n          console.log(`Poster for ${rec.title}:`, poster);\n          return {\n            id: i + 200,\n            title: rec.title,\n            thumbnail: poster,\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`\n          };\n        });\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: randomRecommendations\n        }));\n      } else {\n        throw new Error('Invalid data format from /random-telugu endpoint');\n      }\n    } catch (err) {\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\n      setError(`Network error fetching random recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    }\n  };\n  const handleMoreInfo = item => {\n    const updatedItem = {\n      ...item\n    };\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\n    }\n    setSelectedItem(updatedItem);\n    fetchRecommendations(item.title);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"S2Hei3njckYK+XvAmANMcJbb7vc=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Header","Hero","Row","Modal","Footer","kalkiPoster","salaarPoster","chaavaPoster","rrrPoster","pushpa2Poster","hiNannaPoster","mad2Poster","courtPoster","dragonPoster","saripodaPoster","saahoPoster","baahubaliPoster","blackPoster","jsxDEV","_jsxDEV","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","JSON","parse","localStorage","getItem","notification","setNotification","staticMoviesWithLocalPosters","featuredItem","id","title","description","thumbnail","video","initialRowsData","items","isStatic","window","scrollTo","setItem","stringify","console","log","toggleFavorite","item","prevFavorites","isFavorited","some","fav","updatedFavorites","filter","setTimeout","fetchInitialData","updatedRows","Promise","all","map","row","updatedItems","response","fetch","method","headers","body","movie_title","data","json","ok","length","poster","err","fetchRecommendations","movieTitle","status","Array","isArray","mappedRecommendations","rec","i","original_language","genres","prev","fetchRandomTeluguRecommendations","statusText","clone","Error","randomRecommendations","message","handleMoreInfo","updatedItem","className","children","onMoreInfo","fileName","_jsxFileName","lineNumber","columnNumber","index","Object","entries","recs","keys","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Import posters\r\nimport kalkiPoster from '../data/Kalki.jpg';\r\nimport salaarPoster from '../data/salaar.jpg';\r\nimport chaavaPoster from '../data/chaava.jpg';\r\nimport rrrPoster from '../data/rrr.jpg';\r\nimport pushpa2Poster from '../data/pushpa2.jpg';\r\nimport hiNannaPoster from '../data/hinanna.jpg';\r\nimport mad2Poster from '../data/mad2.jpg';\r\nimport courtPoster from '../data/court.jpg';\r\nimport dragonPoster from '../data/rod.jpg';\r\nimport saripodaPoster from '../data/ss.jpg';\r\nimport saahoPoster from '../data/saaho.jpg';\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\nimport blackPoster from '../data/court.jpg'; // Import black.jpg\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState({});\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\r\n  const [notification, setNotification] = useState('');\r\n\r\n  const staticMoviesWithLocalPosters = {\r\n    \"Chaava\": chaavaPoster,\r\n    \"Mad2\": mad2Poster,\r\n    \"Saripoda Sanivaaram\": saripodaPoster,\r\n  };\r\n\r\n  const featuredItem = {\r\n    id: 271726,\r\n    title: \"Baahubali: The Beginning\",\r\n    description: \"A Telugu epic about valor and sacrifice.\",\r\n    thumbnail: baahubaliPoster,\r\n    video: \"/videos/bb2.mp4\"\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: \"Trending Movies\",\r\n      items: [\r\n        { id: 900352, title: \"Kalki 2898 AD\", thumbnail: kalkiPoster, description: \"A sci-fi epic set in a dystopian future.\" },\r\n        { id: 934632, title: \"Salaar\", thumbnail: salaarPoster, description: \"An action-packed saga of power and betrayal.\" },\r\n        { id: 0, title: \"Chaava\", thumbnail: chaavaPoster, description: \"A historical drama about bravery.\", isStatic: true },\r\n        { id: 614933, title: \"RRR\", thumbnail: rrrPoster, description: \"A revolutionary tale of friendship and rebellion.\" },\r\n        { id: 614934, title: \"Pushpa 2: The Rule\", thumbnail: pushpa2Poster, description: \"A gripping sequel to the smuggling saga.\" },\r\n        { id: 1121402, title: \"Hi Nanna\", thumbnail: hiNannaPoster, description: \"A heartwarming family drama.\" },\r\n        { id: 1, title: \"Mad2\", thumbnail: mad2Poster, description: \"A thrilling continuation of mystery.\", isStatic: true },\r\n        { id: 297282, title: \"Court\", thumbnail: courtPoster, description: \"A thought-provoking legal drama.\" },\r\n        { id: 1560, title: \"Return of the Dragon\", thumbnail: dragonPoster, description: \"A classic martial arts adventure.\" },\r\n        { id: 2, title: \"Saripoda Sanivaaram\", thumbnail: saripodaPoster, description: \"An intense vigilante story.\", isStatic: true },\r\n        { id: 614932, title: \"Saaho\", thumbnail: saahoPoster, description: \"A high-octane action thriller.\" },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Watch It Again\",\r\n      items: [\r\n        { id: 5, title: \"Inception\", thumbnail: null, description: \"A mind-bending heist movie.\" },\r\n        { id: 6, title: \"Titanic\", thumbnail: null, description: \"A romantic disaster film.\" },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n    console.log('Favorites saved to localStorage:', favorites);\r\n  }, [favorites]);\r\n\r\n  const toggleFavorite = (item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        console.log('Removing from favorites:', item.title);\r\n        const updatedFavorites = prevFavorites.filter((fav) => fav.id !== item.id);\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return updatedFavorites;\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        console.log('Adding to favorites:', item.title);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const updatedRows = await Promise.all(\r\n          initialRowsData.map(async (row) => {\r\n            const updatedItems = await Promise.all(\r\n              row.items.map(async (item) => {\r\n                if (item.thumbnail || item.isStatic) return item;\r\n                try {\r\n                  const response = await fetch('http://localhost:5000/recommend', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ movie_title: item.title }),\r\n                  });\r\n                  const data = await response.json();\r\n                  if (response.ok && data.length > 0 && data[0].poster) {\r\n                    return { ...item, thumbnail: data[0].poster };\r\n                  }\r\n                  return { ...item, thumbnail: blackPoster }; // Use black.jpg\r\n                } catch (err) {\r\n                  console.error(`Failed to fetch poster for ${item.title}:`, err);\r\n                  return { ...item, thumbnail: blackPoster }; // Use black.jpg\r\n                }\r\n              })\r\n            );\r\n            return { ...row, items: updatedItems };\r\n          })\r\n        );\r\n        setInitialRows(updatedRows);\r\n        await fetchRecommendations(\"Baahubali: The Beginning\");\r\n      } catch (err) {\r\n        setError('Failed to fetch initial data');\r\n        console.error('Initial fetch error:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, []);\r\n\r\n  const fetchRecommendations = async (movieTitle) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(`Response for /recommend: status ${response.status}, data:`, data);\r\n      if (response.ok && Array.isArray(data) && data.length > 0) {\r\n        const mappedRecommendations = data.map((rec, i) => ({\r\n          id: i + 100,\r\n          title: rec.title,\r\n          thumbnail: rec.poster || blackPoster, // Use black.jpg\r\n          description: `Language: ${rec.original_language || 'N/A'}, Genres: ${rec.genres || 'N/A'}`,\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: mappedRecommendations }));\r\n      } else {\r\n        console.log(`No valid data from /recommend for \"${movieTitle}\", falling back to /random-telugu...`);\r\n        await fetchRandomTeluguRecommendations(movieTitle);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Network error for \"${movieTitle}\":`, err);\r\n      await fetchRandomTeluguRecommendations(movieTitle);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRandomTeluguRecommendations = async (movieTitle) => {\r\n    try {\r\n      console.log(`Attempting fetch from /random-telugu for \"${movieTitle}\" with GET...`);\r\n      const response = await fetch('http://localhost:5000/random-telugu', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n      console.log(`/random-telugu response: status ${response.status}, statusText: ${response.statusText}, data:`, await response.clone().json());\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        console.log(`Received ${data.length} random Telugu recommendations for \"${movieTitle}\":`, data);\r\n        const randomRecommendations = data.map((rec, i) => {\r\n          console.log(`Processing recommendation ${i}:`, rec);\r\n          const poster = rec.poster || blackPoster; // Use black.jpg\r\n          console.log(`Poster for ${rec.title}:`, poster);\r\n          return {\r\n            id: i + 200,\r\n            title: rec.title,\r\n            thumbnail: poster,\r\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n          };\r\n        });\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: randomRecommendations }));\r\n      } else {\r\n        throw new Error('Invalid data format from /random-telugu endpoint');\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\r\n      setError(`Network error fetching random recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    }\r\n  };\r\n\r\n  const handleMoreInfo = (item) => {\r\n    const updatedItem = { ...item };\r\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\r\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\r\n    }\r\n    setSelectedItem(updatedItem);\r\n    fetchRecommendations(item.title);\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      {/* <Header /> */}\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites || []}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}