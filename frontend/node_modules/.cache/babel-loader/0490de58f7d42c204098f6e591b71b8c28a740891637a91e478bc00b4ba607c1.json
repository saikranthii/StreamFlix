{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Import posters\nimport kalkiPoster from '../data/Kalki.jpg';\nimport salaarPoster from '../data/salaar.jpg';\nimport chaavaPoster from '../data/chaava.jpg';\nimport rrrPoster from '../data/rrr.jpg';\nimport pushpa2Poster from '../data/pushpa2.jpg';\nimport hiNannaPoster from '../data/hinanna.jpg';\nimport mad2Poster from '../data/mad2.jpg';\nimport courtPoster from '../data/court.jpg';\nimport dragonPoster from '../data/rod.jpg';\nimport saripodaPoster from '../data/ss.jpg';\nimport saahoPoster from '../data/saaho.jpg';\nimport baahubaliPoster from '../data/bb2.jpg';\nimport blackPoster from '../data/black.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState(() => JSON.parse(sessionStorage.getItem('recommendations') || '{}'));\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n  const staticMoviesWithLocalPosters = {\n    \"Chaava\": chaavaPoster,\n    \"Mad2\": mad2Poster,\n    \"Saripoda Sanivaaram\": saripodaPoster\n  };\n  const featuredItem = {\n    id: 271726,\n    title: \"Baahubali: The Beginning\",\n    description: \"A Telugu epic about valor and sacrifice.\",\n    thumbnail: baahubaliPoster,\n    video: \"/videos/bb2.mp4\",\n    language: \"te\"\n  };\n  const initialRowsData = [{\n    title: \"Trending Movies\",\n    items: [{\n      id: 900352,\n      title: \"Kalki 2898 AD\",\n      thumbnail: kalkiPoster,\n      description: \"A sci-fi epic set in a dystopian future.\",\n      language: \"te\"\n    }, {\n      id: 934632,\n      title: \"Salaar\",\n      thumbnail: salaarPoster,\n      description: \"An action-packed saga of power and betrayal.\",\n      language: \"te\"\n    }, {\n      id: 0,\n      title: \"Chaava\",\n      thumbnail: chaavaPoster,\n      description: \"A historical drama about bravery.\",\n      isStatic: true,\n      language: \"te\"\n    }, {\n      id: 614933,\n      title: \"RRR\",\n      thumbnail: rrrPoster,\n      description: \"A revolutionary tale of friendship and rebellion.\",\n      language: \"te\"\n    }, {\n      id: 614934,\n      title: \"Pushpa 2: The Rule\",\n      thumbnail: pushpa2Poster,\n      description: \"A gripping sequel to the smuggling saga.\",\n      language: \"te\"\n    }, {\n      id: 1121402,\n      title: \"Hi Nanna\",\n      thumbnail: hiNannaPoster,\n      description: \"A heartwarming family drama.\",\n      language: \"te\"\n    }, {\n      id: 1,\n      title: \"Mad2\",\n      thumbnail: mad2Poster,\n      description: \"A thrilling continuation of mystery.\",\n      isStatic: true,\n      language: \"te\"\n    }, {\n      id: 297282,\n      title: \"Court\",\n      thumbnail: courtPoster,\n      description: \"A thought-provoking legal drama.\",\n      language: \"te\"\n    }, {\n      id: 1560,\n      title: \"Return of the Dragon\",\n      thumbnail: dragonPoster,\n      description: \"A classic martial arts adventure.\",\n      language: \"te\"\n    }, {\n      id: 614932,\n      title: \"Saaho\",\n      thumbnail: saahoPoster,\n      description: \"A high-octane action thriller.\",\n      language: \"te\"\n    }, {\n      id: 2,\n      title: \"Saripoda Sanivaaram\",\n      thumbnail: saripodaPoster,\n      description: \"An intense vigilante story.\",\n      isStatic: true,\n      language: \"te\"\n    }]\n  }, {\n    title: \"Watch It Again\",\n    items: [{\n      id: 5,\n      title: \"Inception\",\n      thumbnail: blackPoster,\n      description: \"A mind-bending heist movie.\",\n      language: \"en\"\n    }, {\n      id: 6,\n      title: \"Titanic\",\n      thumbnail: blackPoster,\n      description: \"A romantic disaster film.\",\n      language: \"en\"\n    }]\n  }];\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n    console.log('Favorites saved to localStorage:', favorites);\n  }, [favorites]);\n  useEffect(() => {\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\n    console.log('Recommendations saved to sessionStorage:', recommendations);\n  }, [recommendations]);\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        console.log('Removing from favorites:', item.title);\n        const updatedFavorites = prevFavorites.filter(fav => fav.id !== item.id);\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return updatedFavorites;\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        console.log('Adding to favorites:', item.title);\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\n    // Check if recommendations already exist in state/sessionStorage\n    if (recommendations[movieTitle] && recommendations[movieTitle].length > 0) {\n      console.log(`Using existing recommendations for \"${movieTitle}\" from sessionStorage:`, recommendations[movieTitle]);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/random-telugu', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(`/random-telugu response: status ${response.status}, statusText: ${response.statusText}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        console.log(`Received ${data.length} random Telugu recommendations for \"${movieTitle}\":`, data);\n        // Remove duplicates based on title\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\n        // Filter out items with invalid posters\n        const validData = uniqueData.filter(item => {\n          const isValidPoster = item.poster && typeof item.poster === 'string' && item.poster.trim() !== '' && item.poster !== 'N/A' && item.poster.match(/\\.(jpg|jpeg|png|gif)$/i);\n          if (!isValidPoster) {\n            console.warn(`Invalid poster for \"${item.title}\":`, item.poster);\n          }\n          return isValidPoster;\n        });\n        console.log(`After filtering invalid posters, ${validData.length} valid recommendations for \"${movieTitle}\":`, validData);\n        // Pick numMovies items (no shuffling for consistency)\n        const selectedRecommendations = validData.slice(0, Math.min(numMovies, validData.length)).map((rec, i) => {\n          console.log(`Processing recommendation ${i}:`, rec);\n          const poster = rec.poster || blackPoster;\n          console.log(`Poster for ${rec.title}:`, poster);\n          return {\n            id: i + 200,\n            title: rec.title,\n            thumbnail: poster,\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n            language: \"te\"\n          };\n        });\n        // If no valid recommendations after filtering, use fallback\n        if (selectedRecommendations.length === 0) {\n          console.warn(`No valid recommendations for \"${movieTitle}\" after filtering, setting empty array`);\n          setRecommendations(prev => ({\n            ...prev,\n            [movieTitle]: []\n          }));\n        } else {\n          setRecommendations(prev => ({\n            ...prev,\n            [movieTitle]: selectedRecommendations\n          }));\n        }\n      } else {\n        throw new Error('Invalid data format from /random-telugu endpoint');\n      }\n    } catch (err) {\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\n      setError(`Network error fetching random recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPosterForMovie = async movieTitle => {\n    try {\n      console.log(`Fetching poster for \"${movieTitle}\" via /recommend endpoint...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      if (!response.ok) {\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}, ${response.statusText}`);\n        return blackPoster;\n      }\n      const data = await response.json();\n      console.log(`Poster fetch response for \"${movieTitle}\":`, data);\n      if (Array.isArray(data) && data.length > 0) {\n        const firstMovie = data[0];\n        if (firstMovie.poster && typeof firstMovie.poster === 'string' && firstMovie.poster.trim() !== '' && firstMovie.poster !== 'N/A' && firstMovie.poster.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n          console.log(`Valid poster found for \"${movieTitle}\":`, firstMovie.poster);\n          return firstMovie.poster;\n        } else {\n          console.warn(`No valid poster field in response for \"${movieTitle}\":`, firstMovie);\n          return blackPoster;\n        }\n      } else {\n        console.warn(`Empty or invalid response for \"${movieTitle}\" when fetching poster`);\n        return blackPoster;\n      }\n    } catch (err) {\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err);\n      return blackPoster;\n    }\n  };\n  const fetchRecommendations = async movieTitle => {\n    // Check if recommendations already exist in state/sessionStorage\n    if (recommendations[movieTitle] && recommendations[movieTitle].length > 0) {\n      console.log(`Using existing recommendations for \"${movieTitle}\" from sessionStorage:`, recommendations[movieTitle]);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      const data = await response.json();\n      console.log(`Response for /recommend: status ${response.status}, data:`, data);\n      if (response.ok && Array.isArray(data) && data.length > 0) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        console.log(`After removing duplicates, ${uniqueData.length} unique recommendations for \"${movieTitle}\":`, uniqueData);\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n        console.log(`Selecting ${numRecs} recommendations for \"${movieTitle}\"...`);\n        const selectedRecommendations = uniqueData.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => {\n          const poster = rec.poster && typeof rec.poster === 'string' && rec.poster.trim() !== '' && rec.poster !== 'N/A' && rec.poster.match(/\\.(jpg|jpeg|png|gif)$/i) ? rec.poster : blackPoster;\n          console.log(`Poster for ${rec.title}:`, poster);\n          if (!rec.poster || rec.poster === 'N/A') {\n            console.warn(`No valid poster for ${rec.title}, using blackPoster`);\n          }\n          return {\n            id: i + 100,\n            title: rec.title,\n            thumbnail: poster,\n            description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\n            language: rec.original_language || 'en'\n          };\n        });\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        console.log(`No valid data from /recommend for \"${movieTitle}\"`);\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: []\n        }));\n      }\n    } catch (err) {\n      console.error(`Network error for \"${movieTitle}\":`, err);\n      setError(`Network error fetching recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\n        for (const row of updatedRows) {\n          if (row.title === \"Watch It Again\") {\n            for (const item of row.items) {\n              if (item.language === \"en\") {\n                const poster = await fetchPosterForMovie(item.title);\n                item.thumbnail = poster;\n              }\n            }\n          }\n        }\n        setInitialRows(updatedRows);\n        if (featuredItem.language === \"te\") {\n          const numRecsForBaahubali = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n          await fetchRandomTeluguRecommendations(featuredItem.title, numRecsForBaahubali);\n        }\n      } catch (err) {\n        setError('Failed to fetch initial data');\n        console.error('Initial fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n  const handleMoreInfo = item => {\n    const updatedItem = {\n      ...item\n    };\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\n    }\n    setSelectedItem(updatedItem);\n    if (item.language === \"te\") {\n      const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n      fetchRandomTeluguRecommendations(item.title, numRecs);\n    } else {\n      fetchRecommendations(item.title);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"UukV9XcCaH+bHKOiFpoFq3WLwAQ=\");\n_c = Home;\nexport default Home;\nu;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Header","Hero","Row","Modal","Footer","kalkiPoster","salaarPoster","chaavaPoster","rrrPoster","pushpa2Poster","hiNannaPoster","mad2Poster","courtPoster","dragonPoster","saripodaPoster","saahoPoster","baahubaliPoster","blackPoster","jsxDEV","_jsxDEV","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","JSON","parse","sessionStorage","getItem","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","localStorage","notification","setNotification","staticMoviesWithLocalPosters","featuredItem","id","title","description","thumbnail","video","language","initialRowsData","items","isStatic","window","scrollTo","setItem","stringify","console","log","toggleFavorite","item","prevFavorites","isFavorited","some","fav","updatedFavorites","filter","setTimeout","fetchRandomTeluguRecommendations","movieTitle","numMovies","length","response","fetch","method","headers","status","statusText","ok","Error","data","json","Array","isArray","uniqueData","from","Map","map","toLowerCase","values","validData","isValidPoster","poster","trim","match","warn","selectedRecommendations","slice","Math","min","rec","i","original_language","genres","prev","err","message","fetchPosterForMovie","body","movie_title","firstMovie","fetchRecommendations","numRecs","floor","random","fetchInitialData","updatedRows","row","numRecsForBaahubali","handleMoreInfo","updatedItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onMoreInfo","index","Object","entries","recs","keys","onClose","_c","u","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Import posters\r\nimport kalkiPoster from '../data/Kalki.jpg';\r\nimport salaarPoster from '../data/salaar.jpg';\r\nimport chaavaPoster from '../data/chaava.jpg';\r\nimport rrrPoster from '../data/rrr.jpg';\r\nimport pushpa2Poster from '../data/pushpa2.jpg';\r\nimport hiNannaPoster from '../data/hinanna.jpg';\r\nimport mad2Poster from '../data/mad2.jpg';\r\nimport courtPoster from '../data/court.jpg';\r\nimport dragonPoster from '../data/rod.jpg';\r\nimport saripodaPoster from '../data/ss.jpg';\r\nimport saahoPoster from '../data/saaho.jpg';\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\nimport blackPoster from '../data/black.jpg';\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState(() => \r\n    JSON.parse(sessionStorage.getItem('recommendations') || '{}')\r\n  );\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() => \r\n    JSON.parse(localStorage.getItem('myList') || '[]')\r\n  );\r\n  const [notification, setNotification] = useState('');\r\n\r\n  const staticMoviesWithLocalPosters = {\r\n    \"Chaava\": chaavaPoster,\r\n    \"Mad2\": mad2Poster,\r\n    \"Saripoda Sanivaaram\": saripodaPoster,\r\n  };\r\n\r\n  const featuredItem = {\r\n    id: 271726,\r\n    title: \"Baahubali: The Beginning\",\r\n    description: \"A Telugu epic about valor and sacrifice.\",\r\n    thumbnail: baahubaliPoster,\r\n    video: \"/videos/bb2.mp4\",\r\n    language: \"te\"\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: \"Trending Movies\",\r\n      items: [\r\n        { id: 900352, title: \"Kalki 2898 AD\", thumbnail: kalkiPoster, description: \"A sci-fi epic set in a dystopian future.\", language: \"te\" },\r\n        { id: 934632, title: \"Salaar\", thumbnail: salaarPoster, description: \"An action-packed saga of power and betrayal.\", language: \"te\" },\r\n        { id: 0, title: \"Chaava\", thumbnail: chaavaPoster, description: \"A historical drama about bravery.\", isStatic: true, language: \"te\" },\r\n        { id: 614933, title: \"RRR\", thumbnail: rrrPoster, description: \"A revolutionary tale of friendship and rebellion.\", language: \"te\" },\r\n        { id: 614934, title: \"Pushpa 2: The Rule\", thumbnail: pushpa2Poster, description: \"A gripping sequel to the smuggling saga.\", language: \"te\" },\r\n        { id: 1121402, title: \"Hi Nanna\", thumbnail: hiNannaPoster, description: \"A heartwarming family drama.\", language: \"te\" },\r\n        { id: 1, title: \"Mad2\", thumbnail: mad2Poster, description: \"A thrilling continuation of mystery.\", isStatic: true, language: \"te\" },\r\n        { id: 297282, title: \"Court\", thumbnail: courtPoster, description: \"A thought-provoking legal drama.\", language: \"te\" },\r\n        { id: 1560, title: \"Return of the Dragon\", thumbnail: dragonPoster, description: \"A classic martial arts adventure.\", language: \"te\" },\r\n        { id: 614932, title: \"Saaho\", thumbnail: saahoPoster, description: \"A high-octane action thriller.\", language: \"te\" },\r\n        { id: 2, title: \"Saripoda Sanivaaram\", thumbnail: saripodaPoster, description: \"An intense vigilante story.\", isStatic: true, language: \"te\" },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Watch It Again\",\r\n      items: [\r\n        { id: 5, title: \"Inception\", thumbnail: blackPoster, description: \"A mind-bending heist movie.\", language: \"en\" },\r\n        { id: 6, title: \"Titanic\", thumbnail: blackPoster, description: \"A romantic disaster film.\", language: \"en\" },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n    console.log('Favorites saved to localStorage:', favorites);\r\n  }, [favorites]);\r\n\r\n  useEffect(() => {\r\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\r\n    console.log('Recommendations saved to sessionStorage:', recommendations);\r\n  }, [recommendations]);\r\n\r\n  const toggleFavorite = (item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        console.log('Removing from favorites:', item.title);\r\n        const updatedFavorites = prevFavorites.filter((fav) => fav.id !== item.id);\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return updatedFavorites;\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        console.log('Adding to favorites:', item.title);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\r\n    // Check if recommendations already exist in state/sessionStorage\r\n    if (recommendations[movieTitle] && recommendations[movieTitle].length > 0) {\r\n      console.log(`Using existing recommendations for \"${movieTitle}\" from sessionStorage:`, recommendations[movieTitle]);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/random-telugu', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n      console.log(`/random-telugu response: status ${response.status}, statusText: ${response.statusText}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        console.log(`Received ${data.length} random Telugu recommendations for \"${movieTitle}\":`, data);\r\n        // Remove duplicates based on title\r\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\r\n        console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\r\n        // Filter out items with invalid posters\r\n        const validData = uniqueData.filter(item => {\r\n          const isValidPoster = item.poster && typeof item.poster === 'string' && item.poster.trim() !== '' && item.poster !== 'N/A' && item.poster.match(/\\.(jpg|jpeg|png|gif)$/i);\r\n          if (!isValidPoster) {\r\n            console.warn(`Invalid poster for \"${item.title}\":`, item.poster);\r\n          }\r\n          return isValidPoster;\r\n        });\r\n        console.log(`After filtering invalid posters, ${validData.length} valid recommendations for \"${movieTitle}\":`, validData);\r\n        // Pick numMovies items (no shuffling for consistency)\r\n        const selectedRecommendations = validData.slice(0, Math.min(numMovies, validData.length)).map((rec, i) => {\r\n          console.log(`Processing recommendation ${i}:`, rec);\r\n          const poster = rec.poster || blackPoster;\r\n          console.log(`Poster for ${rec.title}:`, poster);\r\n          return {\r\n            id: i + 200,\r\n            title: rec.title,\r\n            thumbnail: poster,\r\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n            language: \"te\"\r\n          };\r\n        });\r\n        // If no valid recommendations after filtering, use fallback\r\n        if (selectedRecommendations.length === 0) {\r\n          console.warn(`No valid recommendations for \"${movieTitle}\" after filtering, setting empty array`);\r\n          setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n        } else {\r\n          setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n        }\r\n      } else {\r\n        throw new Error('Invalid data format from /random-telugu endpoint');\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\r\n      setError(`Network error fetching random recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchPosterForMovie = async (movieTitle) => {\r\n    try {\r\n      console.log(`Fetching poster for \"${movieTitle}\" via /recommend endpoint...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n      });\r\n      if (!response.ok) {\r\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}, ${response.statusText}`);\r\n        return blackPoster;\r\n      }\r\n      const data = await response.json();\r\n      console.log(`Poster fetch response for \"${movieTitle}\":`, data);\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        const firstMovie = data[0];\r\n        if (firstMovie.poster && typeof firstMovie.poster === 'string' && firstMovie.poster.trim() !== '' && firstMovie.poster !== 'N/A' && firstMovie.poster.match(/\\.(jpg|jpeg|png|gif)$/i)) {\r\n          console.log(`Valid poster found for \"${movieTitle}\":`, firstMovie.poster);\r\n          return firstMovie.poster;\r\n        } else {\r\n          console.warn(`No valid poster field in response for \"${movieTitle}\":`, firstMovie);\r\n          return blackPoster;\r\n        }\r\n      } else {\r\n        console.warn(`Empty or invalid response for \"${movieTitle}\" when fetching poster`);\r\n        return blackPoster;\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err);\r\n      return blackPoster;\r\n    }\r\n  };\r\n\r\n  const fetchRecommendations = async (movieTitle) => {\r\n    // Check if recommendations already exist in state/sessionStorage\r\n    if (recommendations[movieTitle] && recommendations[movieTitle].length > 0) {\r\n      console.log(`Using existing recommendations for \"${movieTitle}\" from sessionStorage:`, recommendations[movieTitle]);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(`Response for /recommend: status ${response.status}, data:`, data);\r\n      if (response.ok && Array.isArray(data) && data.length > 0) {\r\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\r\n        console.log(`After removing duplicates, ${uniqueData.length} unique recommendations for \"${movieTitle}\":`, uniqueData);\r\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n        console.log(`Selecting ${numRecs} recommendations for \"${movieTitle}\"...`);\r\n        const selectedRecommendations = uniqueData.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => {\r\n          const poster = rec.poster && typeof rec.poster === 'string' && rec.poster.trim() !== '' && rec.poster !== 'N/A' && rec.poster.match(/\\.(jpg|jpeg|png|gif)$/i) ? rec.poster : blackPoster;\r\n          console.log(`Poster for ${rec.title}:`, poster);\r\n          if (!rec.poster || rec.poster === 'N/A') {\r\n            console.warn(`No valid poster for ${rec.title}, using blackPoster`);\r\n          }\r\n          return {\r\n            id: i + 100,\r\n            title: rec.title,\r\n            thumbnail: poster,\r\n            description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\r\n            language: rec.original_language || 'en'\r\n          };\r\n        });\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        console.log(`No valid data from /recommend for \"${movieTitle}\"`);\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n      }\r\n    } catch (err) {\r\n      console.error(`Network error for \"${movieTitle}\":`, err);\r\n      setError(`Network error fetching recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\r\n        for (const row of updatedRows) {\r\n          if (row.title === \"Watch It Again\") {\r\n            for (const item of row.items) {\r\n              if (item.language === \"en\") {\r\n                const poster = await fetchPosterForMovie(item.title);\r\n                item.thumbnail = poster;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setInitialRows(updatedRows);\r\n        if (featuredItem.language === \"te\") {\r\n          const numRecsForBaahubali = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n          await fetchRandomTeluguRecommendations(featuredItem.title, numRecsForBaahubali);\r\n        }\r\n      } catch (err) {\r\n        setError('Failed to fetch initial data');\r\n        console.error('Initial fetch error:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchInitialData();\r\n  }, []);\r\n\r\n  const handleMoreInfo = (item) => {\r\n    const updatedItem = { ...item };\r\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\r\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\r\n    }\r\n    setSelectedItem(updatedItem);\r\n    if (item.language === \"te\") {\r\n      const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n      fetchRandomTeluguRecommendations(item.title, numRecs);\r\n    } else {\r\n      fetchRecommendations(item.title);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <Header />\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites || []}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;u"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAO,YAAY;;AAEnB;AACA,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,YAAY,MAAM,oBAAoB;AAC7C,OAAOC,YAAY,MAAM,oBAAoB;AAC7C,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,OAAOC,aAAa,MAAM,qBAAqB;AAC/C,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,OAAOC,cAAc,MAAM,gBAAgB;AAC3C,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,eAAe,MAAM,iBAAiB;AAC7C,OAAOC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC0B,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,MACrD4B,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAC9D,CAAC;EACD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACkC,OAAO,EAAEC,UAAU,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACoC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACsC,SAAS,EAAEC,YAAY,CAAC,GAAGvC,QAAQ,CAAC,MACzC4B,IAAI,CAACC,KAAK,CAACW,YAAY,CAACT,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CACnD,CAAC;EACD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAM2C,4BAA4B,GAAG;IACnC,QAAQ,EAAElC,YAAY;IACtB,MAAM,EAAEI,UAAU;IAClB,qBAAqB,EAAEG;EACzB,CAAC;EAED,MAAM4B,YAAY,GAAG;IACnBC,EAAE,EAAE,MAAM;IACVC,KAAK,EAAE,0BAA0B;IACjCC,WAAW,EAAE,0CAA0C;IACvDC,SAAS,EAAE9B,eAAe;IAC1B+B,KAAK,EAAE,iBAAiB;IACxBC,QAAQ,EAAE;EACZ,CAAC;EAED,MAAMC,eAAe,GAAG,CACtB;IACEL,KAAK,EAAE,iBAAiB;IACxBM,KAAK,EAAE,CACL;MAAEP,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,eAAe;MAAEE,SAAS,EAAEzC,WAAW;MAAEwC,WAAW,EAAE,0CAA0C;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACvI;MAAEL,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,QAAQ;MAAEE,SAAS,EAAExC,YAAY;MAAEuC,WAAW,EAAE,8CAA8C;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACrI;MAAEL,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,QAAQ;MAAEE,SAAS,EAAEvC,YAAY;MAAEsC,WAAW,EAAE,mCAAmC;MAAEM,QAAQ,EAAE,IAAI;MAAEH,QAAQ,EAAE;IAAK,CAAC,EACrI;MAAEL,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,KAAK;MAAEE,SAAS,EAAEtC,SAAS;MAAEqC,WAAW,EAAE,mDAAmD;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACpI;MAAEL,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,oBAAoB;MAAEE,SAAS,EAAErC,aAAa;MAAEoC,WAAW,EAAE,0CAA0C;MAAEG,QAAQ,EAAE;IAAK,CAAC,EAC9I;MAAEL,EAAE,EAAE,OAAO;MAAEC,KAAK,EAAE,UAAU;MAAEE,SAAS,EAAEpC,aAAa;MAAEmC,WAAW,EAAE,8BAA8B;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACzH;MAAEL,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,MAAM;MAAEE,SAAS,EAAEnC,UAAU;MAAEkC,WAAW,EAAE,sCAAsC;MAAEM,QAAQ,EAAE,IAAI;MAAEH,QAAQ,EAAE;IAAK,CAAC,EACpI;MAAEL,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,OAAO;MAAEE,SAAS,EAAElC,WAAW;MAAEiC,WAAW,EAAE,kCAAkC;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACvH;MAAEL,EAAE,EAAE,IAAI;MAAEC,KAAK,EAAE,sBAAsB;MAAEE,SAAS,EAAEjC,YAAY;MAAEgC,WAAW,EAAE,mCAAmC;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACtI;MAAEL,EAAE,EAAE,MAAM;MAAEC,KAAK,EAAE,OAAO;MAAEE,SAAS,EAAE/B,WAAW;MAAE8B,WAAW,EAAE,gCAAgC;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACrH;MAAEL,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,qBAAqB;MAAEE,SAAS,EAAEhC,cAAc;MAAE+B,WAAW,EAAE,6BAA6B;MAAEM,QAAQ,EAAE,IAAI;MAAEH,QAAQ,EAAE;IAAK,CAAC;EAElJ,CAAC,EACD;IACEJ,KAAK,EAAE,gBAAgB;IACvBM,KAAK,EAAE,CACL;MAAEP,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,WAAW;MAAEE,SAAS,EAAE7B,WAAW;MAAE4B,WAAW,EAAE,6BAA6B;MAAEG,QAAQ,EAAE;IAAK,CAAC,EACjH;MAAEL,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,SAAS;MAAEE,SAAS,EAAE7B,WAAW;MAAE4B,WAAW,EAAE,2BAA2B;MAAEG,QAAQ,EAAE;IAAK,CAAC;EAEjH,CAAC,CACF;EAEDjD,SAAS,CAAC,MAAM;IACdqD,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IACrBf,YAAY,CAACgB,OAAO,CAAC,QAAQ,EAAE5B,IAAI,CAAC6B,SAAS,CAACnB,SAAS,CAAC,CAAC;IACzDoB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAErB,SAAS,CAAC;EAC5D,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEfrC,SAAS,CAAC,MAAM;IACd6B,cAAc,CAAC0B,OAAO,CAAC,iBAAiB,EAAE5B,IAAI,CAAC6B,SAAS,CAAC/B,eAAe,CAAC,CAAC;IAC1EgC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEjC,eAAe,CAAC;EAC1E,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EAErB,MAAMkC,cAAc,GAAIC,IAAI,IAAK;IAC/BtB,YAAY,CAAEuB,aAAa,IAAK;MAC9B,MAAMC,WAAW,GAAGD,aAAa,CAACE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACpB,EAAE,KAAKgB,IAAI,CAAChB,EAAE,CAAC;MACnE,IAAIkB,WAAW,EAAE;QACfL,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEE,IAAI,CAACf,KAAK,CAAC;QACnD,MAAMoB,gBAAgB,GAAGJ,aAAa,CAACK,MAAM,CAAEF,GAAG,IAAKA,GAAG,CAACpB,EAAE,KAAKgB,IAAI,CAAChB,EAAE,CAAC;QAC1EH,eAAe,CAAC,IAAImB,IAAI,CAACf,KAAK,0BAA0B,CAAC;QACzDsB,UAAU,CAAC,MAAM1B,eAAe,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QAC3C,OAAOwB,gBAAgB;MACzB,CAAC,MAAM;QACLxB,eAAe,CAAC,IAAImB,IAAI,CAACf,KAAK,sBAAsB,CAAC;QACrDsB,UAAU,CAAC,MAAM1B,eAAe,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;QAC3CgB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEE,IAAI,CAACf,KAAK,CAAC;QAC/C,OAAO,CAAC,GAAGgB,aAAa,EAAED,IAAI,CAAC;MACjC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMQ,gCAAgC,GAAG,MAAAA,CAAOC,UAAU,EAAEC,SAAS,KAAK;IACxE;IACA,IAAI7C,eAAe,CAAC4C,UAAU,CAAC,IAAI5C,eAAe,CAAC4C,UAAU,CAAC,CAACE,MAAM,GAAG,CAAC,EAAE;MACzEd,OAAO,CAACC,GAAG,CAAC,uCAAuCW,UAAU,wBAAwB,EAAE5C,eAAe,CAAC4C,UAAU,CAAC,CAAC;MACnH;IACF;IAEAnC,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACFqB,OAAO,CAACC,GAAG,CAAC,YAAYY,SAAS,uCAAuCD,UAAU,MAAM,CAAC;MACzF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CAAC,CAAC;MACFlB,OAAO,CAACC,GAAG,CAAC,mCAAmCc,QAAQ,CAACI,MAAM,iBAAiBJ,QAAQ,CAACK,UAAU,EAAE,CAAC;MACrG,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBP,QAAQ,CAACI,MAAM,iBAAiBJ,QAAQ,CAACK,UAAU,EAAE,CAAC;MAC/F;MACA,MAAMG,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;QACvBvB,OAAO,CAACC,GAAG,CAAC,YAAYsB,IAAI,CAACT,MAAM,uCAAuCF,UAAU,IAAI,EAAEW,IAAI,CAAC;QAC/F;QACA,MAAMI,UAAU,GAAGF,KAAK,CAACG,IAAI,CAAC,IAAIC,GAAG,CAACN,IAAI,CAACO,GAAG,CAAC3B,IAAI,IAAI,CAACA,IAAI,CAACf,KAAK,CAAC2C,WAAW,CAAC,CAAC,EAAE5B,IAAI,CAAC,CAAC,CAAC,CAAC6B,MAAM,CAAC,CAAC,CAAC;QACnGhC,OAAO,CAACC,GAAG,CAAC,8BAA8B0B,UAAU,CAACb,MAAM,uCAAuCF,UAAU,IAAI,EAAEe,UAAU,CAAC;QAC7H;QACA,MAAMM,SAAS,GAAGN,UAAU,CAAClB,MAAM,CAACN,IAAI,IAAI;UAC1C,MAAM+B,aAAa,GAAG/B,IAAI,CAACgC,MAAM,IAAI,OAAOhC,IAAI,CAACgC,MAAM,KAAK,QAAQ,IAAIhC,IAAI,CAACgC,MAAM,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIjC,IAAI,CAACgC,MAAM,KAAK,KAAK,IAAIhC,IAAI,CAACgC,MAAM,CAACE,KAAK,CAAC,wBAAwB,CAAC;UACzK,IAAI,CAACH,aAAa,EAAE;YAClBlC,OAAO,CAACsC,IAAI,CAAC,uBAAuBnC,IAAI,CAACf,KAAK,IAAI,EAAEe,IAAI,CAACgC,MAAM,CAAC;UAClE;UACA,OAAOD,aAAa;QACtB,CAAC,CAAC;QACFlC,OAAO,CAACC,GAAG,CAAC,oCAAoCgC,SAAS,CAACnB,MAAM,+BAA+BF,UAAU,IAAI,EAAEqB,SAAS,CAAC;QACzH;QACA,MAAMM,uBAAuB,GAAGN,SAAS,CAACO,KAAK,CAAC,CAAC,EAAEC,IAAI,CAACC,GAAG,CAAC7B,SAAS,EAAEoB,SAAS,CAACnB,MAAM,CAAC,CAAC,CAACgB,GAAG,CAAC,CAACa,GAAG,EAAEC,CAAC,KAAK;UACxG5C,OAAO,CAACC,GAAG,CAAC,6BAA6B2C,CAAC,GAAG,EAAED,GAAG,CAAC;UACnD,MAAMR,MAAM,GAAGQ,GAAG,CAACR,MAAM,IAAI1E,WAAW;UACxCuC,OAAO,CAACC,GAAG,CAAC,cAAc0C,GAAG,CAACvD,KAAK,GAAG,EAAE+C,MAAM,CAAC;UAC/C,OAAO;YACLhD,EAAE,EAAEyD,CAAC,GAAG,GAAG;YACXxD,KAAK,EAAEuD,GAAG,CAACvD,KAAK;YAChBE,SAAS,EAAE6C,MAAM;YACjB9C,WAAW,EAAE,aAAasD,GAAG,CAACE,iBAAiB,IAAI,IAAI,aAAaF,GAAG,CAACG,MAAM,IAAI,KAAK,EAAE;YACzFtD,QAAQ,EAAE;UACZ,CAAC;QACH,CAAC,CAAC;QACF;QACA,IAAI+C,uBAAuB,CAACzB,MAAM,KAAK,CAAC,EAAE;UACxCd,OAAO,CAACsC,IAAI,CAAC,iCAAiC1B,UAAU,wCAAwC,CAAC;UACjG3C,kBAAkB,CAAE8E,IAAI,KAAM;YAAE,GAAGA,IAAI;YAAE,CAACnC,UAAU,GAAG;UAAG,CAAC,CAAC,CAAC;QAC/D,CAAC,MAAM;UACL3C,kBAAkB,CAAE8E,IAAI,KAAM;YAAE,GAAGA,IAAI;YAAE,CAACnC,UAAU,GAAG2B;UAAwB,CAAC,CAAC,CAAC;QACpF;MACF,CAAC,MAAM;QACL,MAAM,IAAIjB,KAAK,CAAC,kDAAkD,CAAC;MACrE;IACF,CAAC,CAAC,OAAO0B,GAAG,EAAE;MACZhD,OAAO,CAACtB,KAAK,CAAC,qDAAqDkC,UAAU,IAAI,EAAEoC,GAAG,CAAC;MACvFrE,QAAQ,CAAC,kDAAkDqE,GAAG,CAACC,OAAO,EAAE,CAAC;MACzEhF,kBAAkB,CAAE8E,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAE,CAACnC,UAAU,GAAG;MAAG,CAAC,CAAC,CAAC;IAC/D,CAAC,SAAS;MACRnC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMyE,mBAAmB,GAAG,MAAOtC,UAAU,IAAK;IAChD,IAAI;MACFZ,OAAO,CAACC,GAAG,CAAC,wBAAwBW,UAAU,8BAA8B,CAAC;MAC7E,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CiC,IAAI,EAAEjF,IAAI,CAAC6B,SAAS,CAAC;UAAEqD,WAAW,EAAExC;QAAW,CAAC;MAClD,CAAC,CAAC;MACF,IAAI,CAACG,QAAQ,CAACM,EAAE,EAAE;QAChBrB,OAAO,CAACsC,IAAI,CAAC,+BAA+B1B,UAAU,kBAAkBG,QAAQ,CAACI,MAAM,KAAKJ,QAAQ,CAACK,UAAU,EAAE,CAAC;QAClH,OAAO3D,WAAW;MACpB;MACA,MAAM8D,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCxB,OAAO,CAACC,GAAG,CAAC,8BAA8BW,UAAU,IAAI,EAAEW,IAAI,CAAC;MAC/D,IAAIE,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IAAIA,IAAI,CAACT,MAAM,GAAG,CAAC,EAAE;QAC1C,MAAMuC,UAAU,GAAG9B,IAAI,CAAC,CAAC,CAAC;QAC1B,IAAI8B,UAAU,CAAClB,MAAM,IAAI,OAAOkB,UAAU,CAAClB,MAAM,KAAK,QAAQ,IAAIkB,UAAU,CAAClB,MAAM,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIiB,UAAU,CAAClB,MAAM,KAAK,KAAK,IAAIkB,UAAU,CAAClB,MAAM,CAACE,KAAK,CAAC,wBAAwB,CAAC,EAAE;UACrLrC,OAAO,CAACC,GAAG,CAAC,2BAA2BW,UAAU,IAAI,EAAEyC,UAAU,CAAClB,MAAM,CAAC;UACzE,OAAOkB,UAAU,CAAClB,MAAM;QAC1B,CAAC,MAAM;UACLnC,OAAO,CAACsC,IAAI,CAAC,0CAA0C1B,UAAU,IAAI,EAAEyC,UAAU,CAAC;UAClF,OAAO5F,WAAW;QACpB;MACF,CAAC,MAAM;QACLuC,OAAO,CAACsC,IAAI,CAAC,kCAAkC1B,UAAU,wBAAwB,CAAC;QAClF,OAAOnD,WAAW;MACpB;IACF,CAAC,CAAC,OAAOuF,GAAG,EAAE;MACZhD,OAAO,CAACtB,KAAK,CAAC,8BAA8BkC,UAAU,IAAI,EAAEoC,GAAG,CAAC;MAChE,OAAOvF,WAAW;IACpB;EACF,CAAC;EAED,MAAM6F,oBAAoB,GAAG,MAAO1C,UAAU,IAAK;IACjD;IACA,IAAI5C,eAAe,CAAC4C,UAAU,CAAC,IAAI5C,eAAe,CAAC4C,UAAU,CAAC,CAACE,MAAM,GAAG,CAAC,EAAE;MACzEd,OAAO,CAACC,GAAG,CAAC,uCAAuCW,UAAU,wBAAwB,EAAE5C,eAAe,CAAC4C,UAAU,CAAC,CAAC;MACnH;IACF;IAEAnC,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACFqB,OAAO,CAACC,GAAG,CAAC,iCAAiCW,UAAU,MAAM,CAAC;MAC9D,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CiC,IAAI,EAAEjF,IAAI,CAAC6B,SAAS,CAAC;UAAEqD,WAAW,EAAExC;QAAW,CAAC;MAClD,CAAC,CAAC;MACF,MAAMW,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCxB,OAAO,CAACC,GAAG,CAAC,mCAAmCc,QAAQ,CAACI,MAAM,SAAS,EAAEI,IAAI,CAAC;MAC9E,IAAIR,QAAQ,CAACM,EAAE,IAAII,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IAAIA,IAAI,CAACT,MAAM,GAAG,CAAC,EAAE;QACzD,MAAMa,UAAU,GAAGF,KAAK,CAACG,IAAI,CAAC,IAAIC,GAAG,CAACN,IAAI,CAACO,GAAG,CAAC3B,IAAI,IAAI,CAACA,IAAI,CAACf,KAAK,CAAC2C,WAAW,CAAC,CAAC,EAAE5B,IAAI,CAAC,CAAC,CAAC,CAAC6B,MAAM,CAAC,CAAC,CAAC;QACnGhC,OAAO,CAACC,GAAG,CAAC,8BAA8B0B,UAAU,CAACb,MAAM,gCAAgCF,UAAU,IAAI,EAAEe,UAAU,CAAC;QACtH,MAAM4B,OAAO,GAAGd,IAAI,CAACe,KAAK,CAACf,IAAI,CAACgB,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAC5DzD,OAAO,CAACC,GAAG,CAAC,aAAasD,OAAO,yBAAyB3C,UAAU,MAAM,CAAC;QAC1E,MAAM2B,uBAAuB,GAAGZ,UAAU,CAACa,KAAK,CAAC,CAAC,EAAEC,IAAI,CAACC,GAAG,CAACa,OAAO,EAAE5B,UAAU,CAACb,MAAM,CAAC,CAAC,CAACgB,GAAG,CAAC,CAACa,GAAG,EAAEC,CAAC,KAAK;UACxG,MAAMT,MAAM,GAAGQ,GAAG,CAACR,MAAM,IAAI,OAAOQ,GAAG,CAACR,MAAM,KAAK,QAAQ,IAAIQ,GAAG,CAACR,MAAM,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIO,GAAG,CAACR,MAAM,KAAK,KAAK,IAAIQ,GAAG,CAACR,MAAM,CAACE,KAAK,CAAC,wBAAwB,CAAC,GAAGM,GAAG,CAACR,MAAM,GAAG1E,WAAW;UACxLuC,OAAO,CAACC,GAAG,CAAC,cAAc0C,GAAG,CAACvD,KAAK,GAAG,EAAE+C,MAAM,CAAC;UAC/C,IAAI,CAACQ,GAAG,CAACR,MAAM,IAAIQ,GAAG,CAACR,MAAM,KAAK,KAAK,EAAE;YACvCnC,OAAO,CAACsC,IAAI,CAAC,uBAAuBK,GAAG,CAACvD,KAAK,qBAAqB,CAAC;UACrE;UACA,OAAO;YACLD,EAAE,EAAEyD,CAAC,GAAG,GAAG;YACXxD,KAAK,EAAEuD,GAAG,CAACvD,KAAK;YAChBE,SAAS,EAAE6C,MAAM;YACjB9C,WAAW,EAAE,aAAasD,GAAG,CAACE,iBAAiB,IAAI,IAAI,aAAaF,GAAG,CAACG,MAAM,IAAI,KAAK,EAAE;YACzFtD,QAAQ,EAAEmD,GAAG,CAACE,iBAAiB,IAAI;UACrC,CAAC;QACH,CAAC,CAAC;QACF5E,kBAAkB,CAAE8E,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAE,CAACnC,UAAU,GAAG2B;QAAwB,CAAC,CAAC,CAAC;MACpF,CAAC,MAAM;QACLvC,OAAO,CAACC,GAAG,CAAC,sCAAsCW,UAAU,GAAG,CAAC;QAChE3C,kBAAkB,CAAE8E,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAE,CAACnC,UAAU,GAAG;QAAG,CAAC,CAAC,CAAC;MAC/D;IACF,CAAC,CAAC,OAAOoC,GAAG,EAAE;MACZhD,OAAO,CAACtB,KAAK,CAAC,sBAAsBkC,UAAU,IAAI,EAAEoC,GAAG,CAAC;MACxDrE,QAAQ,CAAC,2CAA2CqE,GAAG,CAACC,OAAO,EAAE,CAAC;MAClEhF,kBAAkB,CAAE8E,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAE,CAACnC,UAAU,GAAG;MAAG,CAAC,CAAC,CAAC;IAC/D,CAAC,SAAS;MACRnC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDlC,SAAS,CAAC,MAAM;IACd,MAAMmH,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnCjF,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,MAAMkF,WAAW,GAAGzF,IAAI,CAACC,KAAK,CAACD,IAAI,CAAC6B,SAAS,CAACN,eAAe,CAAC,CAAC;QAC/D,KAAK,MAAMmE,GAAG,IAAID,WAAW,EAAE;UAC7B,IAAIC,GAAG,CAACxE,KAAK,KAAK,gBAAgB,EAAE;YAClC,KAAK,MAAMe,IAAI,IAAIyD,GAAG,CAAClE,KAAK,EAAE;cAC5B,IAAIS,IAAI,CAACX,QAAQ,KAAK,IAAI,EAAE;gBAC1B,MAAM2C,MAAM,GAAG,MAAMe,mBAAmB,CAAC/C,IAAI,CAACf,KAAK,CAAC;gBACpDe,IAAI,CAACb,SAAS,GAAG6C,MAAM;cACzB;YACF;UACF;QACF;QACA5D,cAAc,CAACoF,WAAW,CAAC;QAC3B,IAAIzE,YAAY,CAACM,QAAQ,KAAK,IAAI,EAAE;UAClC,MAAMqE,mBAAmB,GAAGpB,IAAI,CAACe,KAAK,CAACf,IAAI,CAACgB,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;UACxE,MAAM9C,gCAAgC,CAACzB,YAAY,CAACE,KAAK,EAAEyE,mBAAmB,CAAC;QACjF;MACF,CAAC,CAAC,OAAOb,GAAG,EAAE;QACZrE,QAAQ,CAAC,8BAA8B,CAAC;QACxCqB,OAAO,CAACtB,KAAK,CAAC,sBAAsB,EAAEsE,GAAG,CAAC;MAC5C,CAAC,SAAS;QACRvE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDiF,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,cAAc,GAAI3D,IAAI,IAAK;IAC/B,MAAM4D,WAAW,GAAG;MAAE,GAAG5D;IAAK,CAAC;IAC/B,IAAIA,IAAI,CAACR,QAAQ,IAAIV,4BAA4B,CAACkB,IAAI,CAACf,KAAK,CAAC,EAAE;MAC7D2E,WAAW,CAACzE,SAAS,GAAGL,4BAA4B,CAACkB,IAAI,CAACf,KAAK,CAAC;IAClE;IACArB,eAAe,CAACgG,WAAW,CAAC;IAC5B,IAAI5D,IAAI,CAACX,QAAQ,KAAK,IAAI,EAAE;MAC1B,MAAM+D,OAAO,GAAGd,IAAI,CAACe,KAAK,CAACf,IAAI,CAACgB,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;MAC5D9C,gCAAgC,CAACR,IAAI,CAACf,KAAK,EAAEmE,OAAO,CAAC;IACvD,CAAC,MAAM;MACLD,oBAAoB,CAACnD,IAAI,CAACf,KAAK,CAAC;IAClC;EACF,CAAC;EAED,oBACEzB,OAAA;IAAKqG,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBtG,OAAA,CAACnB,MAAM;MAAA0H,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV1G,OAAA,CAAClB,IAAI;MACH0D,IAAI,EAAEjB,YAAa;MACnBoF,UAAU,EAAER,cAAe;MAC3BlF,SAAS,EAAEA,SAAS,IAAI,EAAG;MAC3BsB,cAAc,EAAEA;IAAe;MAAAgE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,EACD,CAAC/F,WAAW,CAACwC,MAAM,GAAG,CAAC,GAAGxC,WAAW,GAAGmB,eAAe,EAAEqC,GAAG,CAAC,CAAC8B,GAAG,EAAEW,KAAK,kBACvE5G,OAAA,CAACjB,GAAG;MAEF0C,KAAK,EAAEwE,GAAG,CAACxE,KAAM;MACjBM,KAAK,EAAEkE,GAAG,CAAClE,KAAM;MACjB4E,UAAU,EAAER,cAAe;MAC3BlF,SAAS,EAAEA,SAAS,IAAI,EAAG;MAC3BsB,cAAc,EAAEA;IAAe,GAL1BqE,KAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMX,CACF,CAAC,EACDG,MAAM,CAACC,OAAO,CAACzG,eAAe,CAAC,CAAC8D,GAAG,CAAC,CAAC,CAAC1C,KAAK,EAAEsF,IAAI,CAAC,kBACjD/G,OAAA,CAACjB,GAAG;MAEF0C,KAAK,EAAE,uBAAuBA,KAAK,EAAG;MACtCM,KAAK,EAAEgF,IAAK;MACZJ,UAAU,EAAER,cAAe;MAC3BlF,SAAS,EAAEA,SAAS,IAAI,EAAG;MAC3BsB,cAAc,EAAEA;IAAe,GAL1B,OAAOd,KAAK,EAAE;MAAA8E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMpB,CACF,CAAC,EACD,CAACG,MAAM,CAACG,IAAI,CAAC3G,eAAe,CAAC,CAAC8C,MAAM,IAAI,CAACtC,OAAO,iBAC/Cb,OAAA;MAAKqG,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACxE,EACA7F,OAAO,iBAAIb,OAAA;MAAKqG,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACpD3F,KAAK,iBAAIf,OAAA;MAAKqG,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEvF;IAAK;MAAAwF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAC7CvG,YAAY,iBAAIH,OAAA,CAAChB,KAAK;MAACwD,IAAI,EAAErC,YAAa;MAAC8G,OAAO,EAAEA,CAAA,KAAM7G,eAAe,CAAC,IAAI;IAAE;MAAAmG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACnFtF,YAAY,iBAAIpB,OAAA;MAAKqG,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAElF;IAAY;MAAAmF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnE1G,OAAA,CAACf,MAAM;MAAAsH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV;AAACxG,EAAA,CA5TQD,IAAI;AAAAiH,EAAA,GAAJjH,IAAI;AA8Tb,eAAeA,IAAI;AAACkH,CAAC;AAAA,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}