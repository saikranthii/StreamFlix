{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\SpeedTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport './SpeedTest.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SpeedTest() {\n  _s();\n  const [downloadSpeed, setDownloadSpeed] = useState(null);\n  const [uploadSpeed, setUploadSpeed] = useState(null);\n  const [latency, setLatency] = useState(null);\n  const [testing, setTesting] = useState(false);\n  const [error, setError] = useState('');\n  const [history, setHistory] = useState(() => {\n    const saved = localStorage.getItem('speedTestHistory');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [chartData, setChartData] = useState({\n    download: [],\n    upload: []\n  });\n\n  // Update local storage when history changes\n  useEffect(() => {\n    localStorage.setItem('speedTestHistory', JSON.stringify(history));\n  }, [history]);\n\n  // Initialize chart\n  useEffect(() => {\n    var _document$getElementB;\n    const ctx = (_document$getElementB = document.getElementById('speedChart')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.getContext('2d');\n    if (ctx) {\n      const chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: chartData.download.map((_, i) => `Amostra ${i + 1}`),\n          datasets: [{\n            label: 'Velocidade de Download (Mbps)',\n            data: chartData.download,\n            borderColor: '#ff0000',\n            backgroundColor: 'rgba(255, 0, 0, 0.2)',\n            fill: true\n          }, {\n            label: 'Velocidade de Upload (Mbps)',\n            data: chartData.upload,\n            borderColor: '#ffffff',\n            backgroundColor: 'rgba(255, 255, 255, 0.2)',\n            fill: true\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Velocidade (Mbps)'\n              }\n            },\n            x: {\n              title: {\n                display: true,\n                text: 'Amostra'\n              }\n            }\n          }\n        }\n      });\n      return () => chart.destroy();\n    }\n  }, [chartData]);\n  const runSpeedTest = async () => {\n    setTesting(true);\n    setDownloadSpeed(null);\n    setUploadSpeed(null);\n    setLatency(null);\n    setError('');\n    setChartData({\n      download: [],\n      upload: []\n    });\n    let pingMs = null;\n    let avgDownloadSpeed = null;\n    let avgUploadSpeed = null;\n    try {\n      // Latency test\n      try {\n        const pingStart = performance.now();\n        const pingResponse = await axios.get('http://localhost:5001/', {\n          timeout: 10000\n        });\n        const pingEnd = performance.now();\n        pingMs = (pingEnd - pingStart).toFixed(2);\n        setLatency(pingMs);\n        console.log('Latência:', pingMs, 'ms', 'Status:', pingResponse.status);\n      } catch (err) {\n        console.error('Teste de latência falhou (porta 5001):', err.message);\n        // Fallback to port 3000\n        try {\n          const pingStart = performance.now();\n          const pingResponse = await axios.get('http://localhost:3000/', {\n            timeout: 10000\n          });\n          const pingEnd = performance.now();\n          pingMs = (pingEnd - pingStart).toFixed(2);\n          setLatency(pingMs);\n          console.log('Latência (fallback 3000):', pingMs, 'ms', 'Status:', pingResponse.status);\n        } catch (fallbackErr) {\n          console.error('Fallback de latência falhou (porta 3000):', fallbackErr.message);\n          setError(prev => prev + ' Teste de latência falhou. ');\n        }\n      }\n\n      // Download test\n      try {\n        const downloadSamples = 3;\n        const downloadSpeeds = [];\n        for (let i = 0; i < downloadSamples; i++) {\n          const startTime = performance.now();\n          const response = await axios.get('http://localhost:3000/files/100MB.bin', {\n            responseType: 'blob',\n            timeout: 30000\n          });\n          const endTime = performance.now();\n          const duration = (endTime - startTime) / 1000; // seconds\n          const fileSize = response.data.size / 1024 / 1024; // MB\n          const speedMbps = (fileSize * 8 / duration).toFixed(2); // Mbps\n          downloadSpeeds.push(parseFloat(speedMbps));\n          setChartData(prev => ({\n            download: [...prev.download, parseFloat(speedMbps)],\n            upload: prev.upload\n          }));\n          console.log(`Amostra de download ${i + 1}: ${speedMbps} Mbps`, 'Status:', response.status);\n        }\n        avgDownloadSpeed = (downloadSpeeds.reduce((a, b) => a + b, 0) / downloadSamples).toFixed(2);\n        setDownloadSpeed(avgDownloadSpeed);\n        console.log('Velocidade média de download:', avgDownloadSpeed, 'Mbps');\n      } catch (err) {\n        console.error('Teste de download falhou:', err.message);\n        setError(prev => prev + ' Teste de download falhou. ');\n      }\n\n      // Upload test with retry\n      try {\n        const uploadSamples = 3;\n        const uploadSpeeds = [];\n        const fileSizeMB = 2; // 2MB\n        const fileData = new Blob([new ArrayBuffer(fileSizeMB * 1024 * 1024)], {\n          type: 'application/octet-stream'\n        });\n        const maxRetries = 2;\n        for (let i = 0; i < uploadSamples; i++) {\n          let attempt = 0;\n          let success = false;\n          let lastError = null;\n          while (attempt <= maxRetries && !success) {\n            try {\n              const startTime = performance.now();\n              const response = await axios.post('http://localhost:5001/upload', fileData, {\n                headers: {\n                  'Content-Type': 'application/octet-stream'\n                },\n                timeout: 60000\n              });\n              const endTime = performance.now();\n              const duration = (endTime - startTime) / 1000; // seconds\n              const speedMbps = (fileSizeMB * 8 / duration).toFixed(2); // Mbps\n              uploadSpeeds.push(parseFloat(speedMbps));\n              setChartData(prev => ({\n                download: prev.download,\n                upload: [...prev.upload, parseFloat(speedMbps)]\n              }));\n              console.log(`Amostra de upload ${i + 1} (tentativa ${attempt + 1}): ${speedMbps} Mbps`, 'Status:', response.status, 'Resposta:', response.data);\n              success = true;\n            } catch (err) {\n              var _err$response, _err$response2;\n              attempt++;\n              lastError = err;\n              console.warn(`Tentativa de upload ${i + 1} falhou (tentativa ${attempt}):`, err.message, 'Resposta:', (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data, 'Status:', (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status);\n              if (attempt <= maxRetries) {\n                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1s before retry\n              }\n            }\n          }\n          if (!success) {\n            throw lastError; // Throw the last error if all retries fail\n          }\n        }\n        avgUploadSpeed = (uploadSpeeds.reduce((a, b) => a + b, 0) / uploadSamples).toFixed(2);\n        setUploadSpeed(avgUploadSpeed);\n        console.log('Velocidade média de upload:', avgUploadSpeed, 'Mbps');\n      } catch (err) {\n        var _err$response3, _err$response4;\n        console.error('Teste de upload falhou:', err.message, 'Resposta:', (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data, 'Status:', (_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.status);\n        setError(prev => prev + ` Teste de upload falhou: ${err.message}. `);\n      }\n\n      // Update history even if some tests fail\n      if (pingMs || avgDownloadSpeed || avgUploadSpeed) {\n        const result = {\n          downloadSpeed: avgDownloadSpeed || '-',\n          uploadSpeed: avgUploadSpeed || '-',\n          latency: pingMs || '-',\n          timestamp: new Date().toLocaleString()\n        };\n        console.log('Entrada no histórico:', result);\n        setHistory(prev => [result, ...prev].slice(0, 5)); // Keep last 5 results\n      } else {\n        setError(prev => prev || 'Falha ao salvar no localStorage.');\n      }\n    } catch (err) {\n      var _err$response5;\n      console.error('Erro inesperado:', err.message, 'Resposta:', (_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : _err$response5.data);\n      setError('Falha ao executar teste de velocidade: ' + err.message);\n    }\n    setTesting(false);\n  };\n\n  // Calcular rotação da agulha e offsets do medidor (0-100 Mbps mapeia para 0-360 deg)\n  const downloadGaugeOffset = downloadSpeed ? (1 - parseFloat(downloadSpeed) / 100) * 439.8 : 439.8;\n  const uploadGaugeOffset = uploadSpeed ? (1 - parseFloat(uploadSpeed) / 100) * 439.8 : 439.8;\n  const needleAngle = testing ? 0 : uploadSpeed ? parseFloat(uploadSpeed) / 100 * 360 : downloadSpeed ? parseFloat(downloadSpeed) / 100 * 360 : 0;\n\n  // Gerar marcas de escala e rótulos\n  const ticks = [];\n  for (let i = 0; i <= 100; i += 5) {\n    const isMajor = i % 20 === 0;\n    const angle = i / 100 * 360;\n    const rad = angle * Math.PI / 180;\n    const innerRadius = isMajor ? 55 : 60;\n    const outerRadius = isMajor ? 45 : 50;\n    const x1 = 100 + innerRadius * Math.cos(rad);\n    const y1 = 100 + innerRadius * Math.sin(rad);\n    const x2 = 100 + outerRadius * Math.cos(rad);\n    const y2 = 100 + outerRadius * Math.sin(rad);\n    ticks.push(/*#__PURE__*/_jsxDEV(\"line\", {\n      x1: x1,\n      y1: y1,\n      x2: x2,\n      y2: y2,\n      stroke: \"#ffffff\",\n      strokeWidth: isMajor ? 2 : 1\n    }, `tick-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this));\n    if (isMajor) {\n      const labelX = 100 + 35 * Math.cos(rad);\n      const labelY = 100 + 35 * Math.sin(rad);\n      ticks.push(/*#__PURE__*/_jsxDEV(\"text\", {\n        x: labelX,\n        y: labelY,\n        fill: \"#ffffff\",\n        fontSize: \"10\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        children: i\n      }, `label-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speed-test\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Teste de Velocidade\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Teste sua velocidade de internet para uma transmiss\\xE3o ideal no StreamFlix.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speedometer\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 200 200\",\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: \"100\",\n            cy: \"100\",\n            r: \"70\",\n            fill: \"none\",\n            stroke: \"#1a1a1a\",\n            strokeWidth: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            className: testing || downloadSpeed ? 'gauge download-gauge' : '',\n            cx: \"100\",\n            cy: \"100\",\n            r: \"70\",\n            fill: \"none\",\n            stroke: \"#ff0000\",\n            strokeWidth: \"5\",\n            strokeDasharray: \"439.8\",\n            strokeDashoffset: testing ? '0' : downloadGaugeOffset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            className: testing || uploadSpeed ? 'gauge upload-gauge' : '',\n            cx: \"100\",\n            cy: \"100\",\n            r: \"65\",\n            fill: \"none\",\n            stroke: \"#ffffff\",\n            strokeWidth: \"5\",\n            strokeDasharray: \"408.4\",\n            strokeDashoffset: testing ? '0' : uploadGaugeOffset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this), ticks, /*#__PURE__*/_jsxDEV(\"line\", {\n            className: testing || downloadSpeed || uploadSpeed ? 'needle' : '',\n            x1: \"100\",\n            y1: \"100\",\n            x2: \"100\",\n            y2: \"30\",\n            stroke: \"#ffffff\",\n            strokeWidth: \"4\",\n            style: {\n              transform: `rotate(${needleAngle}deg)`,\n              transformOrigin: '100px 100px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"speed-display\",\n          children: testing ? 'Testando...' : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [downloadSpeed && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Download: \", downloadSpeed, \" Mbps\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 35\n            }, this), uploadSpeed && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\" | Upload: \", uploadSpeed, \" Mbps\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metrics\",\n        children: [latency && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Lat\\xEAncia: \", latency, \" ms\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 23\n        }, this), downloadSpeed && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Velocidade de Download: \", downloadSpeed, \" Mbps\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 29\n        }, this), uploadSpeed && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Velocidade de Upload: \", uploadSpeed, \" Mbps\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runSpeedTest,\n        disabled: testing,\n        children: testing ? 'Testando...' : 'Executar Teste de Velocidade'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Resultados do Teste de Velocidade\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"speedChart\",\n          width: \"400\",\n          height: \"200\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Hist\\xF3rico de Testes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Download (Mbps)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Upload (Mbps)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Lat\\xEAncia (ms)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: history.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.downloadSpeed || '-'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.uploadSpeed || '-'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: entry.latency || '-'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeedTest, \"SoVuQ/56bNRLWIWhPTLzsooYHfE=\");\n_c = SpeedTest;\nexport default SpeedTest;\nvar _c;\n$RefreshReg$(_c, \"SpeedTest\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","Header","Footer","jsxDEV","_jsxDEV","Fragment","_Fragment","SpeedTest","_s","downloadSpeed","setDownloadSpeed","uploadSpeed","setUploadSpeed","latency","setLatency","testing","setTesting","error","setError","history","setHistory","saved","localStorage","getItem","JSON","parse","chartData","setChartData","download","upload","setItem","stringify","_document$getElementB","ctx","document","getElementById","getContext","chart","type","data","labels","map","_","i","datasets","label","borderColor","backgroundColor","fill","options","scales","y","beginAtZero","title","display","text","x","destroy","runSpeedTest","pingMs","avgDownloadSpeed","avgUploadSpeed","pingStart","performance","now","pingResponse","get","timeout","pingEnd","toFixed","console","log","status","err","message","fallbackErr","prev","downloadSamples","downloadSpeeds","startTime","response","responseType","endTime","duration","fileSize","size","speedMbps","push","parseFloat","reduce","a","b","uploadSamples","uploadSpeeds","fileSizeMB","fileData","Blob","ArrayBuffer","maxRetries","attempt","success","lastError","post","headers","_err$response","_err$response2","warn","Promise","resolve","setTimeout","_err$response3","_err$response4","result","timestamp","Date","toLocaleString","slice","_err$response5","downloadGaugeOffset","uploadGaugeOffset","needleAngle","ticks","isMajor","angle","rad","Math","PI","innerRadius","outerRadius","x1","cos","y1","sin","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","labelX","labelY","fontSize","textAnchor","dominantBaseline","children","className","viewBox","cx","cy","r","strokeDasharray","strokeDashoffset","style","transform","transformOrigin","onClick","disabled","id","width","height","length","entry","index","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/SpeedTest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport './SpeedTest.css';\r\n\r\nfunction SpeedTest() {\r\n  const [downloadSpeed, setDownloadSpeed] = useState(null);\r\n  const [uploadSpeed, setUploadSpeed] = useState(null);\r\n  const [latency, setLatency] = useState(null);\r\n  const [testing, setTesting] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [history, setHistory] = useState(() => {\r\n    const saved = localStorage.getItem('speedTestHistory');\r\n    return saved ? JSON.parse(saved) : [];\r\n  });\r\n  const [chartData, setChartData] = useState({ download: [], upload: [] });\r\n\r\n  // Update local storage when history changes\r\n  useEffect(() => {\r\n    localStorage.setItem('speedTestHistory', JSON.stringify(history));\r\n  }, [history]);\r\n\r\n  // Initialize chart\r\n  useEffect(() => {\r\n    const ctx = document.getElementById('speedChart')?.getContext('2d');\r\n    if (ctx) {\r\n      const chart = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: chartData.download.map((_, i) => `Amostra ${i + 1}`),\r\n          datasets: [\r\n            {\r\n              label: 'Velocidade de Download (Mbps)',\r\n              data: chartData.download,\r\n              borderColor: '#ff0000',\r\n              backgroundColor: 'rgba(255, 0, 0, 0.2)',\r\n              fill: true,\r\n            },\r\n            {\r\n              label: 'Velocidade de Upload (Mbps)',\r\n              data: chartData.upload,\r\n              borderColor: '#ffffff',\r\n              backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n              fill: true,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          scales: {\r\n            y: { beginAtZero: true, title: { display: true, text: 'Velocidade (Mbps)' } },\r\n            x: { title: { display: true, text: 'Amostra' } },\r\n          },\r\n        },\r\n      });\r\n      return () => chart.destroy();\r\n    }\r\n  }, [chartData]);\r\n\r\n  const runSpeedTest = async () => {\r\n    setTesting(true);\r\n    setDownloadSpeed(null);\r\n    setUploadSpeed(null);\r\n    setLatency(null);\r\n    setError('');\r\n    setChartData({ download: [], upload: [] });\r\n\r\n    let pingMs = null;\r\n    let avgDownloadSpeed = null;\r\n    let avgUploadSpeed = null;\r\n\r\n    try {\r\n      // Latency test\r\n      try {\r\n        const pingStart = performance.now();\r\n        const pingResponse = await axios.get('http://localhost:5001/', { timeout: 10000 });\r\n        const pingEnd = performance.now();\r\n        pingMs = (pingEnd - pingStart).toFixed(2);\r\n        setLatency(pingMs);\r\n        console.log('Latência:', pingMs, 'ms', 'Status:', pingResponse.status);\r\n      } catch (err) {\r\n        console.error('Teste de latência falhou (porta 5001):', err.message);\r\n        // Fallback to port 3000\r\n        try {\r\n          const pingStart = performance.now();\r\n          const pingResponse = await axios.get('http://localhost:3000/', { timeout: 10000 });\r\n          const pingEnd = performance.now();\r\n          pingMs = (pingEnd - pingStart).toFixed(2);\r\n          setLatency(pingMs);\r\n          console.log('Latência (fallback 3000):', pingMs, 'ms', 'Status:', pingResponse.status);\r\n        } catch (fallbackErr) {\r\n          console.error('Fallback de latência falhou (porta 3000):', fallbackErr.message);\r\n          setError((prev) => prev + ' Teste de latência falhou. ');\r\n        }\r\n      }\r\n\r\n      // Download test\r\n      try {\r\n        const downloadSamples = 3;\r\n        const downloadSpeeds = [];\r\n        for (let i = 0; i < downloadSamples; i++) {\r\n          const startTime = performance.now();\r\n          const response = await axios.get('http://localhost:3000/files/100MB.bin', {\r\n            responseType: 'blob',\r\n            timeout: 30000,\r\n          });\r\n          const endTime = performance.now();\r\n          const duration = (endTime - startTime) / 1000; // seconds\r\n          const fileSize = response.data.size / 1024 / 1024; // MB\r\n          const speedMbps = (fileSize * 8 / duration).toFixed(2); // Mbps\r\n          downloadSpeeds.push(parseFloat(speedMbps));\r\n          setChartData((prev) => ({\r\n            download: [...prev.download, parseFloat(speedMbps)],\r\n            upload: prev.upload,\r\n          }));\r\n          console.log(`Amostra de download ${i + 1}: ${speedMbps} Mbps`, 'Status:', response.status);\r\n        }\r\n        avgDownloadSpeed = (downloadSpeeds.reduce((a, b) => a + b, 0) / downloadSamples).toFixed(2);\r\n        setDownloadSpeed(avgDownloadSpeed);\r\n        console.log('Velocidade média de download:', avgDownloadSpeed, 'Mbps');\r\n      } catch (err) {\r\n        console.error('Teste de download falhou:', err.message);\r\n        setError((prev) => prev + ' Teste de download falhou. ');\r\n      }\r\n\r\n      // Upload test with retry\r\n      try {\r\n        const uploadSamples = 3;\r\n        const uploadSpeeds = [];\r\n        const fileSizeMB = 2; // 2MB\r\n        const fileData = new Blob([new ArrayBuffer(fileSizeMB * 1024 * 1024)], { type: 'application/octet-stream' });\r\n        const maxRetries = 2;\r\n        for (let i = 0; i < uploadSamples; i++) {\r\n          let attempt = 0;\r\n          let success = false;\r\n          let lastError = null;\r\n          while (attempt <= maxRetries && !success) {\r\n            try {\r\n              const startTime = performance.now();\r\n              const response = await axios.post('http://localhost:5001/upload', fileData, {\r\n                headers: { 'Content-Type': 'application/octet-stream' },\r\n                timeout: 60000,\r\n              });\r\n              const endTime = performance.now();\r\n              const duration = (endTime - startTime) / 1000; // seconds\r\n              const speedMbps = (fileSizeMB * 8 / duration).toFixed(2); // Mbps\r\n              uploadSpeeds.push(parseFloat(speedMbps));\r\n              setChartData((prev) => ({\r\n                download: prev.download,\r\n                upload: [...prev.upload, parseFloat(speedMbps)],\r\n              }));\r\n              console.log(`Amostra de upload ${i + 1} (tentativa ${attempt + 1}): ${speedMbps} Mbps`, 'Status:', response.status, 'Resposta:', response.data);\r\n              success = true;\r\n            } catch (err) {\r\n              attempt++;\r\n              lastError = err;\r\n              console.warn(`Tentativa de upload ${i + 1} falhou (tentativa ${attempt}):`, err.message, 'Resposta:', err.response?.data, 'Status:', err.response?.status);\r\n              if (attempt <= maxRetries) {\r\n                await new Promise((resolve) => setTimeout(resolve, 1000)); // Wait 1s before retry\r\n              }\r\n            }\r\n          }\r\n          if (!success) {\r\n            throw lastError; // Throw the last error if all retries fail\r\n          }\r\n        }\r\n        avgUploadSpeed = (uploadSpeeds.reduce((a, b) => a + b, 0) / uploadSamples).toFixed(2);\r\n        setUploadSpeed(avgUploadSpeed);\r\n        console.log('Velocidade média de upload:', avgUploadSpeed, 'Mbps');\r\n      } catch (err) {\r\n        console.error('Teste de upload falhou:', err.message, 'Resposta:', err.response?.data, 'Status:', err.response?.status);\r\n        setError((prev) => prev + ` Teste de upload falhou: ${err.message}. `);\r\n      }\r\n\r\n      // Update history even if some tests fail\r\n      if (pingMs || avgDownloadSpeed || avgUploadSpeed) {\r\n        const result = {\r\n          downloadSpeed: avgDownloadSpeed || '-',\r\n          uploadSpeed: avgUploadSpeed || '-',\r\n          latency: pingMs || '-',\r\n          timestamp: new Date().toLocaleString(),\r\n        };\r\n        console.log('Entrada no histórico:', result);\r\n        setHistory((prev) => [result, ...prev].slice(0, 5)); // Keep last 5 results\r\n      } else {\r\n        setError((prev) => prev || 'Falha ao salvar no localStorage.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Erro inesperado:', err.message, 'Resposta:', err.response?.data);\r\n      setError('Falha ao executar teste de velocidade: ' + err.message);\r\n    }\r\n    setTesting(false);\r\n  };\r\n\r\n  // Calcular rotação da agulha e offsets do medidor (0-100 Mbps mapeia para 0-360 deg)\r\n  const downloadGaugeOffset = downloadSpeed ? (1 - parseFloat(downloadSpeed) / 100) * 439.8 : 439.8;\r\n  const uploadGaugeOffset = uploadSpeed ? (1 - parseFloat(uploadSpeed) / 100) * 439.8 : 439.8;\r\n  const needleAngle = testing\r\n    ? 0\r\n    : uploadSpeed\r\n      ? (parseFloat(uploadSpeed) / 100) * 360\r\n      : downloadSpeed\r\n        ? (parseFloat(downloadSpeed) / 100) * 360\r\n        : 0;\r\n\r\n  // Gerar marcas de escala e rótulos\r\n  const ticks = [];\r\n  for (let i = 0; i <= 100; i += 5) {\r\n    const isMajor = i % 20 === 0;\r\n    const angle = (i / 100) * 360;\r\n    const rad = (angle * Math.PI) / 180;\r\n    const innerRadius = isMajor ? 55 : 60;\r\n    const outerRadius = isMajor ? 45 : 50;\r\n    const x1 = 100 + innerRadius * Math.cos(rad);\r\n    const y1 = 100 + innerRadius * Math.sin(rad);\r\n    const x2 = 100 + outerRadius * Math.cos(rad);\r\n    const y2 = 100 + outerRadius * Math.sin(rad);\r\n    ticks.push(\r\n      <line\r\n        key={`tick-${i}`}\r\n        x1={x1}\r\n        y1={y1}\r\n        x2={x2}\r\n        y2={y2}\r\n        stroke=\"#ffffff\"\r\n        strokeWidth={isMajor ? 2 : 1}\r\n      />\r\n    );\r\n    if (isMajor) {\r\n      const labelX = 100 + 35 * Math.cos(rad);\r\n      const labelY = 100 + 35 * Math.sin(rad);\r\n      ticks.push(\r\n        <text\r\n          key={`label-${i}`}\r\n          x={labelX}\r\n          y={labelY}\r\n          fill=\"#ffffff\"\r\n          fontSize=\"10\"\r\n          textAnchor=\"middle\"\r\n          dominantBaseline=\"middle\"\r\n        >\r\n          {i}\r\n        </text>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"speed-test\">\r\n      <Header />\r\n      <main>\r\n        <h1>Teste de Velocidade</h1>\r\n        <p>Teste sua velocidade de internet para uma transmissão ideal no StreamFlix.</p>\r\n        <div className=\"speedometer\">\r\n          <svg viewBox=\"0 0 200 200\">\r\n            <circle\r\n              cx=\"100\"\r\n              cy=\"100\"\r\n              r=\"70\"\r\n              fill=\"none\"\r\n              stroke=\"#1a1a1a\"\r\n              strokeWidth=\"10\"\r\n            />\r\n            <circle\r\n              className={testing || downloadSpeed ? 'gauge download-gauge' : ''}\r\n              cx=\"100\"\r\n              cy=\"100\"\r\n              r=\"70\"\r\n              fill=\"none\"\r\n              stroke=\"#ff0000\"\r\n              strokeWidth=\"5\"\r\n              strokeDasharray=\"439.8\"\r\n              strokeDashoffset={testing ? '0' : downloadGaugeOffset}\r\n            />\r\n            <circle\r\n              className={testing || uploadSpeed ? 'gauge upload-gauge' : ''}\r\n              cx=\"100\"\r\n              cy=\"100\"\r\n              r=\"65\"\r\n              fill=\"none\"\r\n              stroke=\"#ffffff\"\r\n              strokeWidth=\"5\"\r\n              strokeDasharray=\"408.4\"\r\n              strokeDashoffset={testing ? '0' : uploadGaugeOffset}\r\n            />\r\n            {ticks}\r\n            <line\r\n              className={testing || downloadSpeed || uploadSpeed ? 'needle' : ''}\r\n              x1=\"100\"\r\n              y1=\"100\"\r\n              x2=\"100\"\r\n              y2=\"30\"\r\n              stroke=\"#ffffff\"\r\n              strokeWidth=\"4\"\r\n              style={{ transform: `rotate(${needleAngle}deg)`, transformOrigin: '100px 100px' }}\r\n            />\r\n          </svg>\r\n          <div className=\"speed-display\">\r\n            {testing ? 'Testando...' : (\r\n              <>\r\n                {downloadSpeed && <span>Download: {downloadSpeed} Mbps</span>}\r\n                {uploadSpeed && <span> | Upload: {uploadSpeed} Mbps</span>}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"metrics\">\r\n          {latency && <p>Latência: {latency} ms</p>}\r\n          {downloadSpeed && <p>Velocidade de Download: {downloadSpeed} Mbps</p>}\r\n          {uploadSpeed && <p>Velocidade de Upload: {uploadSpeed} Mbps</p>}\r\n        </div>\r\n        <button onClick={runSpeedTest} disabled={testing}>\r\n          {testing ? 'Testando...' : 'Executar Teste de Velocidade'}\r\n        </button>\r\n        {error && <p className=\"error\">{error}</p>}\r\n        <div className=\"chart-container\">\r\n          <h3>Resultados do Teste de Velocidade</h3>\r\n          <canvas id=\"speedChart\" width=\"400\" height=\"200\"></canvas>\r\n        </div>\r\n        {history.length > 0 && (\r\n          <div className=\"history\">\r\n            <h3>Histórico de Testes</h3>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Data</th>\r\n                  <th>Download (Mbps)</th>\r\n                  <th>Upload (Mbps)</th>\r\n                  <th>Latência (ms)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {history.map((entry, index) => (\r\n                  <tr key={index}>\r\n                    <td>{entry.timestamp}</td>\r\n                    <td>{entry.downloadSpeed || '-'}</td>\r\n                    <td>{entry.uploadSpeed || '-'}</td>\r\n                    <td>{entry.latency || '-'}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpeedTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}