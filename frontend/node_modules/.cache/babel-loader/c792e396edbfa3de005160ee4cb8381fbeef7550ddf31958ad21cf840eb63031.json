{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Import posters\nimport kalkiPoster from '../data/Kalki.jpg';\nimport salaarPoster from '../data/salaar.jpg';\nimport chaavaPoster from '../data/chaava.jpg';\nimport rrrPoster from '../data/rrr.jpg';\nimport pushpa2Poster from '../data/pushpa2.jpg';\nimport hiNannaPoster from '../data/hinanna.jpg';\nimport mad2Poster from '../data/mad2.jpg';\nimport courtPoster from '../data/court.jpg';\nimport dragonPoster from '../data/rod.jpg';\nimport saripodaPoster from '../data/ss.jpg';\nimport saahoPoster from '../data/saaho.jpg';\nimport baahubaliPoster from '../data/bb2.jpg';\nimport blackPoster from '../data/black.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState({});\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n  const staticMoviesWithLocalPosters = {\n    \"Chaava\": chaavaPoster,\n    \"Mad2\": mad2Poster,\n    \"Saripoda Sanivaaram\": saripodaPoster\n  };\n  const featuredItem = {\n    id: 271726,\n    title: \"Baahubali: The Beginning\",\n    description: \"A Telugu epic about valor and sacrifice.\",\n    thumbnail: baahubaliPoster,\n    video: \"/videos/bb2.mp4\",\n    language: \"te\",\n    genre: \"Action\"\n  };\n  const initialRowsData = [{\n    title: \"Trending Movies\",\n    items: [{\n      id: 900352,\n      title: \"Kalki 2898 AD\",\n      thumbnail: kalkiPoster,\n      description: \"A sci-fi epic set in a dystopian future.\",\n      language: \"te\",\n      genre: \"Sci-Fi\"\n    }, {\n      id: 934632,\n      title: \"Salaar\",\n      thumbnail: salaarPoster,\n      description: \"An action-packed saga of power and betrayal.\",\n      language: \"te\",\n      genre: \"Action\"\n    }, {\n      id: 0,\n      title: \"Chaava\",\n      thumbnail: chaavaPoster,\n      description: \"A historical drama about bravery.\",\n      isStatic: true,\n      language: \"te\",\n      genre: \"Drama\"\n    }, {\n      id: 614933,\n      title: \"RRR\",\n      thumbnail: rrrPoster,\n      description: \"A revolutionary tale of friendship and rebellion.\",\n      language: \"te\",\n      genre: \"Action\"\n    }, {\n      id: 614934,\n      title: \"Pushpa 2: The Rule\",\n      thumbnail: pushpa2Poster,\n      description: \"A gripping sequel to the smuggling saga.\",\n      language: \"te\",\n      genre: \"Action\"\n    }, {\n      id: 1121402,\n      title: \"Hi Nanna\",\n      thumbnail: hiNannaPoster,\n      description: \"A heartwarming family drama.\",\n      language: \"te\",\n      genre: \"Drama\"\n    }, {\n      id: 1,\n      title: \"Mad2\",\n      thumbnail: mad2Poster,\n      description: \"A thrilling continuation of mystery.\",\n      isStatic: true,\n      language: \"te\",\n      genre: \"Thriller\"\n    }, {\n      id: 297282,\n      title: \"Court\",\n      thumbnail: courtPoster,\n      description: \"A thought-provoking legal drama.\",\n      language: \"te\",\n      genre: \"Drama\"\n    }, {\n      id: 1560,\n      title: \"Return of the Dragon\",\n      thumbnail: dragonPoster,\n      description: \"A classic martial arts adventure.\",\n      language: \"te\",\n      genre: \"Action\"\n    }, {\n      id: 614932,\n      title: \"Saaho\",\n      thumbnail: saahoPoster,\n      description: \"A high-octane action thriller.\",\n      language: \"te\",\n      genre: \"Action\"\n    }, {\n      id: 2,\n      title: \"Saripoda Sanivaaram\",\n      thumbnail: saripodaPoster,\n      description: \"An intense vigilante story.\",\n      isStatic: true,\n      language: \"te\",\n      genre: \"Action\"\n    }]\n  }, {\n    title: \"Watch It Again\",\n    items: [{\n      id: 5,\n      title: \"Inception\",\n      thumbnail: blackPoster,\n      description: \"A mind-bending heist movie.\",\n      language: \"en\",\n      genre: \"Sci-Fi\"\n    }, {\n      id: 6,\n      title: \"Titanic\",\n      thumbnail: blackPoster,\n      description: \"A romantic disaster film.\",\n      language: \"en\",\n      genre: \"Romance\"\n    }]\n  }];\n\n  // Fallback Telugu recommendations for Action genre\n  const fallbackTeluguRecommendations = [{\n    id: 1001,\n    title: \"Magadheera\",\n    thumbnail: blackPoster,\n    description: \"Language: te, Genres: Action/Romance\",\n    language: \"te\",\n    genre: \"Action\"\n  }, {\n    id: 1002,\n    title: \"Eega\",\n    thumbnail: blackPoster,\n    description: \"Language: te, Genres: Action/Fantasy\",\n    language: \"te\",\n    genre: \"Action\"\n  }, {\n    id: 1003,\n    title: \"Dookudu\",\n    thumbnail: blackPoster,\n    description: \"Language: te, Genres: Action/Comedy\",\n    language: \"te\",\n    genre: \"Action\"\n  }];\n\n  // Clear sessionStorage on page load (refresh)\n  useEffect(() => {\n    console.log('Creating new session: Clearing sessionStorage on page load (refresh)');\n    sessionStorage.removeItem('recommendations');\n    setRecommendations({});\n  }, []);\n\n  // Clear sessionStorage on tab close\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      console.log('Ending session: Clearing sessionStorage on tab close');\n      sessionStorage.removeItem('recommendations');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  // Save recommendations to sessionStorage when they change\n  useEffect(() => {\n    if (Object.keys(recommendations).length > 0) {\n      console.log('Saving recommendations to sessionStorage:', recommendations);\n      sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\n    }\n  }, [recommendations]);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n    console.log('Favorites saved to localStorage:', favorites);\n  }, [favorites]);\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        console.log('Removing from favorites:', item.title);\n        const updatedFavorites = prevFavorites.filter(fav => fav.id !== item.id);\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return updatedFavorites;\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        console.log('Adding to favorites:', item.title);\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  const fetchPosterForMovie = async movieTitle => {\n    try {\n      var _data$0$poster;\n      console.log(`Fetching poster for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      console.log(`Poster fetch response for \"${movieTitle}\": Status ${response.status}`);\n      if (!response.ok) {\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}`);\n        return blackPoster;\n      }\n      const data = await response.json();\n      console.log(`Poster fetch data for \"${movieTitle}\":`, data);\n      if (Array.isArray(data) && data.length > 0 && (_data$0$poster = data[0].poster) !== null && _data$0$poster !== void 0 && _data$0$poster.trim()) {\n        return data[0].poster;\n      }\n      console.warn(`No valid poster for \"${movieTitle}\"`);\n      return blackPoster;\n    } catch (err) {\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err.message);\n      return blackPoster;\n    }\n  };\n  const fetchRecommendations = async (movieTitle, language, genre) => {\n    if (recommendations[movieTitle]) {\n      console.log(`Recommendations for \"${movieTitle}\" already exist in session, skipping fetch.`);\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    let recommendationsData = [];\n    try {\n      // Try exact title request first\n      console.log(`Fetching recommendations for \"${movieTitle}\" (Language: ${language}, Genre: ${genre || 'Any'}) with exact title...`);\n      const titleRequestBody = {\n        movie_title: movieTitle\n      };\n      console.log(`Title request body for \"${movieTitle}\":`, titleRequestBody);\n      const titleResponse = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(titleRequestBody)\n      });\n      console.log(`Title fetch response for \"${movieTitle}\": Status ${titleResponse.status}`);\n      if (!titleResponse.ok) {\n        console.warn(`Title fetch failed for \"${movieTitle}\": Status ${titleResponse.status}`);\n      } else {\n        const titleData = await titleResponse.json();\n        console.log(`Title fetch data for \"${movieTitle}\":`, titleData);\n        if (Array.isArray(titleData) && titleData.length > 0) {\n          recommendationsData = titleData;\n        }\n      }\n\n      // Try genre/language request for Telugu movies if no results\n      if (recommendationsData.length === 0 && language === 'te') {\n        console.log(`No results from title request for \"${movieTitle}\", trying genre/language...`);\n        const genreRequestBody = {\n          movie_title: movieTitle,\n          genre,\n          language: 'te'\n        };\n        console.log(`Genre/language request body for \"${movieTitle}\":`, genreRequestBody);\n        const genreResponse = await fetch('http://localhost:5000/recommend', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(genreRequestBody)\n        });\n        console.log(`Genre/language fetch response for \"${movieTitle}\": Status ${genreResponse.status}`);\n        if (!genreResponse.ok) {\n          console.warn(`Genre/language fetch failed for \"${movieTitle}\": Status ${genreResponse.status}`);\n        } else {\n          const genreData = await genreResponse.json();\n          console.log(`Genre/language fetch data for \"${movieTitle}\":`, genreData);\n          if (Array.isArray(genreData) && genreData.length > 0) {\n            recommendationsData = genreData;\n          }\n        }\n      }\n\n      // Process recommendations\n      if (recommendationsData.length > 0) {\n        // Minimal filtering to include all Telugu movies\n        const filteredData = language === 'te' ? recommendationsData.filter(item => !item.original_language || item.original_language.toLowerCase() === 'te') : recommendationsData;\n        console.log(`Filtered data for \"${movieTitle}\":`, filteredData);\n        const uniqueData = Array.from(new Map(filteredData.map(item => [item.title.toLowerCase(), item])).values());\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        recommendationsData = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => ({\n          id: i + 100,\n          title: rec.title,\n          thumbnail: rec.poster || blackPoster,\n          description: `Language: ${rec.original_language || language}, Genres: ${rec.genres || genre || 'N/A'}`,\n          language: rec.original_language || language,\n          genre: rec.genres || genre\n        }));\n      }\n      if (recommendationsData.length === 0) {\n        console.warn(`No recommendations received for \"${movieTitle}\"`);\n      }\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: recommendationsData\n      }));\n    } catch (err) {\n      console.error(`Network error fetching recommendations for \"${movieTitle}\":`, err.message);\n      setError(null); // Suppress UI error\n      if (language === 'te') {\n        console.warn(`Using static fallback for \"${movieTitle}\" due to network error: ${err.message}`);\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: fallbackTeluguRecommendations\n        }));\n      } else {\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: []\n        }));\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\n        for (const row of updatedRows) {\n          if (row.title === \"Watch It Again\") {\n            for (const item of row.items) {\n              if (item.language === \"en\") {\n                item.thumbnail = await fetchPosterForMovie(item.title);\n              }\n            }\n          }\n        }\n        setInitialRows(updatedRows);\n        // Fetch Baahubali recommendations if not already present\n        if (featuredItem.language === \"te\" && !recommendations[featuredItem.title]) {\n          await fetchRecommendations(featuredItem.title, featuredItem.language, featuredItem.genre);\n        }\n      } catch (err) {\n        console.error('Initial fetch error:', err);\n        setError(null); // Suppress UI error\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n  const handleMoreInfo = item => {\n    const updatedItem = {\n      ...item,\n      thumbnail: item.isStatic && staticMoviesWithLocalPosters[item.title] ? staticMoviesWithLocalPosters[item.title] : item.thumbnail\n    };\n    setSelectedItem(updatedItem);\n    if (!recommendations[item.title]) {\n      fetchRecommendations(item.title, item.language, item.genre);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites,\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites,\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites,\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet. Click \\\"More Info\\\" to fetch recommendations.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading recommendations...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 289,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"m9T5wGauBJhSYtH3jCSqYLK7MWk=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Header","Hero","Row","Modal","Footer","kalkiPoster","salaarPoster","chaavaPoster","rrrPoster","pushpa2Poster","hiNannaPoster","mad2Poster","courtPoster","dragonPoster","saripodaPoster","saahoPoster","baahubaliPoster","blackPoster","jsxDEV","_jsxDEV","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","JSON","parse","localStorage","getItem","notification","setNotification","staticMoviesWithLocalPosters","featuredItem","id","title","description","thumbnail","video","language","genre","initialRowsData","items","isStatic","fallbackTeluguRecommendations","console","log","sessionStorage","removeItem","handleBeforeUnload","window","addEventListener","removeEventListener","Object","keys","length","setItem","stringify","scrollTo","toggleFavorite","item","prevFavorites","isFavorited","some","fav","updatedFavorites","filter","setTimeout","fetchPosterForMovie","movieTitle","_data$0$poster","response","fetch","method","headers","body","movie_title","status","ok","warn","data","json","Array","isArray","poster","trim","err","message","fetchRecommendations","recommendationsData","titleRequestBody","titleResponse","titleData","genreRequestBody","genreResponse","genreData","filteredData","original_language","toLowerCase","uniqueData","from","Map","map","values","numRecs","Math","floor","random","shuffled","sort","slice","min","rec","i","genres","prev","fetchInitialData","updatedRows","row","handleMoreInfo","updatedItem","className","children","onMoreInfo","fileName","_jsxFileName","lineNumber","columnNumber","index","entries","recs","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Import posters\r\nimport kalkiPoster from '../data/Kalki.jpg';\r\nimport salaarPoster from '../data/salaar.jpg';\r\nimport chaavaPoster from '../data/chaava.jpg';\r\nimport rrrPoster from '../data/rrr.jpg';\r\nimport pushpa2Poster from '../data/pushpa2.jpg';\r\nimport hiNannaPoster from '../data/hinanna.jpg';\r\nimport mad2Poster from '../data/mad2.jpg';\r\nimport courtPoster from '../data/court.jpg';\r\nimport dragonPoster from '../data/rod.jpg';\r\nimport saripodaPoster from '../data/ss.jpg';\r\nimport saahoPoster from '../data/saaho.jpg';\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\nimport blackPoster from '../data/black.jpg';\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState({});\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\r\n  const [notification, setNotification] = useState('');\r\n\r\n  const staticMoviesWithLocalPosters = {\r\n    \"Chaava\": chaavaPoster,\r\n    \"Mad2\": mad2Poster,\r\n    \"Saripoda Sanivaaram\": saripodaPoster,\r\n  };\r\n\r\n  const featuredItem = {\r\n    id: 271726,\r\n    title: \"Baahubali: The Beginning\",\r\n    description: \"A Telugu epic about valor and sacrifice.\",\r\n    thumbnail: baahubaliPoster,\r\n    video: \"/videos/bb2.mp4\",\r\n    language: \"te\",\r\n    genre: \"Action\"\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: \"Trending Movies\",\r\n      items: [\r\n        { id: 900352, title: \"Kalki 2898 AD\", thumbnail: kalkiPoster, description: \"A sci-fi epic set in a dystopian future.\", language: \"te\", genre: \"Sci-Fi\" },\r\n        { id: 934632, title: \"Salaar\", thumbnail: salaarPoster, description: \"An action-packed saga of power and betrayal.\", language: \"te\", genre: \"Action\" },\r\n        { id: 0, title: \"Chaava\", thumbnail: chaavaPoster, description: \"A historical drama about bravery.\", isStatic: true, language: \"te\", genre: \"Drama\" },\r\n        { id: 614933, title: \"RRR\", thumbnail: rrrPoster, description: \"A revolutionary tale of friendship and rebellion.\", language: \"te\", genre: \"Action\" },\r\n        { id: 614934, title: \"Pushpa 2: The Rule\", thumbnail: pushpa2Poster, description: \"A gripping sequel to the smuggling saga.\", language: \"te\", genre: \"Action\" },\r\n        { id: 1121402, title: \"Hi Nanna\", thumbnail: hiNannaPoster, description: \"A heartwarming family drama.\", language: \"te\", genre: \"Drama\" },\r\n        { id: 1, title: \"Mad2\", thumbnail: mad2Poster, description: \"A thrilling continuation of mystery.\", isStatic: true, language: \"te\", genre: \"Thriller\" },\r\n        { id: 297282, title: \"Court\", thumbnail: courtPoster, description: \"A thought-provoking legal drama.\", language: \"te\", genre: \"Drama\" },\r\n        { id: 1560, title: \"Return of the Dragon\", thumbnail: dragonPoster, description: \"A classic martial arts adventure.\", language: \"te\", genre: \"Action\" },\r\n        { id: 614932, title: \"Saaho\", thumbnail: saahoPoster, description: \"A high-octane action thriller.\", language: \"te\", genre: \"Action\" },\r\n        { id: 2, title: \"Saripoda Sanivaaram\", thumbnail: saripodaPoster, description: \"An intense vigilante story.\", isStatic: true, language: \"te\", genre: \"Action\" },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Watch It Again\",\r\n      items: [\r\n        { id: 5, title: \"Inception\", thumbnail: blackPoster, description: \"A mind-bending heist movie.\", language: \"en\", genre: \"Sci-Fi\" },\r\n        { id: 6, title: \"Titanic\", thumbnail: blackPoster, description: \"A romantic disaster film.\", language: \"en\", genre: \"Romance\" },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // Fallback Telugu recommendations for Action genre\r\n  const fallbackTeluguRecommendations = [\r\n    { id: 1001, title: \"Magadheera\", thumbnail: blackPoster, description: \"Language: te, Genres: Action/Romance\", language: \"te\", genre: \"Action\" },\r\n    { id: 1002, title: \"Eega\", thumbnail: blackPoster, description: \"Language: te, Genres: Action/Fantasy\", language: \"te\", genre: \"Action\" },\r\n    { id: 1003, title: \"Dookudu\", thumbnail: blackPoster, description: \"Language: te, Genres: Action/Comedy\", language: \"te\", genre: \"Action\" },\r\n  ];\r\n\r\n  // Clear sessionStorage on page load (refresh)\r\n  useEffect(() => {\r\n    console.log('Creating new session: Clearing sessionStorage on page load (refresh)');\r\n    sessionStorage.removeItem('recommendations');\r\n    setRecommendations({});\r\n  }, []);\r\n\r\n  // Clear sessionStorage on tab close\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      console.log('Ending session: Clearing sessionStorage on tab close');\r\n      sessionStorage.removeItem('recommendations');\r\n    };\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  // Save recommendations to sessionStorage when they change\r\n  useEffect(() => {\r\n    if (Object.keys(recommendations).length > 0) {\r\n      console.log('Saving recommendations to sessionStorage:', recommendations);\r\n      sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\r\n    }\r\n  }, [recommendations]);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n    console.log('Favorites saved to localStorage:', favorites);\r\n  }, [favorites]);\r\n\r\n  const toggleFavorite = (item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        console.log('Removing from favorites:', item.title);\r\n        const updatedFavorites = prevFavorites.filter((fav) => fav.id !== item.id);\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return updatedFavorites;\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        console.log('Adding to favorites:', item.title);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchPosterForMovie = async (movieTitle) => {\r\n    try {\r\n      console.log(`Fetching poster for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n      });\r\n      console.log(`Poster fetch response for \"${movieTitle}\": Status ${response.status}`);\r\n      if (!response.ok) {\r\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}`);\r\n        return blackPoster;\r\n      }\r\n      const data = await response.json();\r\n      console.log(`Poster fetch data for \"${movieTitle}\":`, data);\r\n      if (Array.isArray(data) && data.length > 0 && data[0].poster?.trim()) {\r\n        return data[0].poster;\r\n      }\r\n      console.warn(`No valid poster for \"${movieTitle}\"`);\r\n      return blackPoster;\r\n    } catch (err) {\r\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err.message);\r\n      return blackPoster;\r\n    }\r\n  };\r\n\r\n  const fetchRecommendations = async (movieTitle, language, genre) => {\r\n    if (recommendations[movieTitle]) {\r\n      console.log(`Recommendations for \"${movieTitle}\" already exist in session, skipping fetch.`);\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    setError(null);\r\n    let recommendationsData = [];\r\n    try {\r\n      // Try exact title request first\r\n      console.log(`Fetching recommendations for \"${movieTitle}\" (Language: ${language}, Genre: ${genre || 'Any'}) with exact title...`);\r\n      const titleRequestBody = { movie_title: movieTitle };\r\n      console.log(`Title request body for \"${movieTitle}\":`, titleRequestBody);\r\n      const titleResponse = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(titleRequestBody),\r\n      });\r\n      console.log(`Title fetch response for \"${movieTitle}\": Status ${titleResponse.status}`);\r\n      if (!titleResponse.ok) {\r\n        console.warn(`Title fetch failed for \"${movieTitle}\": Status ${titleResponse.status}`);\r\n      } else {\r\n        const titleData = await titleResponse.json();\r\n        console.log(`Title fetch data for \"${movieTitle}\":`, titleData);\r\n        if (Array.isArray(titleData) && titleData.length > 0) {\r\n          recommendationsData = titleData;\r\n        }\r\n      }\r\n\r\n      // Try genre/language request for Telugu movies if no results\r\n      if (recommendationsData.length === 0 && language === 'te') {\r\n        console.log(`No results from title request for \"${movieTitle}\", trying genre/language...`);\r\n        const genreRequestBody = { movie_title: movieTitle, genre, language: 'te' };\r\n        console.log(`Genre/language request body for \"${movieTitle}\":`, genreRequestBody);\r\n        const genreResponse = await fetch('http://localhost:5000/recommend', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(genreRequestBody),\r\n        });\r\n        console.log(`Genre/language fetch response for \"${movieTitle}\": Status ${genreResponse.status}`);\r\n        if (!genreResponse.ok) {\r\n          console.warn(`Genre/language fetch failed for \"${movieTitle}\": Status ${genreResponse.status}`);\r\n        } else {\r\n          const genreData = await genreResponse.json();\r\n          console.log(`Genre/language fetch data for \"${movieTitle}\":`, genreData);\r\n          if (Array.isArray(genreData) && genreData.length > 0) {\r\n            recommendationsData = genreData;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Process recommendations\r\n      if (recommendationsData.length > 0) {\r\n        // Minimal filtering to include all Telugu movies\r\n        const filteredData = language === 'te' ? recommendationsData.filter(item => !item.original_language || item.original_language.toLowerCase() === 'te') : recommendationsData;\r\n        console.log(`Filtered data for \"${movieTitle}\":`, filteredData);\r\n        const uniqueData = Array.from(new Map(filteredData.map(item => [item.title.toLowerCase(), item])).values());\r\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        recommendationsData = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => ({\r\n          id: i + 100,\r\n          title: rec.title,\r\n          thumbnail: rec.poster || blackPoster,\r\n          description: `Language: ${rec.original_language || language}, Genres: ${rec.genres || genre || 'N/A'}`,\r\n          language: rec.original_language || language,\r\n          genre: rec.genres || genre\r\n        }));\r\n      }\r\n\r\n      if (recommendationsData.length === 0) {\r\n        console.warn(`No recommendations received for \"${movieTitle}\"`);\r\n      }\r\n\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: recommendationsData }));\r\n    } catch (err) {\r\n      console.error(`Network error fetching recommendations for \"${movieTitle}\":`, err.message);\r\n      setError(null); // Suppress UI error\r\n      if (language === 'te') {\r\n        console.warn(`Using static fallback for \"${movieTitle}\" due to network error: ${err.message}`);\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: fallbackTeluguRecommendations }));\r\n      } else {\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\r\n        for (const row of updatedRows) {\r\n          if (row.title === \"Watch It Again\") {\r\n            for (const item of row.items) {\r\n              if (item.language === \"en\") {\r\n                item.thumbnail = await fetchPosterForMovie(item.title);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setInitialRows(updatedRows);\r\n        // Fetch Baahubali recommendations if not already present\r\n        if (featuredItem.language === \"te\" && !recommendations[featuredItem.title]) {\r\n          await fetchRecommendations(featuredItem.title, featuredItem.language, featuredItem.genre);\r\n        }\r\n      } catch (err) {\r\n        console.error('Initial fetch error:', err);\r\n        setError(null); // Suppress UI error\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, []);\r\n\r\n  const handleMoreInfo = (item) => {\r\n    const updatedItem = {\r\n      ...item,\r\n      thumbnail: item.isStatic && staticMoviesWithLocalPosters[item.title] ? staticMoviesWithLocalPosters[item.title] : item.thumbnail\r\n    };\r\n    setSelectedItem(updatedItem);\r\n    if (!recommendations[item.title]) {\r\n      fetchRecommendations(item.title, item.language, item.genre);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet. Click \"More Info\" to fetch recommendations.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading recommendations...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}