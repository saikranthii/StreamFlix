{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Import posters\nimport kalkiPoster from '../data/Kalki.jpg';\nimport salaarPoster from '../data/salaar.jpg';\nimport chaavaPoster from '../data/chaava.jpg';\nimport rrrPoster from '../data/rrr.jpg';\nimport pushpa2Poster from '../data/pushpa2.jpg';\nimport hiNannaPoster from '../data/hinanna.jpg';\nimport mad2Poster from '../data/mad2.jpg';\nimport courtPoster from '../data/court.jpg';\nimport dragonPoster from '../data/rod.jpg';\nimport saripodaPoster from '../data/ss.jpg';\nimport saahoPoster from '../data/saaho.jpg';\nimport baahubaliPoster from '../data/bb2.jpg';\nimport blackPoster from '../data/black.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState(() => {\n    const saved = sessionStorage.getItem('recommendations');\n    console.log('Initializing recommendations from sessionStorage:', saved);\n    return saved ? JSON.parse(saved) : {};\n  });\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n\n  // Map of static movies to their local posters\n  const staticMoviesWithLocalPosters = {\n    'Kalki 2898 AD': kalkiPoster,\n    'Salaar: Part 1 – Ceasefire': salaarPoster,\n    Chhaava: chaavaPoster,\n    RRR: rrrPoster,\n    'Pushpa 2: The Rule': pushpa2Poster,\n    'Hi Nanna': hiNannaPoster,\n    Mad2: mad2Poster,\n    Court: courtPoster,\n    'Return of the Dragon': dragonPoster,\n    'Saripodhaa Sanivaaram': saripodaPoster,\n    Saaho: saahoPoster,\n    'Baahubali 2: The Conclusion': baahubaliPoster,\n    'Baahubali: The Beginning': baahubaliPoster,\n    Inception: blackPoster,\n    Titanic: blackPoster\n  };\n  const featuredItem = {\n    id: 271726,\n    title: 'Baahubali: The Beginning',\n    description: 'A Telugu epic about valor and sacrifice.',\n    thumbnail: baahubaliPoster,\n    video: '/videos/bb2.mp4',\n    language: 'te',\n    genres: ['Action', 'Period', 'Epic']\n  };\n  const initialRowsData = [{\n    title: 'Trending Movies',\n    items: [{\n      id: 900352,\n      title: 'Kalki 2898 AD',\n      thumbnail: kalkiPoster,\n      description: 'A futuristic film inspired by Hindu mythology.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Sci-Fi', 'Mythology', 'Action']\n    }, {\n      id: 934632,\n      title: 'Salaar: Part 1 – Ceasefire',\n      thumbnail: salaarPoster,\n      description: 'An action-packed saga of power and betrayal.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Drama', 'Epic']\n    }, {\n      id: 0,\n      title: 'Chhaava',\n      thumbnail: chaavaPoster,\n      description: 'A historical drama about bravery.',\n      isStatic: true,\n      language: 'hi',\n      genres: ['Historical', 'Action', 'Drama']\n    }, {\n      id: 614933,\n      title: 'RRR',\n      thumbnail: rrrPoster,\n      description: 'A revolutionary tale of friendship and rebellion.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Historical', 'Drama', 'Epic']\n    }, {\n      id: 614934,\n      title: 'Pushpa 2: The Rule',\n      thumbnail: pushpa2Poster,\n      description: 'A gripping sequel to the smuggling saga.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Drama']\n    }, {\n      id: 1121402,\n      title: 'Hi Nanna',\n      thumbnail: hiNannaPoster,\n      description: 'A heartwarming family drama.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Romance', 'Drama']\n    }, {\n      id: 1,\n      title: 'Mad2',\n      thumbnail: mad2Poster,\n      description: 'A thrilling continuation of mystery.',\n      isStatic: true,\n      language: 'te',\n      genres: ['Comedy', 'Drama', 'Coming-of-Age']\n    }, {\n      id: 297282,\n      title: 'Court',\n      thumbnail: courtPoster,\n      description: 'A thought-provoking legal drama.',\n      language: 'mr',\n      isStatic: true,\n      genres: ['Drama', 'Legal']\n    }, {\n      id: 1560,\n      title: 'Return of the Dragon',\n      thumbnail: dragonPoster,\n      description: 'A classic martial arts adventure.',\n      language: 'en',\n      isStatic: true,\n      genres: ['Action', 'Comedy', 'Martial Arts']\n    }, {\n      id: 614932,\n      title: 'Saaho',\n      thumbnail: saahoPoster,\n      description: 'A high-octane action thriller.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Thriller']\n    }, {\n      id: 2,\n      title: 'Saripodhaa Sanivaaram',\n      thumbnail: saripodaPoster,\n      description: 'An intense vigilante story.',\n      isStatic: true,\n      language: 'te',\n      genres: ['Action', 'Thriller', 'Vigilante']\n    }, {\n      id: 301345,\n      title: 'Baahubali 2: The Conclusion',\n      thumbnail: baahubaliPoster,\n      description: 'The epic conclusion of a warrior’s saga.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Period', 'Epic']\n    }]\n  }, {\n    title: 'Watch It Again',\n    items: [{\n      id: 5,\n      title: 'Inception',\n      thumbnail: blackPoster,\n      description: 'A mind-bending heist movie.',\n      language: 'en',\n      isStatic: true,\n      genres: ['Sci-Fi', 'Thriller']\n    }, {\n      id: 6,\n      title: 'Titanic',\n      thumbnail: blackPoster,\n      description: 'A romantic disaster film.',\n      language: 'en',\n      isStatic: true,\n      genres: ['Romance', 'Drama']\n    }]\n  }];\n\n  // Fallback recommendations for when API fails\n  const fallbackRecommendations = [{\n    id: 1001,\n    title: 'Aditya 369',\n    thumbnail: blackPoster,\n    description: 'A sci-fi adventure with time travel.',\n    language: 'te',\n    genres: ['Sci-Fi', 'Adventure']\n  }, {\n    id: 1002,\n    title: 'Magadheera',\n    thumbnail: blackPoster,\n    description: 'An epic reincarnation saga.',\n    language: 'te',\n    genres: ['Action', 'Romance', 'Epic']\n  }, {\n    id: 1003,\n    title: 'Eega',\n    thumbnail: blackPoster,\n    description: 'A unique revenge story of a reincarnated fly.',\n    language: 'te',\n    genres: ['Fantasy', 'Action']\n  }, {\n    id: 1004,\n    title: 'Arundhati',\n    thumbnail: blackPoster,\n    description: 'A supernatural horror thriller.',\n    language: 'te',\n    genres: ['Horror', 'Thriller']\n  }, {\n    id: 1005,\n    title: 'Bharateeyudu',\n    thumbnail: blackPoster,\n    description: 'A vigilante fights corruption.',\n    language: 'te',\n    genres: ['Action', 'Drama']\n  }];\n\n  // List of static movie titles for genre-based recommendations\n  const staticMovieTitles = initialRowsData[0].items.map(item => item.title);\n\n  // Clear recommendations from sessionStorage on page unload\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      console.log('Clearing recommendations from sessionStorage on unload');\n      sessionStorage.removeItem('recommendations');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n\n  // Save favorites to localStorage\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n    console.log('Favorites saved to localStorage:', favorites);\n  }, [favorites]);\n\n  // Save recommendations to sessionStorage\n  useEffect(() => {\n    console.log('Saving recommendations to sessionStorage:', recommendations);\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\n  }, [recommendations]);\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        console.log('Removing from favorites:', item.title);\n        const updatedFavorites = prevFavorites.filter(fav => fav.id !== item.id);\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return updatedFavorites;\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        console.log('Adding to favorites:', item.title);\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/random-telugu', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data) && data.length > 0) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\n          id: i + 200,\n          title: rec.title,\n          thumbnail: staticMoviesWithLocalPosters[rec.title] || (rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=No+Poster' ? rec.poster : blackPoster),\n          description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n          language: rec.original_language || 'te'\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        console.warn(`No valid recommendations for \"${movieTitle}\". Using fallback.`);\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: fallbackRecommendations.slice(0, numMovies)\n        }));\n      }\n    } catch (err) {\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\n      setError(`Failed to fetch recommendations. Showing fallback recommendations.`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: fallbackRecommendations.slice(0, numMovies)\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchTeluguRecommendationsByGenre = async (movieTitle, genres, numMovies) => {\n    setLoading(true);\n    setError(null);\n    const normalizedGenres = genres.map(genre => {\n      switch (genre.toLowerCase()) {\n        case 'epic mythological science fiction':\n          return ['Sci-Fi', 'Mythology', 'Action'];\n        case 'epic action drama':\n          return ['Action', 'Drama', 'Epic'];\n        case 'historical action drama':\n          return ['Historical', 'Action', 'Drama'];\n        case 'epic historical action drama':\n          return ['Action', 'Historical', 'Drama', 'Epic'];\n        case 'action drama':\n          return ['Action', 'Drama'];\n        case 'romantic drama':\n          return ['Romance', 'Drama'];\n        case 'coming-of-age comedy-drama':\n          return ['Comedy', 'Drama', 'Coming-of-Age'];\n        case 'legal drama':\n          return ['Drama', 'Legal'];\n        case 'martial arts action comedy':\n          return ['Action', 'Comedy', 'Martial Arts'];\n        case 'vigilante action thriller':\n          return ['Action', 'Thriller', 'Vigilante'];\n        case 'action thriller':\n          return ['Action', 'Thriller'];\n        case 'epic period action':\n          return ['Action', 'Period', 'Epic'];\n        default:\n          return genre;\n      }\n    }).flat();\n    try {\n      console.log(`Fetching ${numMovies} Telugu recommendations for \"${movieTitle}\" in genres: ${normalizedGenres.join(', ')}...`);\n      const response = await fetch('http://localhost:5000/random-telugu-by-genre', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          genres: normalizedGenres,\n          exclude_titles: staticMovieTitles\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data) && data.length > 0) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\n          id: i + 200,\n          title: rec.title,\n          thumbnail: staticMoviesWithLocalPosters[rec.title] || (rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=No+Poster' ? rec.poster : blackPoster),\n          description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n          language: rec.original_language || 'te'\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        console.warn(`No genre-based recommendations for \"${movieTitle}\". Falling back to random Telugu recommendations.`);\n        await fetchRandomTeluguRecommendations(movieTitle, numMovies);\n      }\n    } catch (err) {\n      console.warn(`Failed to fetch genre-based recommendations for \"${movieTitle}\": ${err.message}. Falling back to random Telugu recommendations.`);\n      await fetchRandomTeluguRecommendations(movieTitle, numMovies);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchRecommendations = async movieTitle => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data) && data.length > 0) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => ({\n          id: i + 100,\n          title: rec.title,\n          thumbnail: staticMoviesWithLocalPosters[rec.title] || (rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=No+Poster' ? rec.poster : blackPoster),\n          description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\n          language: rec.original_language || 'en'\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: mappedRecommendations\n        }));\n      } else {\n        console.warn(`No recommendations for \"${movieTitle}\". Using fallback.`);\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: fallbackRecommendations.slice(0, 5)\n        }));\n      }\n    } catch (err) {\n      console.error(`Error fetching recommendations for \"${movieTitle}\":`, err);\n      setError(`Failed to fetch recommendations. Showing fallback recommendations.`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: fallbackRecommendations.slice(0, 5)\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        // Use initialRowsData directly since all posters are static\n        setInitialRows(initialRowsData);\n        if (featuredItem.language === 'te' && !recommendations[featuredItem.title]) {\n          const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n          await fetchRandomTeluguRecommendations(featuredItem.title, numRecs);\n        }\n      } catch (err) {\n        setError('Failed to fetch initial data');\n        console.error('Initial fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, [recommendations]);\n  const handleMoreInfo = item => {\n    const updatedItem = {\n      ...item,\n      thumbnail: staticMoviesWithLocalPosters[item.title] || item.thumbnail || blackPoster\n    };\n    setSelectedItem(updatedItem);\n    const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n    if (staticMovieTitles.includes(item.title)) {\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\n    } else if (item.language === 'te') {\n      fetchRandomTeluguRecommendations(item.title, numRecs);\n    } else {\n      fetchRecommendations(item.title);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading recommendations...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"ZeQ/juDncc6iGOk4Jn2j4/7+q60=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Header","Hero","Row","Modal","Footer","kalkiPoster","salaarPoster","chaavaPoster","rrrPoster","pushpa2Poster","hiNannaPoster","mad2Poster","courtPoster","dragonPoster","saripodaPoster","saahoPoster","baahubaliPoster","blackPoster","jsxDEV","_jsxDEV","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","saved","sessionStorage","getItem","console","log","JSON","parse","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","localStorage","notification","setNotification","staticMoviesWithLocalPosters","Chhaava","RRR","Mad2","Court","Saaho","Inception","Titanic","featuredItem","id","title","description","thumbnail","video","language","genres","initialRowsData","items","isStatic","fallbackRecommendations","staticMovieTitles","map","item","handleBeforeUnload","removeItem","window","addEventListener","removeEventListener","scrollTo","setItem","stringify","toggleFavorite","prevFavorites","isFavorited","some","fav","updatedFavorites","filter","setTimeout","fetchRandomTeluguRecommendations","movieTitle","numMovies","response","fetch","method","headers","ok","Error","status","data","json","Array","isArray","length","uniqueData","from","Map","toLowerCase","values","shuffled","sort","Math","random","selectedRecommendations","slice","min","rec","i","poster","original_language","prev","warn","err","fetchTeluguRecommendationsByGenre","normalizedGenres","genre","flat","join","body","exclude_titles","message","fetchRecommendations","movie_title","numRecs","floor","mappedRecommendations","fetchInitialData","handleMoreInfo","updatedItem","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onMoreInfo","row","index","Object","entries","recs","keys","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Import posters\r\nimport kalkiPoster from '../data/Kalki.jpg';\r\nimport salaarPoster from '../data/salaar.jpg';\r\nimport chaavaPoster from '../data/chaava.jpg';\r\nimport rrrPoster from '../data/rrr.jpg';\r\nimport pushpa2Poster from '../data/pushpa2.jpg';\r\nimport hiNannaPoster from '../data/hinanna.jpg';\r\nimport mad2Poster from '../data/mad2.jpg';\r\nimport courtPoster from '../data/court.jpg';\r\nimport dragonPoster from '../data/rod.jpg';\r\nimport saripodaPoster from '../data/ss.jpg';\r\nimport saahoPoster from '../data/saaho.jpg';\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\nimport blackPoster from '../data/black.jpg';\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState(() => {\r\n    const saved = sessionStorage.getItem('recommendations');\r\n    console.log('Initializing recommendations from sessionStorage:', saved);\r\n    return saved ? JSON.parse(saved) : {};\r\n  });\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() =>\r\n    JSON.parse(localStorage.getItem('myList') || '[]')\r\n  );\r\n  const [notification, setNotification] = useState('');\r\n\r\n  // Map of static movies to their local posters\r\n  const staticMoviesWithLocalPosters = {\r\n    'Kalki 2898 AD': kalkiPoster,\r\n    'Salaar: Part 1 – Ceasefire': salaarPoster,\r\n    Chhaava: chaavaPoster,\r\n    RRR: rrrPoster,\r\n    'Pushpa 2: The Rule': pushpa2Poster,\r\n    'Hi Nanna': hiNannaPoster,\r\n    Mad2: mad2Poster,\r\n    Court: courtPoster,\r\n    'Return of the Dragon': dragonPoster,\r\n    'Saripodhaa Sanivaaram': saripodaPoster,\r\n    Saaho: saahoPoster,\r\n    'Baahubali 2: The Conclusion': baahubaliPoster,\r\n    'Baahubali: The Beginning': baahubaliPoster,\r\n    Inception: blackPoster,\r\n    Titanic: blackPoster,\r\n  };\r\n\r\n  const featuredItem = {\r\n    id: 271726,\r\n    title: 'Baahubali: The Beginning',\r\n    description: 'A Telugu epic about valor and sacrifice.',\r\n    thumbnail: baahubaliPoster,\r\n    video: '/videos/bb2.mp4',\r\n    language: 'te',\r\n    genres: ['Action', 'Period', 'Epic'],\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: 'Trending Movies',\r\n      items: [\r\n        { id: 900352, title: 'Kalki 2898 AD', thumbnail: kalkiPoster, description: 'A futuristic film inspired by Hindu mythology.', language: 'te', isStatic: true, genres: ['Sci-Fi', 'Mythology', 'Action'] },\r\n        { id: 934632, title: 'Salaar: Part 1 – Ceasefire', thumbnail: salaarPoster, description: 'An action-packed saga of power and betrayal.', language: 'te', isStatic: true, genres: ['Action', 'Drama', 'Epic'] },\r\n        { id: 0, title: 'Chhaava', thumbnail: chaavaPoster, description: 'A historical drama about bravery.', isStatic: true, language: 'hi', genres: ['Historical', 'Action', 'Drama'] },\r\n        { id: 614933, title: 'RRR', thumbnail: rrrPoster, description: 'A revolutionary tale of friendship and rebellion.', language: 'te', isStatic: true, genres: ['Action', 'Historical', 'Drama', 'Epic'] },\r\n        { id: 614934, title: 'Pushpa 2: The Rule', thumbnail: pushpa2Poster, description: 'A gripping sequel to the smuggling saga.', language: 'te', isStatic: true, genres: ['Action', 'Drama'] },\r\n        { id: 1121402, title: 'Hi Nanna', thumbnail: hiNannaPoster, description: 'A heartwarming family drama.', language: 'te', isStatic: true, genres: ['Romance', 'Drama'] },\r\n        { id: 1, title: 'Mad2', thumbnail: mad2Poster, description: 'A thrilling continuation of mystery.', isStatic: true, language: 'te', genres: ['Comedy', 'Drama', 'Coming-of-Age'] },\r\n        { id: 297282, title: 'Court', thumbnail: courtPoster, description: 'A thought-provoking legal drama.', language: 'mr', isStatic: true, genres: ['Drama', 'Legal'] },\r\n        { id: 1560, title: 'Return of the Dragon', thumbnail: dragonPoster, description: 'A classic martial arts adventure.', language: 'en', isStatic: true, genres: ['Action', 'Comedy', 'Martial Arts'] },\r\n        { id: 614932, title: 'Saaho', thumbnail: saahoPoster, description: 'A high-octane action thriller.', language: 'te', isStatic: true, genres: ['Action', 'Thriller'] },\r\n        { id: 2, title: 'Saripodhaa Sanivaaram', thumbnail: saripodaPoster, description: 'An intense vigilante story.', isStatic: true, language: 'te', genres: ['Action', 'Thriller', 'Vigilante'] },\r\n        { id: 301345, title: 'Baahubali 2: The Conclusion', thumbnail: baahubaliPoster, description: 'The epic conclusion of a warrior’s saga.', language: 'te', isStatic: true, genres: ['Action', 'Period', 'Epic'] },\r\n      ],\r\n    },\r\n    {\r\n      title: 'Watch It Again',\r\n      items: [\r\n        { id: 5, title: 'Inception', thumbnail: blackPoster, description: 'A mind-bending heist movie.', language: 'en', isStatic: true, genres: ['Sci-Fi', 'Thriller'] },\r\n        { id: 6, title: 'Titanic', thumbnail: blackPoster, description: 'A romantic disaster film.', language: 'en', isStatic: true, genres: ['Romance', 'Drama'] },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // Fallback recommendations for when API fails\r\n  const fallbackRecommendations = [\r\n    { id: 1001, title: 'Aditya 369', thumbnail: blackPoster, description: 'A sci-fi adventure with time travel.', language: 'te', genres: ['Sci-Fi', 'Adventure'] },\r\n    { id: 1002, title: 'Magadheera', thumbnail: blackPoster, description: 'An epic reincarnation saga.', language: 'te', genres: ['Action', 'Romance', 'Epic'] },\r\n    { id: 1003, title: 'Eega', thumbnail: blackPoster, description: 'A unique revenge story of a reincarnated fly.', language: 'te', genres: ['Fantasy', 'Action'] },\r\n    { id: 1004, title: 'Arundhati', thumbnail: blackPoster, description: 'A supernatural horror thriller.', language: 'te', genres: ['Horror', 'Thriller'] },\r\n    { id: 1005, title: 'Bharateeyudu', thumbnail: blackPoster, description: 'A vigilante fights corruption.', language: 'te', genres: ['Action', 'Drama'] },\r\n  ];\r\n\r\n  // List of static movie titles for genre-based recommendations\r\n  const staticMovieTitles = initialRowsData[0].items.map((item) => item.title);\r\n\r\n  // Clear recommendations from sessionStorage on page unload\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      console.log('Clearing recommendations from sessionStorage on unload');\r\n      sessionStorage.removeItem('recommendations');\r\n    };\r\n\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []);\r\n\r\n  // Save favorites to localStorage\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n    console.log('Favorites saved to localStorage:', favorites);\r\n  }, [favorites]);\r\n\r\n  // Save recommendations to sessionStorage\r\n  useEffect(() => {\r\n    console.log('Saving recommendations to sessionStorage:', recommendations);\r\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\r\n  }, [recommendations]);\r\n\r\n  const toggleFavorite = (item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        console.log('Removing from favorites:', item.title);\r\n        const updatedFavorites = prevFavorites.filter((fav) => fav.id !== item.id);\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return updatedFavorites;\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        console.log('Adding to favorites:', item.title);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/random-telugu', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\r\n          id: i + 200,\r\n          title: rec.title,\r\n          thumbnail: staticMoviesWithLocalPosters[rec.title] || (rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=No+Poster' ? rec.poster : blackPoster),\r\n          description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n          language: rec.original_language || 'te',\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        console.warn(`No valid recommendations for \"${movieTitle}\". Using fallback.`);\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: fallbackRecommendations.slice(0, numMovies) }));\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\r\n      setError(`Failed to fetch recommendations. Showing fallback recommendations.`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: fallbackRecommendations.slice(0, numMovies) }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTeluguRecommendationsByGenre = async (movieTitle, genres, numMovies) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    const normalizedGenres = genres\r\n      .map((genre) => {\r\n        switch (genre.toLowerCase()) {\r\n          case 'epic mythological science fiction':\r\n            return ['Sci-Fi', 'Mythology', 'Action'];\r\n          case 'epic action drama':\r\n            return ['Action', 'Drama', 'Epic'];\r\n          case 'historical action drama':\r\n            return ['Historical', 'Action', 'Drama'];\r\n          case 'epic historical action drama':\r\n            return ['Action', 'Historical', 'Drama', 'Epic'];\r\n          case 'action drama':\r\n            return ['Action', 'Drama'];\r\n          case 'romantic drama':\r\n            return ['Romance', 'Drama'];\r\n          case 'coming-of-age comedy-drama':\r\n            return ['Comedy', 'Drama', 'Coming-of-Age'];\r\n          case 'legal drama':\r\n            return ['Drama', 'Legal'];\r\n          case 'martial arts action comedy':\r\n            return ['Action', 'Comedy', 'Martial Arts'];\r\n          case 'vigilante action thriller':\r\n            return ['Action', 'Thriller', 'Vigilante'];\r\n          case 'action thriller':\r\n            return ['Action', 'Thriller'];\r\n          case 'epic period action':\r\n            return ['Action', 'Period', 'Epic'];\r\n          default:\r\n            return genre;\r\n        }\r\n      })\r\n      .flat();\r\n\r\n    try {\r\n      console.log(`Fetching ${numMovies} Telugu recommendations for \"${movieTitle}\" in genres: ${normalizedGenres.join(', ')}...`);\r\n      const response = await fetch('http://localhost:5000/random-telugu-by-genre', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ genres: normalizedGenres, exclude_titles: staticMovieTitles }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\r\n          id: i + 200,\r\n          title: rec.title,\r\n          thumbnail: staticMoviesWithLocalPosters[rec.title] || (rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=No+Poster' ? rec.poster : blackPoster),\r\n          description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n          language: rec.original_language || 'te',\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        console.warn(`No genre-based recommendations for \"${movieTitle}\". Falling back to random Telugu recommendations.`);\r\n        await fetchRandomTeluguRecommendations(movieTitle, numMovies);\r\n      }\r\n    } catch (err) {\r\n      console.warn(`Failed to fetch genre-based recommendations for \"${movieTitle}\": ${err.message}. Falling back to random Telugu recommendations.`);\r\n      await fetchRandomTeluguRecommendations(movieTitle, numMovies);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRecommendations = async (movieTitle) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data) && data.length > 0) {\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => ({\r\n          id: i + 100,\r\n          title: rec.title,\r\n          thumbnail: staticMoviesWithLocalPosters[rec.title] || (rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=No+Poster' ? rec.poster : blackPoster),\r\n          description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\r\n          language: rec.original_language || 'en',\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: mappedRecommendations }));\r\n      } else {\r\n        console.warn(`No recommendations for \"${movieTitle}\". Using fallback.`);\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: fallbackRecommendations.slice(0, 5) }));\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching recommendations for \"${movieTitle}\":`, err);\r\n      setError(`Failed to fetch recommendations. Showing fallback recommendations.`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: fallbackRecommendations.slice(0, 5) }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Use initialRowsData directly since all posters are static\r\n        setInitialRows(initialRowsData);\r\n\r\n        if (featuredItem.language === 'te' && !recommendations[featuredItem.title]) {\r\n          const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n          await fetchRandomTeluguRecommendations(featuredItem.title, numRecs);\r\n        }\r\n      } catch (err) {\r\n        setError('Failed to fetch initial data');\r\n        console.error('Initial fetch error:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, [recommendations]);\r\n\r\n  const handleMoreInfo = (item) => {\r\n    const updatedItem = {\r\n      ...item,\r\n      thumbnail: staticMoviesWithLocalPosters[item.title] || item.thumbnail || blackPoster,\r\n    };\r\n    setSelectedItem(updatedItem);\r\n    const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n    if (staticMovieTitles.includes(item.title)) {\r\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\r\n    } else if (item.language === 'te') {\r\n      fetchRandomTeluguRecommendations(item.title, numRecs);\r\n    } else {\r\n      fetchRecommendations(item.title);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <Header />\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites || []}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading recommendations...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}