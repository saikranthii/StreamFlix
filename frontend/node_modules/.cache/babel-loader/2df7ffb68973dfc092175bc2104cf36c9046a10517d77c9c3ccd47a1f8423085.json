{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Import posters\nimport kalkiPoster from '../data/Kalki.jpg';\nimport salaarPoster from '../data/salaar.jpg';\nimport chaavaPoster from '../data/chaava.jpg';\nimport rrrPoster from '../data/rrr.jpg';\nimport pushpa2Poster from '../data/pushpa2.jpg';\nimport hiNannaPoster from '../data/hinanna.jpg';\nimport mad2Poster from '../data/mad2.jpg';\nimport courtPoster from '../data/court.jpg';\nimport dragonPoster from '../data/rod.jpg';\nimport saripodaPoster from '../data/ss.jpg';\nimport saahoPoster from '../data/saaho.jpg';\nimport baahubaliPoster from '../data/bb2.jpg';\nimport blackPoster from '../data/black.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState(() => {\n    const saved = sessionStorage.getItem('recommendations');\n    return saved ? JSON.parse(saved) : {};\n  });\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n\n  // In-memory cache for posters\n  const posterCache = new Map();\n  const staticMoviesWithLocalPosters = {\n    Chaava: chaavaPoster,\n    Mad2: mad2Poster,\n    'Saripodhaa Sanivaaram': saripodaPoster,\n    Saaho: saahoPoster,\n    'Baahubali 2: The Conclusion': baahubaliPoster\n  };\n  const featuredItem = {\n    id: 301344,\n    // Updated to match TMDB ID\n    title: 'Baahubali: The Beginning',\n    description: 'A Telugu epic about valor and sacrifice.',\n    thumbnail: baahubaliPoster,\n    video: '/videos/bb2.mp4',\n    language: 'te',\n    genres: ['Action', 'Drama', 'Epic']\n  };\n  const initialRowsData = [{\n    title: 'Trending Movies',\n    items: [{\n      id: 900352,\n      title: 'Kalki 2898 AD',\n      thumbnail: kalkiPoster,\n      description: 'A futuristic film inspired by Hindu mythology.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Sci-Fi', 'Mythology', 'Action']\n    }, {\n      id: 934632,\n      title: 'Salaar: Part 1 – Ceasefire',\n      thumbnail: salaarPoster,\n      description: 'An action-packed saga of power and betrayal.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Drama', 'Epic']\n    }, {\n      id: 0,\n      title: 'Chhaava',\n      thumbnail: chaavaPoster,\n      description: 'A historical drama about bravery.',\n      isStatic: true,\n      language: 'hi',\n      genres: ['Historical', 'Action', 'Drama']\n    }, {\n      id: 614933,\n      title: 'RRR',\n      thumbnail: rrrPoster,\n      description: 'A revolutionary tale of friendship and rebellion.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Historical', 'Drama', 'Epic']\n    }, {\n      id: 614934,\n      title: 'Pushpa 2: The Rule',\n      thumbnail: pushpa2Poster,\n      description: 'A gripping sequel to the smuggling saga.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Drama']\n    }, {\n      id: 1121402,\n      title: 'Hi Nanna',\n      thumbnail: hiNannaPoster,\n      description: 'A heartwarming family drama.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Romance', 'Drama']\n    }, {\n      id: 1,\n      title: 'Mad2',\n      thumbnail: mad2Poster,\n      description: 'A thrilling continuation of mystery.',\n      isStatic: true,\n      language: 'te',\n      genres: ['Comedy', 'Drama', 'Coming-of-Age']\n    }, {\n      id: 297282,\n      title: 'Court',\n      thumbnail: courtPoster,\n      description: 'A thought-provoking legal drama.',\n      language: 'mr',\n      isStatic: true,\n      genres: ['Drama', 'Legal']\n    }, {\n      id: 1560,\n      title: 'Return of the Dragon',\n      thumbnail: dragonPoster,\n      description: 'A classic martial arts adventure.',\n      language: 'en',\n      isStatic: true,\n      genres: ['Action', 'Comedy', 'Martial Arts']\n    }, {\n      id: 614932,\n      title: 'Saaho',\n      thumbnail: saahoPoster,\n      description: 'A high-octane action thriller.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Thriller']\n    }, {\n      id: 2,\n      title: 'Saripodhaa Sanivaaram',\n      thumbnail: saripodaPoster,\n      description: 'An intense vigilante story.',\n      isStatic: true,\n      language: 'te',\n      genres: ['Action', 'Thriller', 'Vigilante']\n    }, {\n      id: 301345,\n      title: 'Baahubali 2: The Conclusion',\n      thumbnail: baahubaliPoster,\n      description: 'The epic conclusion of a warrior’s saga.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Drama', 'Epic']\n    }]\n  }, {\n    title: 'Watch It Again',\n    items: [{\n      id: 27205,\n      title: 'Inception',\n      thumbnail: blackPoster,\n      description: 'A mind-bending heist movie.',\n      language: 'en',\n      genres: ['Sci-Fi', 'Thriller']\n    }, {\n      id: 19995,\n      title: 'Titanic',\n      thumbnail: blackPoster,\n      description: 'A romantic disaster film.',\n      language: 'en',\n      genres: ['Romance', 'Drama']\n    }]\n  }];\n  const staticMovieTitles = initialRowsData[0].items.map(item => item.title);\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      sessionStorage.removeItem('recommendations');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, []);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n  }, [favorites]);\n  useEffect(() => {\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\n  }, [recommendations]);\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return prevFavorites.filter(fav => fav.id !== item.id);\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  const fetchPosterForMovie = async movieTitle => {\n    if (posterCache.has(movieTitle)) {\n      return posterCache.get(movieTitle);\n    }\n    try {\n      const response = await fetch('http://localhost:5000/movie', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title: movieTitle\n        })\n      });\n      if (!response.ok) {\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}`);\n        posterCache.set(movieTitle, blackPoster);\n        return blackPoster;\n      }\n      const data = await response.json();\n      if (data.poster && data.poster !== \"https://via.placeholder.com/200x300?text=Poster\") {\n        posterCache.set(movieTitle, data.poster);\n        return data.poster;\n      } else {\n        console.warn(`No valid poster for \"${movieTitle}\":`, data);\n        posterCache.set(movieTitle, blackPoster);\n        return blackPoster;\n      }\n    } catch (err) {\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err);\n      posterCache.set(movieTitle, blackPoster);\n      return blackPoster;\n    }\n  };\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:5000/random-telugu', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\n          id: i + 200,\n          title: rec.title,\n          thumbnail: rec.poster || blackPoster,\n          description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n          language: 'te'\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        throw new Error('Invalid data format from /random-telugu endpoint');\n      }\n    } catch (err) {\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\n      setError(`Network error fetching random recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchTeluguRecommendationsByGenre = async (movieTitle, genres, numMovies) => {\n    setLoading(true);\n    setError(null);\n    const normalizedGenres = genres.map(genre => {\n      switch (genre.toLowerCase()) {\n        case 'epic mythological science fiction':\n          return ['Sci-Fi', 'Mythology', 'Action'];\n        case 'epic action drama':\n          return ['Action', 'Drama', 'Epic'];\n        case 'historical action drama':\n          return ['Historical', 'Action', 'Drama'];\n        case 'epic historical action drama':\n          return ['Action', 'Historical', 'Drama', 'Epic'];\n        case 'action drama':\n          return ['Action', 'Drama'];\n        case 'romantic drama':\n          return ['Romance', 'Drama'];\n        case 'coming-of-age comedy-drama':\n          return ['Comedy', 'Drama', 'Coming-of-Age'];\n        case 'legal drama':\n          return ['Drama', 'Legal'];\n        case 'martial arts action comedy':\n          return ['Action', 'Comedy', 'Martial Arts'];\n        case 'vigilante action thriller':\n          return ['Action', 'Thriller', 'Vigilante'];\n        case 'action thriller':\n          return ['Action', 'Thriller'];\n        case 'epic period action':\n          return ['Action', 'Drama', 'Epic'];\n        default:\n          return genre;\n      }\n    }).flat();\n    try {\n      const response = await fetch('http://localhost:5000/random-telugu-by-genre', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          genres: normalizedGenres,\n          exclude_titles: staticMovieTitles\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\n          id: i + 200,\n          title: rec.title,\n          thumbnail: rec.poster || blackPoster,\n          description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}, Year: ${rec.release_year || 'N/A'}`,\n          language: 'te'\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        throw new Error('Invalid data format from /random-telugu-by-genre endpoint');\n      }\n    } catch (err) {\n      console.warn(`Failed to fetch genre-based recommendations for \"${movieTitle}\": ${err.message}. Falling back to random Telugu recommendations.`);\n      await fetchRandomTeluguRecommendations(movieTitle, numMovies);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchRecommendations = async movieTitle => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      const data = await response.json();\n      if (response.ok && Array.isArray(data) && data.length > 0) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => ({\n          id: i + 100,\n          title: rec.title,\n          thumbnail: rec.poster || blackPoster,\n          description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\n          language: rec.original_language || 'en'\n        }));\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: mappedRecommendations\n        }));\n      } else {\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: []\n        }));\n      }\n    } catch (err) {\n      console.error(`Network error for \"${movieTitle}\":`, err);\n      setError(`Network error fetching recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\n        for (const row of updatedRows) {\n          for (const item of row.items) {\n            if (!item.isStatic && !staticMoviesWithLocalPosters[item.title]) {\n              const poster = await fetchPosterForMovie(item.title);\n              item.thumbnail = poster;\n            } else if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\n              item.thumbnail = staticMoviesWithLocalPosters[item.title];\n            }\n          }\n        }\n        setInitialRows(updatedRows);\n        if (featuredItem.language === 'te' && !recommendations[featuredItem.title]) {\n          const numRecsForBaahubali = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n          await fetchTeluguRecommendationsByGenre(featuredItem.title, featuredItem.genres, numRecsForBaahubali);\n        }\n      } catch (err) {\n        setError('Failed to fetch initial data');\n        console.error('Initial fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, [recommendations]);\n  const handleMoreInfo = item => {\n    const updatedItem = {\n      ...item\n    };\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\n    }\n    setSelectedItem(updatedItem);\n    const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n    if (staticMovieTitles.includes(item.title)) {\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\n    } else if (item.language === 'te') {\n      fetchRandomTeluguRecommendations(item.title, numRecs);\n    } else {\n      fetchRecommendations(item.title);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"1Axs3r/Ft2zsxY00vdhS+ggaLV0=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Header","Hero","Row","Modal","Footer","kalkiPoster","salaarPoster","chaavaPoster","rrrPoster","pushpa2Poster","hiNannaPoster","mad2Poster","courtPoster","dragonPoster","saripodaPoster","saahoPoster","baahubaliPoster","blackPoster","jsxDEV","_jsxDEV","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","saved","sessionStorage","getItem","JSON","parse","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","localStorage","notification","setNotification","posterCache","Map","staticMoviesWithLocalPosters","Chaava","Mad2","Saaho","featuredItem","id","title","description","thumbnail","video","language","genres","initialRowsData","items","isStatic","staticMovieTitles","map","item","handleBeforeUnload","removeItem","window","addEventListener","removeEventListener","scrollTo","setItem","stringify","toggleFavorite","prevFavorites","isFavorited","some","fav","setTimeout","filter","fetchPosterForMovie","movieTitle","has","get","response","fetch","method","headers","body","ok","console","warn","status","set","data","json","poster","err","fetchRandomTeluguRecommendations","numMovies","Error","Array","isArray","uniqueData","from","toLowerCase","values","shuffled","sort","Math","random","selectedRecommendations","slice","min","length","rec","i","original_language","prev","message","fetchTeluguRecommendationsByGenre","normalizedGenres","genre","flat","exclude_titles","release_year","fetchRecommendations","movie_title","numRecs","floor","mappedRecommendations","fetchInitialData","updatedRows","row","numRecsForBaahubali","handleMoreInfo","updatedItem","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onMoreInfo","index","Object","entries","recs","keys","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Import posters\r\nimport kalkiPoster from '../data/Kalki.jpg';\r\nimport salaarPoster from '../data/salaar.jpg';\r\nimport chaavaPoster from '../data/chaava.jpg';\r\nimport rrrPoster from '../data/rrr.jpg';\r\nimport pushpa2Poster from '../data/pushpa2.jpg';\r\nimport hiNannaPoster from '../data/hinanna.jpg';\r\nimport mad2Poster from '../data/mad2.jpg';\r\nimport courtPoster from '../data/court.jpg';\r\nimport dragonPoster from '../data/rod.jpg';\r\nimport saripodaPoster from '../data/ss.jpg';\r\nimport saahoPoster from '../data/saaho.jpg';\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\nimport blackPoster from '../data/black.jpg';\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState(() => {\r\n    const saved = sessionStorage.getItem('recommendations');\r\n    return saved ? JSON.parse(saved) : {};\r\n  });\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() =>\r\n    JSON.parse(localStorage.getItem('myList') || '[]')\r\n  );\r\n  const [notification, setNotification] = useState('');\r\n\r\n  // In-memory cache for posters\r\n  const posterCache = new Map();\r\n\r\n  const staticMoviesWithLocalPosters = {\r\n    Chaava: chaavaPoster,\r\n    Mad2: mad2Poster,\r\n    'Saripodhaa Sanivaaram': saripodaPoster,\r\n    Saaho: saahoPoster,\r\n    'Baahubali 2: The Conclusion': baahubaliPoster,\r\n  };\r\n\r\n  const featuredItem = {\r\n    id: 301344, // Updated to match TMDB ID\r\n    title: 'Baahubali: The Beginning',\r\n    description: 'A Telugu epic about valor and sacrifice.',\r\n    thumbnail: baahubaliPoster,\r\n    video: '/videos/bb2.mp4',\r\n    language: 'te',\r\n    genres: ['Action', 'Drama', 'Epic'],\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: 'Trending Movies',\r\n      items: [\r\n        { id: 900352, title: 'Kalki 2898 AD', thumbnail: kalkiPoster, description: 'A futuristic film inspired by Hindu mythology.', language: 'te', isStatic: true, genres: ['Sci-Fi', 'Mythology', 'Action'] },\r\n        { id: 934632, title: 'Salaar: Part 1 – Ceasefire', thumbnail: salaarPoster, description: 'An action-packed saga of power and betrayal.', language: 'te', isStatic: true, genres: ['Action', 'Drama', 'Epic'] },\r\n        { id: 0, title: 'Chhaava', thumbnail: chaavaPoster, description: 'A historical drama about bravery.', isStatic: true, language: 'hi', genres: ['Historical', 'Action', 'Drama'] },\r\n        { id: 614933, title: 'RRR', thumbnail: rrrPoster, description: 'A revolutionary tale of friendship and rebellion.', language: 'te', isStatic: true, genres: ['Action', 'Historical', 'Drama', 'Epic'] },\r\n        { id: 614934, title: 'Pushpa 2: The Rule', thumbnail: pushpa2Poster, description: 'A gripping sequel to the smuggling saga.', language: 'te', isStatic: true, genres: ['Action', 'Drama'] },\r\n        { id: 1121402, title: 'Hi Nanna', thumbnail: hiNannaPoster, description: 'A heartwarming family drama.', language: 'te', isStatic: true, genres: ['Romance', 'Drama'] },\r\n        { id: 1, title: 'Mad2', thumbnail: mad2Poster, description: 'A thrilling continuation of mystery.', isStatic: true, language: 'te', genres: ['Comedy', 'Drama', 'Coming-of-Age'] },\r\n        { id: 297282, title: 'Court', thumbnail: courtPoster, description: 'A thought-provoking legal drama.', language: 'mr', isStatic: true, genres: ['Drama', 'Legal'] },\r\n        { id: 1560, title: 'Return of the Dragon', thumbnail: dragonPoster, description: 'A classic martial arts adventure.', language: 'en', isStatic: true, genres: ['Action', 'Comedy', 'Martial Arts'] },\r\n        { id: 614932, title: 'Saaho', thumbnail: saahoPoster, description: 'A high-octane action thriller.', language: 'te', isStatic: true, genres: ['Action', 'Thriller'] },\r\n        { id: 2, title: 'Saripodhaa Sanivaaram', thumbnail: saripodaPoster, description: 'An intense vigilante story.', isStatic: true, language: 'te', genres: ['Action', 'Thriller', 'Vigilante'] },\r\n        { id: 301345, title: 'Baahubali 2: The Conclusion', thumbnail: baahubaliPoster, description: 'The epic conclusion of a warrior’s saga.', language: 'te', isStatic: true, genres: ['Action', 'Drama', 'Epic'] },\r\n      ],\r\n    },\r\n    {\r\n      title: 'Watch It Again',\r\n      items: [\r\n        { id: 27205, title: 'Inception', thumbnail: blackPoster, description: 'A mind-bending heist movie.', language: 'en', genres: ['Sci-Fi', 'Thriller'] },\r\n        { id: 19995, title: 'Titanic', thumbnail: blackPoster, description: 'A romantic disaster film.', language: 'en', genres: ['Romance', 'Drama'] },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const staticMovieTitles = initialRowsData[0].items.map(item => item.title);\r\n\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      sessionStorage.removeItem('recommendations');\r\n    };\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n  }, [favorites]);\r\n\r\n  useEffect(() => {\r\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\r\n  }, [recommendations]);\r\n\r\n  const toggleFavorite = (item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return prevFavorites.filter((fav) => fav.id !== item.id);\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchPosterForMovie = async (movieTitle) => {\r\n    if (posterCache.has(movieTitle)) {\r\n      return posterCache.get(movieTitle);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/movie', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ title: movieTitle }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.warn(`Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}`);\r\n        posterCache.set(movieTitle, blackPoster);\r\n        return blackPoster;\r\n      }\r\n\r\n      const data = await response.json();\r\n      if (data.poster && data.poster !== \"https://via.placeholder.com/200x300?text=Poster\") {\r\n        posterCache.set(movieTitle, data.poster);\r\n        return data.poster;\r\n      } else {\r\n        console.warn(`No valid poster for \"${movieTitle}\":`, data);\r\n        posterCache.set(movieTitle, blackPoster);\r\n        return blackPoster;\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching poster for \"${movieTitle}\":`, err);\r\n      posterCache.set(movieTitle, blackPoster);\r\n      return blackPoster;\r\n    }\r\n  };\r\n\r\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch('http://localhost:5000/random-telugu', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\r\n          id: i + 200,\r\n          title: rec.title,\r\n          thumbnail: rec.poster || blackPoster,\r\n          description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n          language: 'te',\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        throw new Error('Invalid data format from /random-telugu endpoint');\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\r\n      setError(`Network error fetching random recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTeluguRecommendationsByGenre = async (movieTitle, genres, numMovies) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    const normalizedGenres = genres.map(genre => {\r\n      switch (genre.toLowerCase()) {\r\n        case 'epic mythological science fiction': return ['Sci-Fi', 'Mythology', 'Action'];\r\n        case 'epic action drama': return ['Action', 'Drama', 'Epic'];\r\n        case 'historical action drama': return ['Historical', 'Action', 'Drama'];\r\n        case 'epic historical action drama': return ['Action', 'Historical', 'Drama', 'Epic'];\r\n        case 'action drama': return ['Action', 'Drama'];\r\n        case 'romantic drama': return ['Romance', 'Drama'];\r\n        case 'coming-of-age comedy-drama': return ['Comedy', 'Drama', 'Coming-of-Age'];\r\n        case 'legal drama': return ['Drama', 'Legal'];\r\n        case 'martial arts action comedy': return ['Action', 'Comedy', 'Martial Arts'];\r\n        case 'vigilante action thriller': return ['Action', 'Thriller', 'Vigilante'];\r\n        case 'action thriller': return ['Action', 'Thriller'];\r\n        case 'epic period action': return ['Action', 'Drama', 'Epic'];\r\n        default: return genre;\r\n      }\r\n    }).flat();\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/random-telugu-by-genre', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ genres: normalizedGenres, exclude_titles: staticMovieTitles }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => ({\r\n          id: i + 200,\r\n          title: rec.title,\r\n          thumbnail: rec.poster || blackPoster,\r\n          description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}, Year: ${rec.release_year || 'N/A'}`,\r\n          language: 'te',\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        throw new Error('Invalid data format from /random-telugu-by-genre endpoint');\r\n      }\r\n    } catch (err) {\r\n      console.warn(`Failed to fetch genre-based recommendations for \"${movieTitle}\": ${err.message}. Falling back to random Telugu recommendations.`);\r\n      await fetchRandomTeluguRecommendations(movieTitle, numMovies);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRecommendations = async (movieTitle) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (response.ok && Array.isArray(data) && data.length > 0) {\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => ({\r\n          id: i + 100,\r\n          title: rec.title,\r\n          thumbnail: rec.poster || blackPoster,\r\n          description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\r\n          language: rec.original_language || 'en',\r\n        }));\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: mappedRecommendations }));\r\n      } else {\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n      }\r\n    } catch (err) {\r\n      console.error(`Network error for \"${movieTitle}\":`, err);\r\n      setError(`Network error fetching recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\r\n\r\n        for (const row of updatedRows) {\r\n          for (const item of row.items) {\r\n            if (!item.isStatic && !staticMoviesWithLocalPosters[item.title]) {\r\n              const poster = await fetchPosterForMovie(item.title);\r\n              item.thumbnail = poster;\r\n            } else if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\r\n              item.thumbnail = staticMoviesWithLocalPosters[item.title];\r\n            }\r\n          }\r\n        }\r\n\r\n        setInitialRows(updatedRows);\r\n\r\n        if (featuredItem.language === 'te' && !recommendations[featuredItem.title]) {\r\n          const numRecsForBaahubali = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n          await fetchTeluguRecommendationsByGenre(featuredItem.title, featuredItem.genres, numRecsForBaahubali);\r\n        }\r\n      } catch (err) {\r\n        setError('Failed to fetch initial data');\r\n        console.error('Initial fetch error:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, [recommendations]);\r\n\r\n  const handleMoreInfo = (item) => {\r\n    const updatedItem = { ...item };\r\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\r\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\r\n    }\r\n    setSelectedItem(updatedItem);\r\n    const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n    if (staticMovieTitles.includes(item.title)) {\r\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\r\n    } else if (item.language === 'te') {\r\n      fetchRandomTeluguRecommendations(item.title, numRecs);\r\n    } else {\r\n      fetchRecommendations(item.title);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <Header />\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites || []}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}