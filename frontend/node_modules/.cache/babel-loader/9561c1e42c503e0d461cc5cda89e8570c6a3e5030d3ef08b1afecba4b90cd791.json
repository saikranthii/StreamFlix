{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajkamal\\\\Desktop\\\\movie_recommender\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Hero from '../components/Hero';\nimport Row from '../components/Row';\nimport Modal from '../components/Modal';\nimport Footer from '../components/Footer';\nimport './Home.css';\n\n// Import posters\nimport kalkiPoster from '../data/Kalki.jpg';\nimport salaarPoster from '../data/salaar.jpg';\nimport chaavaPoster from '../data/chaava.jpg';\nimport rrrPoster from '../data/rrr.jpg';\nimport pushpa2Poster from '../data/pushpa2.jpg';\nimport hiNannaPoster from '../data/hinanna.jpg';\nimport mad2Poster from '../data/mad2.jpg';\nimport courtPoster from '../data/court.jpg';\nimport dragonPoster from '../data/rod.jpg';\nimport saripodaPoster from '../data/ss.jpg';\nimport saahoPoster from '../data/saaho.jpg';\nimport baahubaliPoster from '../data/bb2.jpg';\nimport blackPoster from '../data/black.jpg';\n\n// Poster cache to reduce API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst posterCache = new Map();\nfunction Home() {\n  _s();\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [recommendations, setRecommendations] = useState(() => {\n    const saved = sessionStorage.getItem('recommendations');\n    console.log('Initializing recommendations from sessionStorage:', saved);\n    return saved ? JSON.parse(saved) : {};\n  });\n  const [initialRows, setInitialRows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [favorites, setFavorites] = useState(() => JSON.parse(localStorage.getItem('myList') || '[]'));\n  const [notification, setNotification] = useState('');\n  const staticMoviesWithLocalPosters = {\n    'Chaava': chaavaPoster,\n    'Mad2': mad2Poster,\n    'Saripodhaa Sanivaaram': saripodaPoster,\n    'Saaho': saahoPoster,\n    'Baahubali 2: The Conclusion': baahubaliPoster,\n    'Kalki 2898 AD': kalkiPoster,\n    'Salaar: Part 1 – Ceasefire': salaarPoster,\n    'RRR': rrrPoster,\n    'Pushpa 2: The Rule': pushpa2Poster,\n    'Hi Nanna': hiNannaPoster,\n    'Court': courtPoster,\n    'Return of the Dragon': dragonPoster\n  };\n  const featuredItem = {\n    id: 301344,\n    title: 'Baahubali: The Beginning',\n    description: 'A Telugu epic about valor and sacrifice.',\n    thumbnail: 'https://image.tmdb.org/t/p/w500/9gm3lL8n3dZA9EKGTHZdt16qMKD.jpg',\n    video: '/videos/bb2.mp4',\n    language: 'te',\n    genres: ['Action', 'Drama', 'Epic']\n  };\n  const initialRowsData = [{\n    title: 'Trending Movies',\n    items: [{\n      id: 900352,\n      title: 'Kalki 2898 AD',\n      thumbnail: kalkiPoster,\n      description: 'A futuristic film inspired by Hindu mythology.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Sci-Fi', 'Mythology', 'Action']\n    }, {\n      id: 934632,\n      title: 'Salaar: Part 1 – Ceasefire',\n      thumbnail: salaarPoster,\n      description: 'An action-packed saga of power and betrayal.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Drama', 'Epic']\n    }, {\n      id: 0,\n      title: 'Chaava',\n      thumbnail: chaavaPoster,\n      description: 'A historical drama about bravery.',\n      isStatic: true,\n      language: 'hi',\n      genres: ['Historical', 'Action', 'Drama']\n    }, {\n      id: 614933,\n      title: 'RRR',\n      thumbnail: rrrPoster,\n      description: 'A revolutionary tale of friendship and rebellion.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Historical', 'Drama', 'Epic']\n    }, {\n      id: 614934,\n      title: 'Pushpa 2: The Rule',\n      thumbnail: pushpa2Poster,\n      description: 'A gripping sequel to the smuggling saga.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Drama']\n    }, {\n      id: 1121402,\n      title: 'Hi Nanna',\n      thumbnail: hiNannaPoster,\n      description: 'A heartwarming family drama.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Romance', 'Drama']\n    }, {\n      id: 1,\n      title: 'Mad2',\n      thumbnail: mad2Poster,\n      description: 'A thrilling continuation of mystery.',\n      isStatic: true,\n      language: 'te',\n      genres: ['Comedy', 'Drama', 'Coming-of-Age']\n    }, {\n      id: 297282,\n      title: 'Court',\n      thumbnail: courtPoster,\n      description: 'A thought-provoking legal drama.',\n      language: 'mr',\n      isStatic: true,\n      genres: ['Drama', 'Legal']\n    }, {\n      id: 1560,\n      title: 'Return of the Dragon',\n      thumbnail: dragonPoster,\n      description: 'A classic martial arts adventure.',\n      language: 'en',\n      isStatic: true,\n      genres: ['Action', 'Comedy', 'Martial Arts']\n    }, {\n      id: 614932,\n      title: 'Saaho',\n      thumbnail: saahoPoster,\n      description: 'A high-octane action thriller.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Thriller']\n    }, {\n      id: 2,\n      title: 'Saripodhaa Sanivaaram',\n      thumbnail: saripodaPoster,\n      description: 'An intense vigilante story.',\n      isStatic: true,\n      language: 'te',\n      genres: ['Action', 'Thriller', 'Vigilante']\n    }, {\n      id: 301345,\n      title: 'Baahubali 2: The Conclusion',\n      thumbnail: baahubaliPoster,\n      description: 'The epic conclusion of a warrior’s saga.',\n      language: 'te',\n      isStatic: true,\n      genres: ['Action', 'Period', 'Epic']\n    }]\n  }, {\n    title: 'Watch It Again',\n    items: [{\n      id: 27205,\n      title: 'Inception',\n      thumbnail: blackPoster,\n      description: 'A mind-bending heist movie.',\n      language: 'en',\n      genres: ['Sci-Fi', 'Thriller']\n    }, {\n      id: 19995,\n      title: 'Avatar',\n      thumbnail: blackPoster,\n      description: 'A sci-fi epic on an alien planet.',\n      language: 'en',\n      genres: ['Sci-Fi', 'Adventure']\n    }]\n  }];\n  const staticMovieTitles = initialRowsData[0].items.map(item => item.title);\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      console.log('Clearing recommendations from sessionStorage on unload');\n      sessionStorage.removeItem('recommendations');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, []);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    localStorage.setItem('myList', JSON.stringify(favorites));\n    console.log('Favorites saved to localStorage:', favorites);\n  }, [favorites]);\n  useEffect(() => {\n    console.log('Saving recommendations to sessionStorage:', recommendations);\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\n  }, [recommendations]);\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      const isFavorited = prevFavorites.some(fav => fav.id === item.id);\n      if (isFavorited) {\n        console.log('Removing from favorites:', item.title);\n        const updatedFavorites = prevFavorites.filter(fav => fav.id !== item.id);\n        setNotification(`\"${item.title}\" removed from favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        return updatedFavorites;\n      } else {\n        setNotification(`\"${item.title}\" added to favorites`);\n        setTimeout(() => setNotification(''), 3000);\n        console.log('Adding to favorites:', item.title);\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/random-telugu', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(`/random-telugu response: status ${response.status}, statusText: ${response.statusText}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        console.log(`Received ${data.length} random Telugu recommendations for \"${movieTitle}\":`, data);\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\n          console.log(`Processing recommendation ${i}:`, rec);\n          const poster = rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=Poster' ? rec.poster : blackPoster;\n          console.log(`Poster for ${rec.title}:`, poster);\n          return {\n            id: i + 200,\n            title: rec.title,\n            thumbnail: poster,\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n            language: 'te'\n          };\n        });\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        throw new Error('Invalid data format from /random-telugu endpoint');\n      }\n    } catch (err) {\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\n      setError(`Network error fetching random recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchTeluguRecommendationsByGenre = async (movieTitle, genres, numMovies) => {\n    setLoading(true);\n    setError(null);\n    const normalizedGenres = genres.map(genre => {\n      switch (genre.toLowerCase()) {\n        case 'sci-fi':\n          return 'Sci-Fi';\n        case 'mythology':\n          return 'Mythology';\n        case 'action':\n          return 'Action';\n        case 'drama':\n          return 'Drama';\n        case 'epic':\n          return 'Epic';\n        case 'historical':\n          return 'Historical';\n        case 'romance':\n          return 'Romance';\n        case 'comedy':\n          return 'Comedy';\n        case 'coming-of-age':\n          return 'Coming-of-Age';\n        case 'legal':\n          return 'Legal';\n        case 'martial arts':\n          return 'Martial Arts';\n        case 'thriller':\n          return 'Thriller';\n        case 'vigilante':\n          return 'Vigilante';\n        case 'period':\n          return 'Period';\n        default:\n          return genre;\n      }\n    }).flat();\n    console.log(`Normalized genres for \"${movieTitle}\":`, normalizedGenres);\n    try {\n      console.log(`Fetching ${numMovies} Telugu recommendations for \"${movieTitle}\" in genres: ${normalizedGenres.join(', ')}...`);\n      const response = await fetch('http://localhost:5000/random-telugu-by-genre', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          genres: normalizedGenres,\n          exclude_titles: staticMovieTitles\n        })\n      });\n      console.log(`/random-telugu-by-genre response: status ${response.status}, statusText: ${response.statusText}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        console.log(`Received ${data.length} Telugu recommendations for \"${movieTitle}\":`, data);\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\n          console.log(`Processing recommendation ${i}:`, rec);\n          const poster = rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=Poster' ? rec.poster : blackPoster;\n          console.log(`Poster for ${rec.title}:`, poster);\n          return {\n            id: i + 200,\n            title: rec.title,\n            thumbnail: poster,\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\n            language: 'te'\n          };\n        });\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: selectedRecommendations\n        }));\n      } else {\n        throw new Error('Invalid data format from /random-telugu-by-genre endpoint');\n      }\n    } catch (err) {\n      console.warn(`Failed to fetch genre-based recommendations for \"${movieTitle}\": ${err.message}. Falling back to random Telugu recommendations.`);\n      await fetchRandomTeluguRecommendations(movieTitle, numMovies);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPosterForMovie = async (movieTitle, retries = 2) => {\n    if (posterCache.has(movieTitle)) {\n      console.log(`Returning cached poster for \"${movieTitle}\"`);\n      return posterCache.get(movieTitle);\n    }\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        console.log(`Attempt ${attempt}: Fetching poster for \"${movieTitle}\" via /recommend endpoint...`);\n        const response = await fetch('http://localhost:5000/recommend', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            movie_title: movieTitle\n          })\n        });\n        if (!response.ok) {\n          console.warn(`Attempt ${attempt}: Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}, ${response.statusText}`);\n          if (attempt === retries) return blackPoster;\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          continue;\n        }\n        const data = await response.json();\n        console.log(`Poster fetch response for \"${movieTitle}\":`, data);\n        if (Array.isArray(data) && data.length > 0) {\n          const firstMovie = data[0];\n          if (firstMovie.poster && typeof firstMovie.poster === 'string' && firstMovie.poster.trim() !== '' && firstMovie.poster !== 'https://via.placeholder.com/200x300?text=Poster') {\n            console.log(`Valid poster found for \"${movieTitle}\":`, firstMovie.poster);\n            posterCache.set(movieTitle, firstMovie.poster);\n            return firstMovie.poster;\n          } else {\n            console.warn(`Attempt ${attempt}: No valid poster field in response for \"${movieTitle}\":`, firstMovie);\n            if (attempt === retries) return blackPoster;\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            continue;\n          }\n        } else {\n          console.warn(`Attempt ${attempt}: Empty or invalid response for \"${movieTitle}\" when fetching poster`);\n          if (attempt === retries) return blackPoster;\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          continue;\n        }\n      } catch (err) {\n        console.error(`Attempt ${attempt}: Error fetching poster for \"${movieTitle}\":`, err);\n        if (attempt === retries) return blackPoster;\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n    posterCache.set(movieTitle, blackPoster);\n    return blackPoster;\n  };\n  const fetchRecommendations = async movieTitle => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\n      const response = await fetch('http://localhost:5000/recommend', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          movie_title: movieTitle\n        })\n      });\n      const data = await response.json();\n      console.log(`Response for /recommend: status ${response.status}, data:`, data);\n      if (response.ok && Array.isArray(data) && data.length > 0) {\n        const uniqueData = Array.from(new Map(data.map(item => [item.title.toLowerCase(), item])).values());\n        console.log(`After removing duplicates, ${uniqueData.length} unique recommendations for \"${movieTitle}\":`, uniqueData);\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n        console.log(`Selecting ${numRecs} recommendations for \"${movieTitle}\"...`);\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => {\n          const poster = rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=Poster' ? rec.poster : blackPoster;\n          console.log(`Poster for ${rec.title}:`, poster);\n          return {\n            id: i + 100,\n            title: rec.title,\n            thumbnail: poster,\n            description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\n            language: rec.original_language || 'en'\n          };\n        });\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: mappedRecommendations\n        }));\n      } else {\n        console.log(`No valid data from /recommend for \"${movieTitle}\"`);\n        setRecommendations(prev => ({\n          ...prev,\n          [movieTitle]: []\n        }));\n      }\n    } catch (err) {\n      console.error(`Network error for \"${movieTitle}\":`, err);\n      setError(`Network error fetching recommendations: ${err.message}`);\n      setRecommendations(prev => ({\n        ...prev,\n        [movieTitle]: []\n      }));\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setLoading(true);\n      try {\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\n        for (const row of updatedRows) {\n          if (row.title === 'Watch It Again') {\n            for (const item of row.items) {\n              if (item.language === 'en') {\n                const poster = await fetchPosterForMovie(item.title);\n                item.thumbnail = poster;\n              }\n            }\n          }\n        }\n        setInitialRows(updatedRows);\n        if (featuredItem.language === 'te' && !recommendations[featuredItem.title]) {\n          const numRecsForBaahubali = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n          console.log(`Fetching initial Baahubali recommendations (${numRecsForBaahubali})`);\n          await fetchRandomTeluguRecommendations(featuredItem.title, numRecsForBaahubali);\n        } else {\n          console.log(`Skipping Baahubali recommendations fetch; already exists:`, recommendations[featuredItem.title]);\n        }\n      } catch (err) {\n        setError('Failed to fetch initial data');\n        console.error('Initial fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, [recommendations]);\n  const handleMoreInfo = item => {\n    const updatedItem = {\n      ...item\n    };\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\n    } else if (!updatedItem.thumbnail || updatedItem.thumbnail === 'https://via.placeholder.com/200x300?text=Poster') {\n      updatedItem.thumbnail = blackPoster;\n    }\n    setSelectedItem(updatedItem);\n    const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\n    if (staticMovieTitles.includes(item.title)) {\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\n    } else if (item.language === 'te') {\n      fetchRandomTeluguRecommendations(item.title, numRecs);\n    } else {\n      fetchRecommendations(item.title);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hero, {\n      item: featuredItem,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), (initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n      title: row.title,\n      items: row.items.map(item => ({\n        ...item,\n        thumbnail: item.thumbnail && item.thumbnail !== 'https://via.placeholder.com/200x300?text=Poster' ? item.thumbnail : blackPoster\n      })),\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }, this)), Object.entries(recommendations).map(([title, recs]) => /*#__PURE__*/_jsxDEV(Row, {\n      title: `Recommendations for ${title}`,\n      items: recs,\n      onMoreInfo: handleMoreInfo,\n      favorites: favorites || [],\n      toggleFavorite: toggleFavorite\n    }, `rec-${title}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }, this)), !Object.keys(recommendations).length && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-recommendations\",\n      children: \"No recommendations loaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 17\n    }, this), selectedItem && /*#__PURE__*/_jsxDEV(Modal, {\n      item: selectedItem,\n      onClose: () => setSelectedItem(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 24\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"ZeQ/juDncc6iGOk4Jn2j4/7+q60=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Header","Hero","Row","Modal","Footer","kalkiPoster","salaarPoster","chaavaPoster","rrrPoster","pushpa2Poster","hiNannaPoster","mad2Poster","courtPoster","dragonPoster","saripodaPoster","saahoPoster","baahubaliPoster","blackPoster","jsxDEV","_jsxDEV","posterCache","Map","Home","_s","selectedItem","setSelectedItem","recommendations","setRecommendations","saved","sessionStorage","getItem","console","log","JSON","parse","initialRows","setInitialRows","loading","setLoading","error","setError","favorites","setFavorites","localStorage","notification","setNotification","staticMoviesWithLocalPosters","featuredItem","id","title","description","thumbnail","video","language","genres","initialRowsData","items","isStatic","staticMovieTitles","map","item","handleBeforeUnload","removeItem","window","addEventListener","removeEventListener","scrollTo","setItem","stringify","toggleFavorite","prevFavorites","isFavorited","some","fav","updatedFavorites","filter","setTimeout","fetchRandomTeluguRecommendations","movieTitle","numMovies","response","fetch","method","headers","status","statusText","ok","Error","data","json","Array","isArray","length","uniqueData","from","toLowerCase","values","shuffled","sort","Math","random","selectedRecommendations","slice","min","rec","i","poster","original_language","prev","err","message","fetchTeluguRecommendationsByGenre","normalizedGenres","genre","flat","join","body","exclude_titles","warn","fetchPosterForMovie","retries","has","get","attempt","movie_title","Promise","resolve","firstMovie","trim","set","fetchRecommendations","numRecs","floor","mappedRecommendations","fetchInitialData","updatedRows","row","numRecsForBaahubali","handleMoreInfo","updatedItem","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onMoreInfo","index","Object","entries","recs","keys","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Rajkamal/Desktop/movie_recommender/frontend/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from '../components/Header';\r\nimport Hero from '../components/Hero';\r\nimport Row from '../components/Row';\r\nimport Modal from '../components/Modal';\r\nimport Footer from '../components/Footer';\r\nimport './Home.css';\r\n\r\n// Import posters\r\nimport kalkiPoster from '../data/Kalki.jpg';\r\nimport salaarPoster from '../data/salaar.jpg';\r\nimport chaavaPoster from '../data/chaava.jpg';\r\nimport rrrPoster from '../data/rrr.jpg';\r\nimport pushpa2Poster from '../data/pushpa2.jpg';\r\nimport hiNannaPoster from '../data/hinanna.jpg';\r\nimport mad2Poster from '../data/mad2.jpg';\r\nimport courtPoster from '../data/court.jpg';\r\nimport dragonPoster from '../data/rod.jpg';\r\nimport saripodaPoster from '../data/ss.jpg';\r\nimport saahoPoster from '../data/saaho.jpg';\r\nimport baahubaliPoster from '../data/bb2.jpg';\r\nimport blackPoster from '../data/black.jpg';\r\n\r\n// Poster cache to reduce API calls\r\nconst posterCache = new Map();\r\n\r\nfunction Home() {\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [recommendations, setRecommendations] = useState(() => {\r\n    const saved = sessionStorage.getItem('recommendations');\r\n    console.log('Initializing recommendations from sessionStorage:', saved);\r\n    return saved ? JSON.parse(saved) : {};\r\n  });\r\n  const [initialRows, setInitialRows] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [favorites, setFavorites] = useState(() =>\r\n    JSON.parse(localStorage.getItem('myList') || '[]')\r\n  );\r\n  const [notification, setNotification] = useState('');\r\n\r\n  const staticMoviesWithLocalPosters = {\r\n    'Chaava': chaavaPoster,\r\n    'Mad2': mad2Poster,\r\n    'Saripodhaa Sanivaaram': saripodaPoster,\r\n    'Saaho': saahoPoster,\r\n    'Baahubali 2: The Conclusion': baahubaliPoster,\r\n    'Kalki 2898 AD': kalkiPoster,\r\n    'Salaar: Part 1 – Ceasefire': salaarPoster,\r\n    'RRR': rrrPoster,\r\n    'Pushpa 2: The Rule': pushpa2Poster,\r\n    'Hi Nanna': hiNannaPoster,\r\n    'Court': courtPoster,\r\n    'Return of the Dragon': dragonPoster\r\n  };\r\n\r\n  const featuredItem = {\r\n    id: 301344,\r\n    title: 'Baahubali: The Beginning',\r\n    description: 'A Telugu epic about valor and sacrifice.',\r\n    thumbnail: 'https://image.tmdb.org/t/p/w500/9gm3lL8n3dZA9EKGTHZdt16qMKD.jpg',\r\n    video: '/videos/bb2.mp4',\r\n    language: 'te',\r\n    genres: ['Action', 'Drama', 'Epic']\r\n  };\r\n\r\n  const initialRowsData = [\r\n    {\r\n      title: 'Trending Movies',\r\n      items: [\r\n        { id: 900352, title: 'Kalki 2898 AD', thumbnail: kalkiPoster, description: 'A futuristic film inspired by Hindu mythology.', language: 'te', isStatic: true, genres: ['Sci-Fi', 'Mythology', 'Action'] },\r\n        { id: 934632, title: 'Salaar: Part 1 – Ceasefire', thumbnail: salaarPoster, description: 'An action-packed saga of power and betrayal.', language: 'te', isStatic: true, genres: ['Action', 'Drama', 'Epic'] },\r\n        { id: 0, title: 'Chaava', thumbnail: chaavaPoster, description: 'A historical drama about bravery.', isStatic: true, language: 'hi', genres: ['Historical', 'Action', 'Drama'] },\r\n        { id: 614933, title: 'RRR', thumbnail: rrrPoster, description: 'A revolutionary tale of friendship and rebellion.', language: 'te', isStatic: true, genres: ['Action', 'Historical', 'Drama', 'Epic'] },\r\n        { id: 614934, title: 'Pushpa 2: The Rule', thumbnail: pushpa2Poster, description: 'A gripping sequel to the smuggling saga.', language: 'te', isStatic: true, genres: ['Action', 'Drama'] },\r\n        { id: 1121402, title: 'Hi Nanna', thumbnail: hiNannaPoster, description: 'A heartwarming family drama.', language: 'te', isStatic: true, genres: ['Romance', 'Drama'] },\r\n        { id: 1, title: 'Mad2', thumbnail: mad2Poster, description: 'A thrilling continuation of mystery.', isStatic: true, language: 'te', genres: ['Comedy', 'Drama', 'Coming-of-Age'] },\r\n        { id: 297282, title: 'Court', thumbnail: courtPoster, description: 'A thought-provoking legal drama.', language: 'mr', isStatic: true, genres: ['Drama', 'Legal'] },\r\n        { id: 1560, title: 'Return of the Dragon', thumbnail: dragonPoster, description: 'A classic martial arts adventure.', language: 'en', isStatic: true, genres: ['Action', 'Comedy', 'Martial Arts'] },\r\n        { id: 614932, title: 'Saaho', thumbnail: saahoPoster, description: 'A high-octane action thriller.', language: 'te', isStatic: true, genres: ['Action', 'Thriller'] },\r\n        { id: 2, title: 'Saripodhaa Sanivaaram', thumbnail: saripodaPoster, description: 'An intense vigilante story.', isStatic: true, language: 'te', genres: ['Action', 'Thriller', 'Vigilante'] },\r\n        { id: 301345, title: 'Baahubali 2: The Conclusion', thumbnail: baahubaliPoster, description: 'The epic conclusion of a warrior’s saga.', language: 'te', isStatic: true, genres: ['Action', 'Period', 'Epic'] }\r\n      ]\r\n    },\r\n    {\r\n      title: 'Watch It Again',\r\n      items: [\r\n        { id: 27205, title: 'Inception', thumbnail: blackPoster, description: 'A mind-bending heist movie.', language: 'en', genres: ['Sci-Fi', 'Thriller'] },\r\n        { id: 19995, title: 'Avatar', thumbnail: blackPoster, description: 'A sci-fi epic on an alien planet.', language: 'en', genres: ['Sci-Fi', 'Adventure'] }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  const staticMovieTitles = initialRowsData[0].items.map(item => item.title);\r\n\r\n  useEffect(() => {\r\n    const handleBeforeUnload = () => {\r\n      console.log('Clearing recommendations from sessionStorage on unload');\r\n      sessionStorage.removeItem('recommendations');\r\n    };\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    localStorage.setItem('myList', JSON.stringify(favorites));\r\n    console.log('Favorites saved to localStorage:', favorites);\r\n  }, [favorites]);\r\n\r\n  useEffect(() => {\r\n    console.log('Saving recommendations to sessionStorage:', recommendations);\r\n    sessionStorage.setItem('recommendations', JSON.stringify(recommendations));\r\n  }, [recommendations]);\r\n\r\n  const toggleFavorite = (item) => {\r\n    setFavorites((prevFavorites) => {\r\n      const isFavorited = prevFavorites.some((fav) => fav.id === item.id);\r\n      if (isFavorited) {\r\n        console.log('Removing from favorites:', item.title);\r\n        const updatedFavorites = prevFavorites.filter((fav) => fav.id !== item.id);\r\n        setNotification(`\"${item.title}\" removed from favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        return updatedFavorites;\r\n      } else {\r\n        setNotification(`\"${item.title}\" added to favorites`);\r\n        setTimeout(() => setNotification(''), 3000);\r\n        console.log('Adding to favorites:', item.title);\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const fetchRandomTeluguRecommendations = async (movieTitle, numMovies) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching ${numMovies} random Telugu recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/random-telugu', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      console.log(`/random-telugu response: status ${response.status}, statusText: ${response.statusText}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        console.log(`Received ${data.length} random Telugu recommendations for \"${movieTitle}\":`, data);\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\r\n          console.log(`Processing recommendation ${i}:`, rec);\r\n          const poster = rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=Poster' ? rec.poster : blackPoster;\r\n          console.log(`Poster for ${rec.title}:`, poster);\r\n          return {\r\n            id: i + 200,\r\n            title: rec.title,\r\n            thumbnail: poster,\r\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n            language: 'te'\r\n          };\r\n        });\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        throw new Error('Invalid data format from /random-telugu endpoint');\r\n      }\r\n    } catch (err) {\r\n      console.error(`Error fetching random Telugu recommendations for \"${movieTitle}\":`, err);\r\n      setError(`Network error fetching random recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTeluguRecommendationsByGenre = async (movieTitle, genres, numMovies) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    const normalizedGenres = genres.map(genre => {\r\n      switch (genre.toLowerCase()) {\r\n        case 'sci-fi': return 'Sci-Fi';\r\n        case 'mythology': return 'Mythology';\r\n        case 'action': return 'Action';\r\n        case 'drama': return 'Drama';\r\n        case 'epic': return 'Epic';\r\n        case 'historical': return 'Historical';\r\n        case 'romance': return 'Romance';\r\n        case 'comedy': return 'Comedy';\r\n        case 'coming-of-age': return 'Coming-of-Age';\r\n        case 'legal': return 'Legal';\r\n        case 'martial arts': return 'Martial Arts';\r\n        case 'thriller': return 'Thriller';\r\n        case 'vigilante': return 'Vigilante';\r\n        case 'period': return 'Period';\r\n        default: return genre;\r\n      }\r\n    }).flat();\r\n    console.log(`Normalized genres for \"${movieTitle}\":`, normalizedGenres);\r\n\r\n    try {\r\n      console.log(`Fetching ${numMovies} Telugu recommendations for \"${movieTitle}\" in genres: ${normalizedGenres.join(', ')}...`);\r\n      const response = await fetch('http://localhost:5000/random-telugu-by-genre', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ genres: normalizedGenres, exclude_titles: staticMovieTitles })\r\n      });\r\n      console.log(`/random-telugu-by-genre response: status ${response.status}, statusText: ${response.statusText}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        console.log(`Received ${data.length} Telugu recommendations for \"${movieTitle}\":`, data);\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        console.log(`After removing duplicates, ${uniqueData.length} unique Telugu recommendations for \"${movieTitle}\":`, uniqueData);\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const selectedRecommendations = shuffled.slice(0, Math.min(numMovies, uniqueData.length)).map((rec, i) => {\r\n          console.log(`Processing recommendation ${i}:`, rec);\r\n          const poster = rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=Poster' ? rec.poster : blackPoster;\r\n          console.log(`Poster for ${rec.title}:`, poster);\r\n          return {\r\n            id: i + 200,\r\n            title: rec.title,\r\n            thumbnail: poster,\r\n            description: `Language: ${rec.original_language || 'te'}, Genres: ${rec.genres || 'N/A'}`,\r\n            language: 'te'\r\n          };\r\n        });\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: selectedRecommendations }));\r\n      } else {\r\n        throw new Error('Invalid data format from /random-telugu-by-genre endpoint');\r\n      }\r\n    } catch (err) {\r\n      console.warn(`Failed to fetch genre-based recommendations for \"${movieTitle}\": ${err.message}. Falling back to random Telugu recommendations.`);\r\n      await fetchRandomTeluguRecommendations(movieTitle, numMovies);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchPosterForMovie = async (movieTitle, retries = 2) => {\r\n    if (posterCache.has(movieTitle)) {\r\n      console.log(`Returning cached poster for \"${movieTitle}\"`);\r\n      return posterCache.get(movieTitle);\r\n    }\r\n    for (let attempt = 1; attempt <= retries; attempt++) {\r\n      try {\r\n        console.log(`Attempt ${attempt}: Fetching poster for \"${movieTitle}\" via /recommend endpoint...`);\r\n        const response = await fetch('http://localhost:5000/recommend', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ movie_title: movieTitle })\r\n        });\r\n        if (!response.ok) {\r\n          console.warn(`Attempt ${attempt}: Failed to fetch poster for \"${movieTitle}\": HTTP status ${response.status}, ${response.statusText}`);\r\n          if (attempt === retries) return blackPoster;\r\n          await new Promise(resolve => setTimeout(resolve, 1000));\r\n          continue;\r\n        }\r\n        const data = await response.json();\r\n        console.log(`Poster fetch response for \"${movieTitle}\":`, data);\r\n        if (Array.isArray(data) && data.length > 0) {\r\n          const firstMovie = data[0];\r\n          if (firstMovie.poster && typeof firstMovie.poster === 'string' && firstMovie.poster.trim() !== '' && firstMovie.poster !== 'https://via.placeholder.com/200x300?text=Poster') {\r\n            console.log(`Valid poster found for \"${movieTitle}\":`, firstMovie.poster);\r\n            posterCache.set(movieTitle, firstMovie.poster);\r\n            return firstMovie.poster;\r\n          } else {\r\n            console.warn(`Attempt ${attempt}: No valid poster field in response for \"${movieTitle}\":`, firstMovie);\r\n            if (attempt === retries) return blackPoster;\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n            continue;\r\n          }\r\n        } else {\r\n          console.warn(`Attempt ${attempt}: Empty or invalid response for \"${movieTitle}\" when fetching poster`);\r\n          if (attempt === retries) return blackPoster;\r\n          await new Promise(resolve => setTimeout(resolve, 1000));\r\n          continue;\r\n        }\r\n      } catch (err) {\r\n        console.error(`Attempt ${attempt}: Error fetching poster for \"${movieTitle}\":`, err);\r\n        if (attempt === retries) return blackPoster;\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      }\r\n    }\r\n    posterCache.set(movieTitle, blackPoster);\r\n    return blackPoster;\r\n  };\r\n\r\n  const fetchRecommendations = async (movieTitle) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(`Fetching recommendations for \"${movieTitle}\"...`);\r\n      const response = await fetch('http://localhost:5000/recommend', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ movie_title: movieTitle })\r\n      });\r\n      const data = await response.json();\r\n      console.log(`Response for /recommend: status ${response.status}, data:`, data);\r\n      if (response.ok && Array.isArray(data) && data.length > 0) {\r\n        const uniqueData = Array.from(new Map(data.map((item) => [item.title.toLowerCase(), item])).values());\r\n        console.log(`After removing duplicates, ${uniqueData.length} unique recommendations for \"${movieTitle}\":`, uniqueData);\r\n        const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n        console.log(`Selecting ${numRecs} recommendations for \"${movieTitle}\"...`);\r\n        const shuffled = uniqueData.sort(() => 0.5 - Math.random());\r\n        const mappedRecommendations = shuffled.slice(0, Math.min(numRecs, uniqueData.length)).map((rec, i) => {\r\n          const poster = rec.poster && rec.poster !== 'https://via.placeholder.com/200x300?text=Poster' ? rec.poster : blackPoster;\r\n          console.log(`Poster for ${rec.title}:`, poster);\r\n          return {\r\n            id: i + 100,\r\n            title: rec.title,\r\n            thumbnail: poster,\r\n            description: `Language: ${rec.original_language || 'en'}, Genres: ${rec.genres || 'N/A'}`,\r\n            language: rec.original_language || 'en'\r\n          };\r\n        });\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: mappedRecommendations }));\r\n      } else {\r\n        console.log(`No valid data from /recommend for \"${movieTitle}\"`);\r\n        setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n      }\r\n    } catch (err) {\r\n      console.error(`Network error for \"${movieTitle}\":`, err);\r\n      setError(`Network error fetching recommendations: ${err.message}`);\r\n      setRecommendations((prev) => ({ ...prev, [movieTitle]: [] }));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const updatedRows = JSON.parse(JSON.stringify(initialRowsData));\r\n\r\n        for (const row of updatedRows) {\r\n          if (row.title === 'Watch It Again') {\r\n            for (const item of row.items) {\r\n              if (item.language === 'en') {\r\n                const poster = await fetchPosterForMovie(item.title);\r\n                item.thumbnail = poster;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        setInitialRows(updatedRows);\r\n\r\n        if (featuredItem.language === 'te' && !recommendations[featuredItem.title]) {\r\n          const numRecsForBaahubali = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n          console.log(`Fetching initial Baahubali recommendations (${numRecsForBaahubali})`);\r\n          await fetchRandomTeluguRecommendations(featuredItem.title, numRecsForBaahubali);\r\n        } else {\r\n          console.log(`Skipping Baahubali recommendations fetch; already exists:`, recommendations[featuredItem.title]);\r\n        }\r\n      } catch (err) {\r\n        setError('Failed to fetch initial data');\r\n        console.error('Initial fetch error:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, [recommendations]);\r\n\r\n  const handleMoreInfo = (item) => {\r\n    const updatedItem = { ...item };\r\n    if (item.isStatic && staticMoviesWithLocalPosters[item.title]) {\r\n      updatedItem.thumbnail = staticMoviesWithLocalPosters[item.title];\r\n    } else if (!updatedItem.thumbnail || updatedItem.thumbnail === 'https://via.placeholder.com/200x300?text=Poster') {\r\n      updatedItem.thumbnail = blackPoster;\r\n    }\r\n    setSelectedItem(updatedItem);\r\n    const numRecs = Math.floor(Math.random() * (10 - 5 + 1)) + 5;\r\n    if (staticMovieTitles.includes(item.title)) {\r\n      fetchTeluguRecommendationsByGenre(item.title, item.genres, numRecs);\r\n    } else if (item.language === 'te') {\r\n      fetchRandomTeluguRecommendations(item.title, numRecs);\r\n    } else {\r\n      fetchRecommendations(item.title);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <Header />\r\n      <Hero\r\n        item={featuredItem}\r\n        onMoreInfo={handleMoreInfo}\r\n        favorites={favorites || []}\r\n        toggleFavorite={toggleFavorite}\r\n      />\r\n      {(initialRows.length > 0 ? initialRows : initialRowsData).map((row, index) => (\r\n        <Row\r\n          key={index}\r\n          title={row.title}\r\n          items={row.items.map(item => ({\r\n            ...item,\r\n            thumbnail: item.thumbnail && item.thumbnail !== 'https://via.placeholder.com/200x300?text=Poster' ? item.thumbnail : blackPoster\r\n          }))}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {Object.entries(recommendations).map(([title, recs]) => (\r\n        <Row\r\n          key={`rec-${title}`}\r\n          title={`Recommendations for ${title}`}\r\n          items={recs}\r\n          onMoreInfo={handleMoreInfo}\r\n          favorites={favorites || []}\r\n          toggleFavorite={toggleFavorite}\r\n        />\r\n      ))}\r\n      {!Object.keys(recommendations).length && !loading && (\r\n        <div className=\"no-recommendations\">No recommendations loaded yet.</div>\r\n      )}\r\n      {loading && <div className=\"loading\">Loading...</div>}\r\n      {error && <div className=\"error\">{error}</div>}\r\n      {selectedItem && <Modal item={selectedItem} onClose={() => setSelectedItem(null)} />}\r\n      {notification && <div className=\"notification\">{notification}</div>}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}